
Simple-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockFLASH 0000000a  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .myBufBlockRAM 00000080  20000100  20000100  00030100  2**2
                  ALLOC
  3 .text         00003628  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .mysection    00000000  08010000  08010000  000201f0  2**0
                  CONTENTS
  5 .rodata       00000134  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08004768  08004768  000201f0  2**0
                  CONTENTS
  7 .ARM          00000008  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08004770  08004770  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000070  20000180  08004778  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000000c8  200001f0  080047e8  000201f0  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200002b8  080047e8  000202b8  2**0
                  ALLOC
 14 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000b86f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001ca3  00000000  00000000  0002ba87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000900  00000000  00000000  0002d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000848  00000000  00000000  0002e030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001867a  00000000  00000000  0002e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000b33f  00000000  00000000  00046ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000979a1  00000000  00000000  00052231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  000e9bd2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000025b8  00000000  00000000  000e9c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	; (8001028 <__do_global_dtors_aux+0x1c>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <__do_global_dtors_aux+0x1a>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <__do_global_dtors_aux+0x20>)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <__do_global_dtors_aux+0x16>
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <__do_global_dtors_aux+0x24>)
 800101e:	e000      	b.n	8001022 <__do_global_dtors_aux+0x16>
 8001020:	bf00      	nop
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	200001f0 	.word	0x200001f0
 800102c:	00000000 	.word	0x00000000
 8001030:	0800461c 	.word	0x0800461c

08001034 <frame_dummy>:
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <frame_dummy+0x14>)
 8001036:	b510      	push	{r4, lr}
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <frame_dummy+0x10>
 800103c:	4903      	ldr	r1, [pc, #12]	; (800104c <frame_dummy+0x18>)
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <frame_dummy+0x1c>)
 8001040:	e000      	b.n	8001044 <frame_dummy+0x10>
 8001042:	bf00      	nop
 8001044:	bd10      	pop	{r4, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	00000000 	.word	0x00000000
 800104c:	200001f4 	.word	0x200001f4
 8001050:	0800461c 	.word	0x0800461c

08001054 <__udivsi3>:
 8001054:	2200      	movs	r2, #0
 8001056:	0843      	lsrs	r3, r0, #1
 8001058:	428b      	cmp	r3, r1
 800105a:	d374      	bcc.n	8001146 <__udivsi3+0xf2>
 800105c:	0903      	lsrs	r3, r0, #4
 800105e:	428b      	cmp	r3, r1
 8001060:	d35f      	bcc.n	8001122 <__udivsi3+0xce>
 8001062:	0a03      	lsrs	r3, r0, #8
 8001064:	428b      	cmp	r3, r1
 8001066:	d344      	bcc.n	80010f2 <__udivsi3+0x9e>
 8001068:	0b03      	lsrs	r3, r0, #12
 800106a:	428b      	cmp	r3, r1
 800106c:	d328      	bcc.n	80010c0 <__udivsi3+0x6c>
 800106e:	0c03      	lsrs	r3, r0, #16
 8001070:	428b      	cmp	r3, r1
 8001072:	d30d      	bcc.n	8001090 <__udivsi3+0x3c>
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	ba12      	rev	r2, r2
 800107a:	0c03      	lsrs	r3, r0, #16
 800107c:	428b      	cmp	r3, r1
 800107e:	d302      	bcc.n	8001086 <__udivsi3+0x32>
 8001080:	1212      	asrs	r2, r2, #8
 8001082:	0209      	lsls	r1, r1, #8
 8001084:	d065      	beq.n	8001152 <__udivsi3+0xfe>
 8001086:	0b03      	lsrs	r3, r0, #12
 8001088:	428b      	cmp	r3, r1
 800108a:	d319      	bcc.n	80010c0 <__udivsi3+0x6c>
 800108c:	e000      	b.n	8001090 <__udivsi3+0x3c>
 800108e:	0a09      	lsrs	r1, r1, #8
 8001090:	0bc3      	lsrs	r3, r0, #15
 8001092:	428b      	cmp	r3, r1
 8001094:	d301      	bcc.n	800109a <__udivsi3+0x46>
 8001096:	03cb      	lsls	r3, r1, #15
 8001098:	1ac0      	subs	r0, r0, r3
 800109a:	4152      	adcs	r2, r2
 800109c:	0b83      	lsrs	r3, r0, #14
 800109e:	428b      	cmp	r3, r1
 80010a0:	d301      	bcc.n	80010a6 <__udivsi3+0x52>
 80010a2:	038b      	lsls	r3, r1, #14
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	4152      	adcs	r2, r2
 80010a8:	0b43      	lsrs	r3, r0, #13
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d301      	bcc.n	80010b2 <__udivsi3+0x5e>
 80010ae:	034b      	lsls	r3, r1, #13
 80010b0:	1ac0      	subs	r0, r0, r3
 80010b2:	4152      	adcs	r2, r2
 80010b4:	0b03      	lsrs	r3, r0, #12
 80010b6:	428b      	cmp	r3, r1
 80010b8:	d301      	bcc.n	80010be <__udivsi3+0x6a>
 80010ba:	030b      	lsls	r3, r1, #12
 80010bc:	1ac0      	subs	r0, r0, r3
 80010be:	4152      	adcs	r2, r2
 80010c0:	0ac3      	lsrs	r3, r0, #11
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d301      	bcc.n	80010ca <__udivsi3+0x76>
 80010c6:	02cb      	lsls	r3, r1, #11
 80010c8:	1ac0      	subs	r0, r0, r3
 80010ca:	4152      	adcs	r2, r2
 80010cc:	0a83      	lsrs	r3, r0, #10
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d301      	bcc.n	80010d6 <__udivsi3+0x82>
 80010d2:	028b      	lsls	r3, r1, #10
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	4152      	adcs	r2, r2
 80010d8:	0a43      	lsrs	r3, r0, #9
 80010da:	428b      	cmp	r3, r1
 80010dc:	d301      	bcc.n	80010e2 <__udivsi3+0x8e>
 80010de:	024b      	lsls	r3, r1, #9
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	4152      	adcs	r2, r2
 80010e4:	0a03      	lsrs	r3, r0, #8
 80010e6:	428b      	cmp	r3, r1
 80010e8:	d301      	bcc.n	80010ee <__udivsi3+0x9a>
 80010ea:	020b      	lsls	r3, r1, #8
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	4152      	adcs	r2, r2
 80010f0:	d2cd      	bcs.n	800108e <__udivsi3+0x3a>
 80010f2:	09c3      	lsrs	r3, r0, #7
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d301      	bcc.n	80010fc <__udivsi3+0xa8>
 80010f8:	01cb      	lsls	r3, r1, #7
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	4152      	adcs	r2, r2
 80010fe:	0983      	lsrs	r3, r0, #6
 8001100:	428b      	cmp	r3, r1
 8001102:	d301      	bcc.n	8001108 <__udivsi3+0xb4>
 8001104:	018b      	lsls	r3, r1, #6
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4152      	adcs	r2, r2
 800110a:	0943      	lsrs	r3, r0, #5
 800110c:	428b      	cmp	r3, r1
 800110e:	d301      	bcc.n	8001114 <__udivsi3+0xc0>
 8001110:	014b      	lsls	r3, r1, #5
 8001112:	1ac0      	subs	r0, r0, r3
 8001114:	4152      	adcs	r2, r2
 8001116:	0903      	lsrs	r3, r0, #4
 8001118:	428b      	cmp	r3, r1
 800111a:	d301      	bcc.n	8001120 <__udivsi3+0xcc>
 800111c:	010b      	lsls	r3, r1, #4
 800111e:	1ac0      	subs	r0, r0, r3
 8001120:	4152      	adcs	r2, r2
 8001122:	08c3      	lsrs	r3, r0, #3
 8001124:	428b      	cmp	r3, r1
 8001126:	d301      	bcc.n	800112c <__udivsi3+0xd8>
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	1ac0      	subs	r0, r0, r3
 800112c:	4152      	adcs	r2, r2
 800112e:	0883      	lsrs	r3, r0, #2
 8001130:	428b      	cmp	r3, r1
 8001132:	d301      	bcc.n	8001138 <__udivsi3+0xe4>
 8001134:	008b      	lsls	r3, r1, #2
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	4152      	adcs	r2, r2
 800113a:	0843      	lsrs	r3, r0, #1
 800113c:	428b      	cmp	r3, r1
 800113e:	d301      	bcc.n	8001144 <__udivsi3+0xf0>
 8001140:	004b      	lsls	r3, r1, #1
 8001142:	1ac0      	subs	r0, r0, r3
 8001144:	4152      	adcs	r2, r2
 8001146:	1a41      	subs	r1, r0, r1
 8001148:	d200      	bcs.n	800114c <__udivsi3+0xf8>
 800114a:	4601      	mov	r1, r0
 800114c:	4152      	adcs	r2, r2
 800114e:	4610      	mov	r0, r2
 8001150:	4770      	bx	lr
 8001152:	e7ff      	b.n	8001154 <__udivsi3+0x100>
 8001154:	b501      	push	{r0, lr}
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f8f0 	bl	800133c <__aeabi_idiv0>
 800115c:	bd02      	pop	{r1, pc}
 800115e:	46c0      	nop			; (mov r8, r8)

08001160 <__aeabi_uidivmod>:
 8001160:	2900      	cmp	r1, #0
 8001162:	d0f7      	beq.n	8001154 <__udivsi3+0x100>
 8001164:	e776      	b.n	8001054 <__udivsi3>
 8001166:	4770      	bx	lr

08001168 <__divsi3>:
 8001168:	4603      	mov	r3, r0
 800116a:	430b      	orrs	r3, r1
 800116c:	d47f      	bmi.n	800126e <__divsi3+0x106>
 800116e:	2200      	movs	r2, #0
 8001170:	0843      	lsrs	r3, r0, #1
 8001172:	428b      	cmp	r3, r1
 8001174:	d374      	bcc.n	8001260 <__divsi3+0xf8>
 8001176:	0903      	lsrs	r3, r0, #4
 8001178:	428b      	cmp	r3, r1
 800117a:	d35f      	bcc.n	800123c <__divsi3+0xd4>
 800117c:	0a03      	lsrs	r3, r0, #8
 800117e:	428b      	cmp	r3, r1
 8001180:	d344      	bcc.n	800120c <__divsi3+0xa4>
 8001182:	0b03      	lsrs	r3, r0, #12
 8001184:	428b      	cmp	r3, r1
 8001186:	d328      	bcc.n	80011da <__divsi3+0x72>
 8001188:	0c03      	lsrs	r3, r0, #16
 800118a:	428b      	cmp	r3, r1
 800118c:	d30d      	bcc.n	80011aa <__divsi3+0x42>
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	0209      	lsls	r1, r1, #8
 8001192:	ba12      	rev	r2, r2
 8001194:	0c03      	lsrs	r3, r0, #16
 8001196:	428b      	cmp	r3, r1
 8001198:	d302      	bcc.n	80011a0 <__divsi3+0x38>
 800119a:	1212      	asrs	r2, r2, #8
 800119c:	0209      	lsls	r1, r1, #8
 800119e:	d065      	beq.n	800126c <__divsi3+0x104>
 80011a0:	0b03      	lsrs	r3, r0, #12
 80011a2:	428b      	cmp	r3, r1
 80011a4:	d319      	bcc.n	80011da <__divsi3+0x72>
 80011a6:	e000      	b.n	80011aa <__divsi3+0x42>
 80011a8:	0a09      	lsrs	r1, r1, #8
 80011aa:	0bc3      	lsrs	r3, r0, #15
 80011ac:	428b      	cmp	r3, r1
 80011ae:	d301      	bcc.n	80011b4 <__divsi3+0x4c>
 80011b0:	03cb      	lsls	r3, r1, #15
 80011b2:	1ac0      	subs	r0, r0, r3
 80011b4:	4152      	adcs	r2, r2
 80011b6:	0b83      	lsrs	r3, r0, #14
 80011b8:	428b      	cmp	r3, r1
 80011ba:	d301      	bcc.n	80011c0 <__divsi3+0x58>
 80011bc:	038b      	lsls	r3, r1, #14
 80011be:	1ac0      	subs	r0, r0, r3
 80011c0:	4152      	adcs	r2, r2
 80011c2:	0b43      	lsrs	r3, r0, #13
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d301      	bcc.n	80011cc <__divsi3+0x64>
 80011c8:	034b      	lsls	r3, r1, #13
 80011ca:	1ac0      	subs	r0, r0, r3
 80011cc:	4152      	adcs	r2, r2
 80011ce:	0b03      	lsrs	r3, r0, #12
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d301      	bcc.n	80011d8 <__divsi3+0x70>
 80011d4:	030b      	lsls	r3, r1, #12
 80011d6:	1ac0      	subs	r0, r0, r3
 80011d8:	4152      	adcs	r2, r2
 80011da:	0ac3      	lsrs	r3, r0, #11
 80011dc:	428b      	cmp	r3, r1
 80011de:	d301      	bcc.n	80011e4 <__divsi3+0x7c>
 80011e0:	02cb      	lsls	r3, r1, #11
 80011e2:	1ac0      	subs	r0, r0, r3
 80011e4:	4152      	adcs	r2, r2
 80011e6:	0a83      	lsrs	r3, r0, #10
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d301      	bcc.n	80011f0 <__divsi3+0x88>
 80011ec:	028b      	lsls	r3, r1, #10
 80011ee:	1ac0      	subs	r0, r0, r3
 80011f0:	4152      	adcs	r2, r2
 80011f2:	0a43      	lsrs	r3, r0, #9
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d301      	bcc.n	80011fc <__divsi3+0x94>
 80011f8:	024b      	lsls	r3, r1, #9
 80011fa:	1ac0      	subs	r0, r0, r3
 80011fc:	4152      	adcs	r2, r2
 80011fe:	0a03      	lsrs	r3, r0, #8
 8001200:	428b      	cmp	r3, r1
 8001202:	d301      	bcc.n	8001208 <__divsi3+0xa0>
 8001204:	020b      	lsls	r3, r1, #8
 8001206:	1ac0      	subs	r0, r0, r3
 8001208:	4152      	adcs	r2, r2
 800120a:	d2cd      	bcs.n	80011a8 <__divsi3+0x40>
 800120c:	09c3      	lsrs	r3, r0, #7
 800120e:	428b      	cmp	r3, r1
 8001210:	d301      	bcc.n	8001216 <__divsi3+0xae>
 8001212:	01cb      	lsls	r3, r1, #7
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	4152      	adcs	r2, r2
 8001218:	0983      	lsrs	r3, r0, #6
 800121a:	428b      	cmp	r3, r1
 800121c:	d301      	bcc.n	8001222 <__divsi3+0xba>
 800121e:	018b      	lsls	r3, r1, #6
 8001220:	1ac0      	subs	r0, r0, r3
 8001222:	4152      	adcs	r2, r2
 8001224:	0943      	lsrs	r3, r0, #5
 8001226:	428b      	cmp	r3, r1
 8001228:	d301      	bcc.n	800122e <__divsi3+0xc6>
 800122a:	014b      	lsls	r3, r1, #5
 800122c:	1ac0      	subs	r0, r0, r3
 800122e:	4152      	adcs	r2, r2
 8001230:	0903      	lsrs	r3, r0, #4
 8001232:	428b      	cmp	r3, r1
 8001234:	d301      	bcc.n	800123a <__divsi3+0xd2>
 8001236:	010b      	lsls	r3, r1, #4
 8001238:	1ac0      	subs	r0, r0, r3
 800123a:	4152      	adcs	r2, r2
 800123c:	08c3      	lsrs	r3, r0, #3
 800123e:	428b      	cmp	r3, r1
 8001240:	d301      	bcc.n	8001246 <__divsi3+0xde>
 8001242:	00cb      	lsls	r3, r1, #3
 8001244:	1ac0      	subs	r0, r0, r3
 8001246:	4152      	adcs	r2, r2
 8001248:	0883      	lsrs	r3, r0, #2
 800124a:	428b      	cmp	r3, r1
 800124c:	d301      	bcc.n	8001252 <__divsi3+0xea>
 800124e:	008b      	lsls	r3, r1, #2
 8001250:	1ac0      	subs	r0, r0, r3
 8001252:	4152      	adcs	r2, r2
 8001254:	0843      	lsrs	r3, r0, #1
 8001256:	428b      	cmp	r3, r1
 8001258:	d301      	bcc.n	800125e <__divsi3+0xf6>
 800125a:	004b      	lsls	r3, r1, #1
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	4152      	adcs	r2, r2
 8001260:	1a41      	subs	r1, r0, r1
 8001262:	d200      	bcs.n	8001266 <__divsi3+0xfe>
 8001264:	4601      	mov	r1, r0
 8001266:	4152      	adcs	r2, r2
 8001268:	4610      	mov	r0, r2
 800126a:	4770      	bx	lr
 800126c:	e05d      	b.n	800132a <__divsi3+0x1c2>
 800126e:	0fca      	lsrs	r2, r1, #31
 8001270:	d000      	beq.n	8001274 <__divsi3+0x10c>
 8001272:	4249      	negs	r1, r1
 8001274:	1003      	asrs	r3, r0, #32
 8001276:	d300      	bcc.n	800127a <__divsi3+0x112>
 8001278:	4240      	negs	r0, r0
 800127a:	4053      	eors	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	469c      	mov	ip, r3
 8001280:	0903      	lsrs	r3, r0, #4
 8001282:	428b      	cmp	r3, r1
 8001284:	d32d      	bcc.n	80012e2 <__divsi3+0x17a>
 8001286:	0a03      	lsrs	r3, r0, #8
 8001288:	428b      	cmp	r3, r1
 800128a:	d312      	bcc.n	80012b2 <__divsi3+0x14a>
 800128c:	22fc      	movs	r2, #252	; 0xfc
 800128e:	0189      	lsls	r1, r1, #6
 8001290:	ba12      	rev	r2, r2
 8001292:	0a03      	lsrs	r3, r0, #8
 8001294:	428b      	cmp	r3, r1
 8001296:	d30c      	bcc.n	80012b2 <__divsi3+0x14a>
 8001298:	0189      	lsls	r1, r1, #6
 800129a:	1192      	asrs	r2, r2, #6
 800129c:	428b      	cmp	r3, r1
 800129e:	d308      	bcc.n	80012b2 <__divsi3+0x14a>
 80012a0:	0189      	lsls	r1, r1, #6
 80012a2:	1192      	asrs	r2, r2, #6
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d304      	bcc.n	80012b2 <__divsi3+0x14a>
 80012a8:	0189      	lsls	r1, r1, #6
 80012aa:	d03a      	beq.n	8001322 <__divsi3+0x1ba>
 80012ac:	1192      	asrs	r2, r2, #6
 80012ae:	e000      	b.n	80012b2 <__divsi3+0x14a>
 80012b0:	0989      	lsrs	r1, r1, #6
 80012b2:	09c3      	lsrs	r3, r0, #7
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d301      	bcc.n	80012bc <__divsi3+0x154>
 80012b8:	01cb      	lsls	r3, r1, #7
 80012ba:	1ac0      	subs	r0, r0, r3
 80012bc:	4152      	adcs	r2, r2
 80012be:	0983      	lsrs	r3, r0, #6
 80012c0:	428b      	cmp	r3, r1
 80012c2:	d301      	bcc.n	80012c8 <__divsi3+0x160>
 80012c4:	018b      	lsls	r3, r1, #6
 80012c6:	1ac0      	subs	r0, r0, r3
 80012c8:	4152      	adcs	r2, r2
 80012ca:	0943      	lsrs	r3, r0, #5
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d301      	bcc.n	80012d4 <__divsi3+0x16c>
 80012d0:	014b      	lsls	r3, r1, #5
 80012d2:	1ac0      	subs	r0, r0, r3
 80012d4:	4152      	adcs	r2, r2
 80012d6:	0903      	lsrs	r3, r0, #4
 80012d8:	428b      	cmp	r3, r1
 80012da:	d301      	bcc.n	80012e0 <__divsi3+0x178>
 80012dc:	010b      	lsls	r3, r1, #4
 80012de:	1ac0      	subs	r0, r0, r3
 80012e0:	4152      	adcs	r2, r2
 80012e2:	08c3      	lsrs	r3, r0, #3
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d301      	bcc.n	80012ec <__divsi3+0x184>
 80012e8:	00cb      	lsls	r3, r1, #3
 80012ea:	1ac0      	subs	r0, r0, r3
 80012ec:	4152      	adcs	r2, r2
 80012ee:	0883      	lsrs	r3, r0, #2
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d301      	bcc.n	80012f8 <__divsi3+0x190>
 80012f4:	008b      	lsls	r3, r1, #2
 80012f6:	1ac0      	subs	r0, r0, r3
 80012f8:	4152      	adcs	r2, r2
 80012fa:	d2d9      	bcs.n	80012b0 <__divsi3+0x148>
 80012fc:	0843      	lsrs	r3, r0, #1
 80012fe:	428b      	cmp	r3, r1
 8001300:	d301      	bcc.n	8001306 <__divsi3+0x19e>
 8001302:	004b      	lsls	r3, r1, #1
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	4152      	adcs	r2, r2
 8001308:	1a41      	subs	r1, r0, r1
 800130a:	d200      	bcs.n	800130e <__divsi3+0x1a6>
 800130c:	4601      	mov	r1, r0
 800130e:	4663      	mov	r3, ip
 8001310:	4152      	adcs	r2, r2
 8001312:	105b      	asrs	r3, r3, #1
 8001314:	4610      	mov	r0, r2
 8001316:	d301      	bcc.n	800131c <__divsi3+0x1b4>
 8001318:	4240      	negs	r0, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d500      	bpl.n	8001320 <__divsi3+0x1b8>
 800131e:	4249      	negs	r1, r1
 8001320:	4770      	bx	lr
 8001322:	4663      	mov	r3, ip
 8001324:	105b      	asrs	r3, r3, #1
 8001326:	d300      	bcc.n	800132a <__divsi3+0x1c2>
 8001328:	4240      	negs	r0, r0
 800132a:	b501      	push	{r0, lr}
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f805 	bl	800133c <__aeabi_idiv0>
 8001332:	bd02      	pop	{r1, pc}

08001334 <__aeabi_idivmod>:
 8001334:	2900      	cmp	r1, #0
 8001336:	d0f8      	beq.n	800132a <__divsi3+0x1c2>
 8001338:	e716      	b.n	8001168 <__divsi3>
 800133a:	4770      	bx	lr

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	46c0      	nop			; (mov r8, r8)

08001340 <__aeabi_uldivmod>:
 8001340:	2b00      	cmp	r3, #0
 8001342:	d111      	bne.n	8001368 <__aeabi_uldivmod+0x28>
 8001344:	2a00      	cmp	r2, #0
 8001346:	d10f      	bne.n	8001368 <__aeabi_uldivmod+0x28>
 8001348:	2900      	cmp	r1, #0
 800134a:	d100      	bne.n	800134e <__aeabi_uldivmod+0xe>
 800134c:	2800      	cmp	r0, #0
 800134e:	d002      	beq.n	8001356 <__aeabi_uldivmod+0x16>
 8001350:	2100      	movs	r1, #0
 8001352:	43c9      	mvns	r1, r1
 8001354:	0008      	movs	r0, r1
 8001356:	b407      	push	{r0, r1, r2}
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <__aeabi_uldivmod+0x24>)
 800135a:	a102      	add	r1, pc, #8	; (adr r1, 8001364 <__aeabi_uldivmod+0x24>)
 800135c:	1840      	adds	r0, r0, r1
 800135e:	9002      	str	r0, [sp, #8]
 8001360:	bd03      	pop	{r0, r1, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	ffffffd9 	.word	0xffffffd9
 8001368:	b403      	push	{r0, r1}
 800136a:	4668      	mov	r0, sp
 800136c:	b501      	push	{r0, lr}
 800136e:	9802      	ldr	r0, [sp, #8]
 8001370:	f000 f806 	bl	8001380 <__udivmoddi4>
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	469e      	mov	lr, r3
 8001378:	b002      	add	sp, #8
 800137a:	bc0c      	pop	{r2, r3}
 800137c:	4770      	bx	lr
 800137e:	46c0      	nop			; (mov r8, r8)

08001380 <__udivmoddi4>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	4657      	mov	r7, sl
 8001384:	464e      	mov	r6, r9
 8001386:	4645      	mov	r5, r8
 8001388:	46de      	mov	lr, fp
 800138a:	b5e0      	push	{r5, r6, r7, lr}
 800138c:	0004      	movs	r4, r0
 800138e:	000d      	movs	r5, r1
 8001390:	4692      	mov	sl, r2
 8001392:	4699      	mov	r9, r3
 8001394:	b083      	sub	sp, #12
 8001396:	428b      	cmp	r3, r1
 8001398:	d830      	bhi.n	80013fc <__udivmoddi4+0x7c>
 800139a:	d02d      	beq.n	80013f8 <__udivmoddi4+0x78>
 800139c:	4649      	mov	r1, r9
 800139e:	4650      	mov	r0, sl
 80013a0:	f000 f8ba 	bl	8001518 <__clzdi2>
 80013a4:	0029      	movs	r1, r5
 80013a6:	0006      	movs	r6, r0
 80013a8:	0020      	movs	r0, r4
 80013aa:	f000 f8b5 	bl	8001518 <__clzdi2>
 80013ae:	1a33      	subs	r3, r6, r0
 80013b0:	4698      	mov	r8, r3
 80013b2:	3b20      	subs	r3, #32
 80013b4:	469b      	mov	fp, r3
 80013b6:	d433      	bmi.n	8001420 <__udivmoddi4+0xa0>
 80013b8:	465a      	mov	r2, fp
 80013ba:	4653      	mov	r3, sl
 80013bc:	4093      	lsls	r3, r2
 80013be:	4642      	mov	r2, r8
 80013c0:	001f      	movs	r7, r3
 80013c2:	4653      	mov	r3, sl
 80013c4:	4093      	lsls	r3, r2
 80013c6:	001e      	movs	r6, r3
 80013c8:	42af      	cmp	r7, r5
 80013ca:	d83a      	bhi.n	8001442 <__udivmoddi4+0xc2>
 80013cc:	42af      	cmp	r7, r5
 80013ce:	d100      	bne.n	80013d2 <__udivmoddi4+0x52>
 80013d0:	e078      	b.n	80014c4 <__udivmoddi4+0x144>
 80013d2:	465b      	mov	r3, fp
 80013d4:	1ba4      	subs	r4, r4, r6
 80013d6:	41bd      	sbcs	r5, r7
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da00      	bge.n	80013de <__udivmoddi4+0x5e>
 80013dc:	e075      	b.n	80014ca <__udivmoddi4+0x14a>
 80013de:	2200      	movs	r2, #0
 80013e0:	2300      	movs	r3, #0
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2301      	movs	r3, #1
 80013e8:	465a      	mov	r2, fp
 80013ea:	4093      	lsls	r3, r2
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2301      	movs	r3, #1
 80013f0:	4642      	mov	r2, r8
 80013f2:	4093      	lsls	r3, r2
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	e028      	b.n	800144a <__udivmoddi4+0xca>
 80013f8:	4282      	cmp	r2, r0
 80013fa:	d9cf      	bls.n	800139c <__udivmoddi4+0x1c>
 80013fc:	2200      	movs	r2, #0
 80013fe:	2300      	movs	r3, #0
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <__udivmoddi4+0x8e>
 800140a:	601c      	str	r4, [r3, #0]
 800140c:	605d      	str	r5, [r3, #4]
 800140e:	9800      	ldr	r0, [sp, #0]
 8001410:	9901      	ldr	r1, [sp, #4]
 8001412:	b003      	add	sp, #12
 8001414:	bcf0      	pop	{r4, r5, r6, r7}
 8001416:	46bb      	mov	fp, r7
 8001418:	46b2      	mov	sl, r6
 800141a:	46a9      	mov	r9, r5
 800141c:	46a0      	mov	r8, r4
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	4642      	mov	r2, r8
 8001422:	2320      	movs	r3, #32
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	4652      	mov	r2, sl
 8001428:	40da      	lsrs	r2, r3
 800142a:	4641      	mov	r1, r8
 800142c:	0013      	movs	r3, r2
 800142e:	464a      	mov	r2, r9
 8001430:	408a      	lsls	r2, r1
 8001432:	0017      	movs	r7, r2
 8001434:	4642      	mov	r2, r8
 8001436:	431f      	orrs	r7, r3
 8001438:	4653      	mov	r3, sl
 800143a:	4093      	lsls	r3, r2
 800143c:	001e      	movs	r6, r3
 800143e:	42af      	cmp	r7, r5
 8001440:	d9c4      	bls.n	80013cc <__udivmoddi4+0x4c>
 8001442:	2200      	movs	r2, #0
 8001444:	2300      	movs	r3, #0
 8001446:	9200      	str	r2, [sp, #0]
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	4643      	mov	r3, r8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0d9      	beq.n	8001404 <__udivmoddi4+0x84>
 8001450:	07fb      	lsls	r3, r7, #31
 8001452:	0872      	lsrs	r2, r6, #1
 8001454:	431a      	orrs	r2, r3
 8001456:	4646      	mov	r6, r8
 8001458:	087b      	lsrs	r3, r7, #1
 800145a:	e00e      	b.n	800147a <__udivmoddi4+0xfa>
 800145c:	42ab      	cmp	r3, r5
 800145e:	d101      	bne.n	8001464 <__udivmoddi4+0xe4>
 8001460:	42a2      	cmp	r2, r4
 8001462:	d80c      	bhi.n	800147e <__udivmoddi4+0xfe>
 8001464:	1aa4      	subs	r4, r4, r2
 8001466:	419d      	sbcs	r5, r3
 8001468:	2001      	movs	r0, #1
 800146a:	1924      	adds	r4, r4, r4
 800146c:	416d      	adcs	r5, r5
 800146e:	2100      	movs	r1, #0
 8001470:	3e01      	subs	r6, #1
 8001472:	1824      	adds	r4, r4, r0
 8001474:	414d      	adcs	r5, r1
 8001476:	2e00      	cmp	r6, #0
 8001478:	d006      	beq.n	8001488 <__udivmoddi4+0x108>
 800147a:	42ab      	cmp	r3, r5
 800147c:	d9ee      	bls.n	800145c <__udivmoddi4+0xdc>
 800147e:	3e01      	subs	r6, #1
 8001480:	1924      	adds	r4, r4, r4
 8001482:	416d      	adcs	r5, r5
 8001484:	2e00      	cmp	r6, #0
 8001486:	d1f8      	bne.n	800147a <__udivmoddi4+0xfa>
 8001488:	9800      	ldr	r0, [sp, #0]
 800148a:	9901      	ldr	r1, [sp, #4]
 800148c:	465b      	mov	r3, fp
 800148e:	1900      	adds	r0, r0, r4
 8001490:	4169      	adcs	r1, r5
 8001492:	2b00      	cmp	r3, #0
 8001494:	db24      	blt.n	80014e0 <__udivmoddi4+0x160>
 8001496:	002b      	movs	r3, r5
 8001498:	465a      	mov	r2, fp
 800149a:	4644      	mov	r4, r8
 800149c:	40d3      	lsrs	r3, r2
 800149e:	002a      	movs	r2, r5
 80014a0:	40e2      	lsrs	r2, r4
 80014a2:	001c      	movs	r4, r3
 80014a4:	465b      	mov	r3, fp
 80014a6:	0015      	movs	r5, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db2a      	blt.n	8001502 <__udivmoddi4+0x182>
 80014ac:	0026      	movs	r6, r4
 80014ae:	409e      	lsls	r6, r3
 80014b0:	0033      	movs	r3, r6
 80014b2:	0026      	movs	r6, r4
 80014b4:	4647      	mov	r7, r8
 80014b6:	40be      	lsls	r6, r7
 80014b8:	0032      	movs	r2, r6
 80014ba:	1a80      	subs	r0, r0, r2
 80014bc:	4199      	sbcs	r1, r3
 80014be:	9000      	str	r0, [sp, #0]
 80014c0:	9101      	str	r1, [sp, #4]
 80014c2:	e79f      	b.n	8001404 <__udivmoddi4+0x84>
 80014c4:	42a3      	cmp	r3, r4
 80014c6:	d8bc      	bhi.n	8001442 <__udivmoddi4+0xc2>
 80014c8:	e783      	b.n	80013d2 <__udivmoddi4+0x52>
 80014ca:	4642      	mov	r2, r8
 80014cc:	2320      	movs	r3, #32
 80014ce:	2100      	movs	r1, #0
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	2200      	movs	r2, #0
 80014d4:	9100      	str	r1, [sp, #0]
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	40da      	lsrs	r2, r3
 80014dc:	9201      	str	r2, [sp, #4]
 80014de:	e786      	b.n	80013ee <__udivmoddi4+0x6e>
 80014e0:	4642      	mov	r2, r8
 80014e2:	2320      	movs	r3, #32
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	002a      	movs	r2, r5
 80014e8:	4646      	mov	r6, r8
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0023      	movs	r3, r4
 80014ee:	40f3      	lsrs	r3, r6
 80014f0:	4644      	mov	r4, r8
 80014f2:	4313      	orrs	r3, r2
 80014f4:	002a      	movs	r2, r5
 80014f6:	40e2      	lsrs	r2, r4
 80014f8:	001c      	movs	r4, r3
 80014fa:	465b      	mov	r3, fp
 80014fc:	0015      	movs	r5, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dad4      	bge.n	80014ac <__udivmoddi4+0x12c>
 8001502:	4642      	mov	r2, r8
 8001504:	002f      	movs	r7, r5
 8001506:	2320      	movs	r3, #32
 8001508:	0026      	movs	r6, r4
 800150a:	4097      	lsls	r7, r2
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	40de      	lsrs	r6, r3
 8001510:	003b      	movs	r3, r7
 8001512:	4333      	orrs	r3, r6
 8001514:	e7cd      	b.n	80014b2 <__udivmoddi4+0x132>
 8001516:	46c0      	nop			; (mov r8, r8)

08001518 <__clzdi2>:
 8001518:	b510      	push	{r4, lr}
 800151a:	2900      	cmp	r1, #0
 800151c:	d103      	bne.n	8001526 <__clzdi2+0xe>
 800151e:	f000 f807 	bl	8001530 <__clzsi2>
 8001522:	3020      	adds	r0, #32
 8001524:	e002      	b.n	800152c <__clzdi2+0x14>
 8001526:	0008      	movs	r0, r1
 8001528:	f000 f802 	bl	8001530 <__clzsi2>
 800152c:	bd10      	pop	{r4, pc}
 800152e:	46c0      	nop			; (mov r8, r8)

08001530 <__clzsi2>:
 8001530:	211c      	movs	r1, #28
 8001532:	2301      	movs	r3, #1
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	4298      	cmp	r0, r3
 8001538:	d301      	bcc.n	800153e <__clzsi2+0xe>
 800153a:	0c00      	lsrs	r0, r0, #16
 800153c:	3910      	subs	r1, #16
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	4298      	cmp	r0, r3
 8001542:	d301      	bcc.n	8001548 <__clzsi2+0x18>
 8001544:	0a00      	lsrs	r0, r0, #8
 8001546:	3908      	subs	r1, #8
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	4298      	cmp	r0, r3
 800154c:	d301      	bcc.n	8001552 <__clzsi2+0x22>
 800154e:	0900      	lsrs	r0, r0, #4
 8001550:	3904      	subs	r1, #4
 8001552:	a202      	add	r2, pc, #8	; (adr r2, 800155c <__clzsi2+0x2c>)
 8001554:	5c10      	ldrb	r0, [r2, r0]
 8001556:	1840      	adds	r0, r0, r1
 8001558:	4770      	bx	lr
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	02020304 	.word	0x02020304
 8001560:	01010101 	.word	0x01010101
	...

0800156c <go2APP>:
		GPIOA->BRR = (uint32_t)GPIO_PIN_5;
	}
}

void go2APP(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	printf("Bootloader Start \r\n");
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <go2APP+0x4c>)
 8001574:	0018      	movs	r0, r3
 8001576:	f002 fb79 	bl	8003c6c <puts>

	//Check
	if(((*(__IO uint32_t*) FLASH_APP_ADDR) & 0x2FFE0000) == 0x20000000)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <go2APP+0x50>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <go2APP+0x54>)
 8001580:	401a      	ands	r2, r3
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	059b      	lsls	r3, r3, #22
 8001586:	429a      	cmp	r2, r3
 8001588:	d10e      	bne.n	80015a8 <go2APP+0x3c>
	{
		printf("App Start.... \r\n");
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <go2APP+0x58>)
 800158c:	0018      	movs	r0, r3
 800158e:	f002 fb6d 	bl	8003c6c <puts>
		HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	; 0x64
 8001594:	f000 fb10 	bl	8001bb8 <HAL_Delay>
		//Jump to User Application //
		JumpAddress = *(__IO uint32_t*)(FLASH_APP_ADDR + 4);
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <go2APP+0x5c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	607b      	str	r3, [r7, #4]
		Jump_To_Application = (pFunction) JumpAddress;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]

		//Initialize user application's Stack Pointer//
		//__set_MSP(*(__IO uint32_t*)FLASH_APP_ADDR);
		Jump_To_Application();
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4798      	blx	r3
	}
	else
	{
		printf("No APP Found !! \r\n");
	}
}
 80015a6:	e003      	b.n	80015b0 <go2APP+0x44>
		printf("No APP Found !! \r\n");
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <go2APP+0x60>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f002 fb5e 	bl	8003c6c <puts>
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08004634 	.word	0x08004634
 80015bc:	08007800 	.word	0x08007800
 80015c0:	2ffe0000 	.word	0x2ffe0000
 80015c4:	08004648 	.word	0x08004648
 80015c8:	08007804 	.word	0x08007804
 80015cc:	08004658 	.word	0x08004658

080015d0 <_write>:

int _write(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80015e2:	68b9      	ldr	r1, [r7, #8]
 80015e4:	1c4b      	adds	r3, r1, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <_write+0x3c>)
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	2201      	movs	r2, #1
 80015ee:	f001 fc5b 	bl	8002ea8 <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_write+0x12>
	}
	return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	0018      	movs	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	b006      	add	sp, #24
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	2000020c 	.word	0x2000020c

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001614:	f000 fa4a 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f812 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161c:	f000 f8a6 	bl	800176c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001620:	f000 f856 	bl	80016d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("IAP Demo Boot \r\n");
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <main+0x2c>)
 8001626:	0018      	movs	r0, r3
 8001628:	f002 fb20 	bl	8003c6c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  go2APP();
 800162c:	f7ff ff9e 	bl	800156c <go2APP>
	  HAL_Delay(1000);
 8001630:	23fa      	movs	r3, #250	; 0xfa
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	0018      	movs	r0, r3
 8001636:	f000 fabf 	bl	8001bb8 <HAL_Delay>
	  go2APP();
 800163a:	e7f7      	b.n	800162c <main+0x1c>
 800163c:	0800466c 	.word	0x0800466c

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b093      	sub	sp, #76	; 0x4c
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	2410      	movs	r4, #16
 8001648:	193b      	adds	r3, r7, r4
 800164a:	0018      	movs	r0, r3
 800164c:	2338      	movs	r3, #56	; 0x38
 800164e:	001a      	movs	r2, r3
 8001650:	2100      	movs	r1, #0
 8001652:	f002 fa91 	bl	8003b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001656:	003b      	movs	r3, r7
 8001658:	0018      	movs	r0, r3
 800165a:	2310      	movs	r3, #16
 800165c:	001a      	movs	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	f002 fa8a 	bl	8003b78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	0018      	movs	r0, r3
 800166a:	f000 fcff 	bl	800206c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001674:	193b      	adds	r3, r7, r4
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0052      	lsls	r2, r2, #1
 800167a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800167c:	193b      	adds	r3, r7, r4
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001682:	193b      	adds	r3, r7, r4
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001688:	193b      	adds	r3, r7, r4
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	193b      	adds	r3, r7, r4
 8001690:	0018      	movs	r0, r3
 8001692:	f000 fd37 	bl	8002104 <HAL_RCC_OscConfig>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800169a:	f000 f8b7 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	003b      	movs	r3, r7
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016a4:	003b      	movs	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016aa:	003b      	movs	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b0:	003b      	movs	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016b6:	003b      	movs	r3, r7
 80016b8:	2100      	movs	r1, #0
 80016ba:	0018      	movs	r0, r3
 80016bc:	f001 f83c 	bl	8002738 <HAL_RCC_ClockConfig>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80016c4:	f000 f8a2 	bl	800180c <Error_Handler>
  }
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b013      	add	sp, #76	; 0x4c
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <MX_USART2_UART_Init+0x98>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016dc:	22e1      	movs	r2, #225	; 0xe1
 80016de:	0252      	lsls	r2, r2, #9
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_USART2_UART_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_USART2_UART_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_USART2_UART_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_USART2_UART_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_USART2_UART_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_USART2_UART_Init+0x94>)
 800171a:	0018      	movs	r0, r3
 800171c:	f001 fb6e 	bl	8002dfc <HAL_UART_Init>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001724:	f000 f872 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_USART2_UART_Init+0x94>)
 800172a:	2100      	movs	r1, #0
 800172c:	0018      	movs	r0, r3
 800172e:	f002 f919 	bl	8003964 <HAL_UARTEx_SetTxFifoThreshold>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d001      	beq.n	800173a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001736:	f000 f869 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_USART2_UART_Init+0x94>)
 800173c:	2100      	movs	r1, #0
 800173e:	0018      	movs	r0, r3
 8001740:	f002 f950 	bl	80039e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001748:	f000 f860 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <MX_USART2_UART_Init+0x94>)
 800174e:	0018      	movs	r0, r3
 8001750:	f002 f8ce 	bl	80038f0 <HAL_UARTEx_DisableFifoMode>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001758:	f000 f858 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	2000020c 	.word	0x2000020c
 8001768:	40004400 	.word	0x40004400

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	240c      	movs	r4, #12
 8001774:	193b      	adds	r3, r7, r4
 8001776:	0018      	movs	r0, r3
 8001778:	2314      	movs	r3, #20
 800177a:	001a      	movs	r2, r3
 800177c:	2100      	movs	r1, #0
 800177e:	f002 f9fb 	bl	8003b78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_GPIO_Init+0x9c>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_GPIO_Init+0x9c>)
 8001788:	2104      	movs	r1, #4
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_GPIO_Init+0x9c>)
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_GPIO_Init+0x9c>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_GPIO_Init+0x9c>)
 80017a0:	2120      	movs	r1, #32
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_GPIO_Init+0x9c>)
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017aa:	2220      	movs	r2, #32
 80017ac:	4013      	ands	r3, r2
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_GPIO_Init+0x9c>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_GPIO_Init+0x9c>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_GPIO_Init+0x9c>)
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80017ca:	23a0      	movs	r3, #160	; 0xa0
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fc2c 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017d8:	0021      	movs	r1, r4
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	2220      	movs	r2, #32
 80017de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2201      	movs	r2, #1
 80017e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	2202      	movs	r2, #2
 80017f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017f2:	187a      	adds	r2, r7, r1
 80017f4:	23a0      	movs	r3, #160	; 0xa0
 80017f6:	05db      	lsls	r3, r3, #23
 80017f8:	0011      	movs	r1, r2
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fab4 	bl	8001d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b009      	add	sp, #36	; 0x24
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	40021000 	.word	0x40021000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x44>)
 8001820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_MspInit+0x44>)
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x44>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_MspInit+0x44>)
 8001838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_MspInit+0x44>)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	0549      	lsls	r1, r1, #21
 8001840:	430a      	orrs	r2, r1
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_MspInit+0x44>)
 8001846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	055b      	lsls	r3, r3, #21
 800184c:	4013      	ands	r3, r2
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b097      	sub	sp, #92	; 0x5c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	2344      	movs	r3, #68	; 0x44
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	0018      	movs	r0, r3
 800186e:	2314      	movs	r3, #20
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f002 f980 	bl	8003b78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	2410      	movs	r4, #16
 800187a:	193b      	adds	r3, r7, r4
 800187c:	0018      	movs	r0, r3
 800187e:	2334      	movs	r3, #52	; 0x34
 8001880:	001a      	movs	r2, r3
 8001882:	2100      	movs	r1, #0
 8001884:	f002 f978 	bl	8003b78 <memset>
  if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_UART_MspInit+0xb8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d13e      	bne.n	8001910 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001892:	193b      	adds	r3, r7, r4
 8001894:	2202      	movs	r2, #2
 8001896:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001898:	193b      	adds	r3, r7, r4
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	0018      	movs	r0, r3
 80018a2:	f001 f8f3 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018aa:	f7ff ffaf 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_UART_MspInit+0xbc>)
 80018b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_UART_MspInit+0xbc>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0289      	lsls	r1, r1, #10
 80018b8:	430a      	orrs	r2, r1
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_UART_MspInit+0xbc>)
 80018be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_UART_MspInit+0xbc>)
 80018cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_UART_MspInit+0xbc>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_UART_MspInit+0xbc>)
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	2201      	movs	r2, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80018e2:	2144      	movs	r1, #68	; 0x44
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2202      	movs	r2, #2
 80018ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2201      	movs	r2, #1
 80018f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2201      	movs	r2, #1
 8001900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	187a      	adds	r2, r7, r1
 8001904:	23a0      	movs	r3, #160	; 0xa0
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	0011      	movs	r1, r2
 800190a:	0018      	movs	r0, r3
 800190c:	f000 fa2c 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b017      	add	sp, #92	; 0x5c
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	40004400 	.word	0x40004400
 800191c:	40021000 	.word	0x40021000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001944:	f000 f91c 	bl	8001b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001960:	e000      	b.n	8001964 <_read+0x16>
 8001962:	bf00      	nop
 8001964:	0001      	movs	r1, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf0      	blt.n	8001960 <_read+0x12>
  }

  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b006      	add	sp, #24
 8001986:	bd80      	pop	{r7, pc}

08001988 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001990:	2301      	movs	r3, #1
 8001992:	425b      	negs	r3, r3
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	0192      	lsls	r2, r2, #6
 80019ac:	605a      	str	r2, [r3, #4]
  return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_isatty>:

int _isatty(int file)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b002      	add	sp, #8
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b004      	add	sp, #16
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f002 f888 	bl	8003b24 <__errno>
 8001a14:	0003      	movs	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	425b      	negs	r3, r3
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	18d2      	adds	r2, r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <_sbrk+0x64>)
 8001a30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b006      	add	sp, #24
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20009000 	.word	0x20009000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	200002a0 	.word	0x200002a0
 8001a48:	200002b8 	.word	0x200002b8

08001a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a5c:	f7ff fff6 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	; (8001a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <LoopForever+0xe>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	; (8001aa4 <LoopForever+0x16>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a86:	f002 f853 	bl	8003b30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a8a:	f7ff fdc1 	bl	8001610 <main>

08001a8e <LoopForever>:

LoopForever:
  b LoopForever
 8001a8e:	e7fe      	b.n	8001a8e <LoopForever>
  ldr   r0, =_estack
 8001a90:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001a94:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8001a98:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a9c:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 8001aa0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001aa4:	200002b8 	.word	0x200002b8

08001aa8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_COMP_IRQHandler>
	...

08001aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x3c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Init+0x3c>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	0049      	lsls	r1, r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f810 	bl	8001aec <HAL_InitTick>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e001      	b.n	8001adc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fe9e 	bl	8001818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	230f      	movs	r3, #15
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_InitTick+0x88>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02b      	beq.n	8001b5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_InitTick+0x8c>)
 8001b06:	681c      	ldr	r4, [r3, #0]
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_InitTick+0x88>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	23fa      	movs	r3, #250	; 0xfa
 8001b10:	0098      	lsls	r0, r3, #2
 8001b12:	f7ff fa9f 	bl	8001054 <__udivsi3>
 8001b16:	0003      	movs	r3, r0
 8001b18:	0019      	movs	r1, r3
 8001b1a:	0020      	movs	r0, r4
 8001b1c:	f7ff fa9a 	bl	8001054 <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 f913 	bl	8001d4e <HAL_SYSTICK_Config>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d112      	bne.n	8001b52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d80a      	bhi.n	8001b48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	2301      	movs	r3, #1
 8001b36:	425b      	negs	r3, r3
 8001b38:	2200      	movs	r2, #0
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f8f2 	bl	8001d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_InitTick+0x90>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e00d      	b.n	8001b64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e008      	b.n	8001b64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b52:	230f      	movs	r3, #15
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	e003      	b.n	8001b64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b64:	230f      	movs	r3, #15
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b005      	add	sp, #20
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000188 	.word	0x20000188
 8001b78:	20000180 	.word	0x20000180
 8001b7c:	20000184 	.word	0x20000184

08001b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_IncTick+0x1c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	001a      	movs	r2, r3
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	18d2      	adds	r2, r2, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_IncTick+0x20>)
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	20000188 	.word	0x20000188
 8001ba0:	200002a4 	.word	0x200002a4

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <HAL_GetTick+0x10>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	200002a4 	.word	0x200002a4

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	f7ff ffe0 	bl	8001ba4 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	20000188 	.word	0x20000188

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	0002      	movs	r2, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b7f      	cmp	r3, #127	; 0x7f
 8001c14:	d828      	bhi.n	8001c68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c16:	4a2f      	ldr	r2, [pc, #188]	; (8001cd4 <__NVIC_SetPriority+0xd4>)
 8001c18:	1dfb      	adds	r3, r7, #7
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	33c0      	adds	r3, #192	; 0xc0
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	589b      	ldr	r3, [r3, r2]
 8001c26:	1dfa      	adds	r2, r7, #7
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	400a      	ands	r2, r1
 8001c30:	00d2      	lsls	r2, r2, #3
 8001c32:	21ff      	movs	r1, #255	; 0xff
 8001c34:	4091      	lsls	r1, r2
 8001c36:	000a      	movs	r2, r1
 8001c38:	43d2      	mvns	r2, r2
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	019b      	lsls	r3, r3, #6
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	401a      	ands	r2, r3
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	4003      	ands	r3, r0
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c54:	481f      	ldr	r0, [pc, #124]	; (8001cd4 <__NVIC_SetPriority+0xd4>)
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	33c0      	adds	r3, #192	; 0xc0
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c66:	e031      	b.n	8001ccc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <__NVIC_SetPriority+0xd8>)
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0019      	movs	r1, r3
 8001c70:	230f      	movs	r3, #15
 8001c72:	400b      	ands	r3, r1
 8001c74:	3b08      	subs	r3, #8
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3306      	adds	r3, #6
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	3304      	adds	r3, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1dfa      	adds	r2, r7, #7
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	0011      	movs	r1, r2
 8001c88:	2203      	movs	r2, #3
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	00d2      	lsls	r2, r2, #3
 8001c8e:	21ff      	movs	r1, #255	; 0xff
 8001c90:	4091      	lsls	r1, r2
 8001c92:	000a      	movs	r2, r1
 8001c94:	43d2      	mvns	r2, r2
 8001c96:	401a      	ands	r2, r3
 8001c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	2303      	movs	r3, #3
 8001caa:	4003      	ands	r3, r0
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <__NVIC_SetPriority+0xd8>)
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	001c      	movs	r4, r3
 8001cb8:	230f      	movs	r3, #15
 8001cba:	4023      	ands	r3, r4
 8001cbc:	3b08      	subs	r3, #8
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	3306      	adds	r3, #6
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	18c3      	adds	r3, r0, r3
 8001cc8:	3304      	adds	r3, #4
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b003      	add	sp, #12
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	045b      	lsls	r3, r3, #17
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d301      	bcc.n	8001cf4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e010      	b.n	8001d16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <SysTick_Config+0x44>)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	3a01      	subs	r2, #1
 8001cfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	425b      	negs	r3, r3
 8001d00:	2103      	movs	r1, #3
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff ff7c 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x44>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x44>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	210f      	movs	r1, #15
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	1c02      	adds	r2, r0, #0
 8001d34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	0011      	movs	r1, r2
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff ff5d 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff ffbf 	bl	8001cdc <SysTick_Config>
 8001d5e:	0003      	movs	r3, r0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e147      	b.n	8002008 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4091      	lsls	r1, r2
 8001d82:	000a      	movs	r2, r1
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d100      	bne.n	8001d90 <HAL_GPIO_Init+0x28>
 8001d8e:	e138      	b.n	8002002 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d005      	beq.n	8001da8 <HAL_GPIO_Init+0x40>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	409a      	lsls	r2, r3
 8001db6:	0013      	movs	r3, r2
 8001db8:	43da      	mvns	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	0013      	movs	r3, r2
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	43da      	mvns	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	2201      	movs	r2, #1
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	409a      	lsls	r2, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	43da      	mvns	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d123      	bne.n	8001e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	58d3      	ldr	r3, [r2, r3]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2207      	movs	r2, #7
 8001e64:	4013      	ands	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2107      	movs	r1, #7
 8001e7e:	400b      	ands	r3, r1
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	6939      	ldr	r1, [r7, #16]
 8001e98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	029b      	lsls	r3, r3, #10
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d100      	bne.n	8001edc <HAL_GPIO_Init+0x174>
 8001eda:	e092      	b.n	8002002 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001edc:	4a50      	ldr	r2, [pc, #320]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	589b      	ldr	r3, [r3, r2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2203      	movs	r2, #3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	23a0      	movs	r3, #160	; 0xa0
 8001f04:	05db      	lsls	r3, r3, #23
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x1ca>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a45      	ldr	r2, [pc, #276]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x1c6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a44      	ldr	r2, [pc, #272]	; (8002028 <HAL_GPIO_Init+0x2c0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x1c2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a43      	ldr	r2, [pc, #268]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x1be>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x1cc>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x1cc>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x1cc>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x1cc>
 8001f32:	2300      	movs	r3, #0
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	2103      	movs	r1, #3
 8001f38:	400a      	ands	r2, r1
 8001f3a:	00d2      	lsls	r2, r2, #3
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f44:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	035b      	lsls	r3, r3, #13
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	039b      	lsls	r3, r3, #14
 8001f94:	4013      	ands	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001fa8:	2384      	movs	r3, #132	; 0x84
 8001faa:	58d3      	ldr	r3, [r2, r3]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fcc:	4914      	ldr	r1, [pc, #80]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001fce:	2284      	movs	r2, #132	; 0x84
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	58d3      	ldr	r3, [r2, r3]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffa:	4909      	ldr	r1, [pc, #36]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	40da      	lsrs	r2, r3
 8002010:	1e13      	subs	r3, r2, #0
 8002012:	d000      	beq.n	8002016 <HAL_GPIO_Init+0x2ae>
 8002014:	e6b0      	b.n	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b006      	add	sp, #24
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021800 	.word	0x40021800
 8002024:	50000400 	.word	0x50000400
 8002028:	50000800 	.word	0x50000800
 800202c:	50000c00 	.word	0x50000c00

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	0008      	movs	r0, r1
 800203a:	0011      	movs	r1, r2
 800203c:	1cbb      	adds	r3, r7, #2
 800203e:	1c02      	adds	r2, r0, #0
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	1c7b      	adds	r3, r7, #1
 8002044:	1c0a      	adds	r2, r1, #0
 8002046:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002048:	1c7b      	adds	r3, r7, #1
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002050:	1cbb      	adds	r3, r7, #2
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800205a:	1cbb      	adds	r3, r7, #2
 800205c:	881a      	ldrh	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d11f      	bne.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	0013      	movs	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	189b      	adds	r3, r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4912      	ldr	r1, [pc, #72]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800209e:	0018      	movs	r0, r3
 80020a0:	f7fe ffd8 	bl	8001054 <__udivsi3>
 80020a4:	0003      	movs	r3, r0
 80020a6:	3301      	adds	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	e008      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e001      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e009      	b.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	401a      	ands	r2, r3
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d0ed      	beq.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	40007000 	.word	0x40007000
 80020e0:	fffff9ff 	.word	0xfffff9ff
 80020e4:	20000180 	.word	0x20000180
 80020e8:	000f4240 	.word	0x000f4240

080020ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <LL_RCC_GetAPB1Prescaler+0x14>)
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	23e0      	movs	r3, #224	; 0xe0
 80020f6:	01db      	lsls	r3, r3, #7
 80020f8:	4013      	ands	r3, r2
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e2fe      	b.n	8002714 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2201      	movs	r2, #1
 800211c:	4013      	ands	r3, r2
 800211e:	d100      	bne.n	8002122 <HAL_RCC_OscConfig+0x1e>
 8002120:	e07c      	b.n	800221c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4bc3      	ldr	r3, [pc, #780]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2238      	movs	r2, #56	; 0x38
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212c:	4bc0      	ldr	r3, [pc, #768]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2203      	movs	r2, #3
 8002132:	4013      	ands	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b10      	cmp	r3, #16
 800213a:	d102      	bne.n	8002142 <HAL_RCC_OscConfig+0x3e>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d002      	beq.n	8002148 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d10b      	bne.n	8002160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4bb9      	ldr	r3, [pc, #740]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	4013      	ands	r3, r2
 8002152:	d062      	beq.n	800221a <HAL_RCC_OscConfig+0x116>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d15e      	bne.n	800221a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e2d9      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	429a      	cmp	r2, r3
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x78>
 800216c:	4bb0      	ldr	r3, [pc, #704]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4baf      	ldr	r3, [pc, #700]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	0249      	lsls	r1, r1, #9
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e020      	b.n	80021be <HAL_RCC_OscConfig+0xba>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	23a0      	movs	r3, #160	; 0xa0
 8002182:	02db      	lsls	r3, r3, #11
 8002184:	429a      	cmp	r2, r3
 8002186:	d10e      	bne.n	80021a6 <HAL_RCC_OscConfig+0xa2>
 8002188:	4ba9      	ldr	r3, [pc, #676]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4ba8      	ldr	r3, [pc, #672]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800218e:	2180      	movs	r1, #128	; 0x80
 8002190:	02c9      	lsls	r1, r1, #11
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4ba6      	ldr	r3, [pc, #664]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4ba5      	ldr	r3, [pc, #660]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0249      	lsls	r1, r1, #9
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0xba>
 80021a6:	4ba2      	ldr	r3, [pc, #648]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4ba1      	ldr	r3, [pc, #644]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	49a1      	ldr	r1, [pc, #644]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	4b9f      	ldr	r3, [pc, #636]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b9e      	ldr	r3, [pc, #632]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	499f      	ldr	r1, [pc, #636]	; (8002438 <HAL_RCC_OscConfig+0x334>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d014      	beq.n	80021f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fced 	bl	8001ba4 <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fce8 	bl	8001ba4 <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e298      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	4b93      	ldr	r3, [pc, #588]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	029b      	lsls	r3, r3, #10
 80021ea:	4013      	ands	r3, r2
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xcc>
 80021ee:	e015      	b.n	800221c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff fcd8 	bl	8001ba4 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fa:	f7ff fcd3 	bl	8001ba4 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	; 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e283      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220c:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	4013      	ands	r3, r2
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0xf6>
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d100      	bne.n	8002228 <HAL_RCC_OscConfig+0x124>
 8002226:	e099      	b.n	800235c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002228:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2238      	movs	r2, #56	; 0x38
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2203      	movs	r2, #3
 8002238:	4013      	ands	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d102      	bne.n	8002248 <HAL_RCC_OscConfig+0x144>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d002      	beq.n	800224e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d135      	bne.n	80022ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224e:	4b78      	ldr	r3, [pc, #480]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4013      	ands	r3, r2
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x162>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e256      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a74      	ldr	r2, [pc, #464]	; (800243c <HAL_RCC_OscConfig+0x338>)
 800226c:	4013      	ands	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d112      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002282:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x33c>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002296:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	2207      	movs	r2, #7
 800229e:	4013      	ands	r3, r2
 80022a0:	4a68      	ldr	r2, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x340>)
 80022a2:	40da      	lsrs	r2, r3
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x344>)
 80022a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x348>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fc1d 	bl	8001aec <HAL_InitTick>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d051      	beq.n	800235a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e22c      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d030      	beq.n	8002324 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5e      	ldr	r2, [pc, #376]	; (8002440 <HAL_RCC_OscConfig+0x33c>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	4b57      	ldr	r3, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022d6:	4b56      	ldr	r3, [pc, #344]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0049      	lsls	r1, r1, #1
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fc5e 	bl	8001ba4 <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7ff fc59 	bl	8001ba4 <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e209      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4013      	ands	r3, r2
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a4a      	ldr	r2, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x338>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	021a      	lsls	r2, r3, #8
 800231c:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e01b      	b.n	800235c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800232a:	4949      	ldr	r1, [pc, #292]	; (8002450 <HAL_RCC_OscConfig+0x34c>)
 800232c:	400a      	ands	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff fc38 	bl	8001ba4 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fc33 	bl	8001ba4 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1e3      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800234c:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4013      	ands	r3, r2
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x236>
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2208      	movs	r2, #8
 8002362:	4013      	ands	r3, r2
 8002364:	d047      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002366:	4b32      	ldr	r3, [pc, #200]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2238      	movs	r2, #56	; 0x38
 800236c:	4013      	ands	r3, r2
 800236e:	2b18      	cmp	r3, #24
 8002370:	d10a      	bne.n	8002388 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	d03c      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2f2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d138      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e1c5      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d019      	beq.n	80023c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002396:	2101      	movs	r1, #1
 8002398:	430a      	orrs	r2, r1
 800239a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff fc02 	bl	8001ba4 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a6:	f7ff fbfd 	bl	8001ba4 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1ad      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80023ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023bc:	2202      	movs	r2, #2
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f1      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2a2>
 80023c2:	e018      	b.n	80023f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	438a      	bics	r2, r1
 80023ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7ff fbe8 	bl	8001ba4 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023da:	f7ff fbe3 	bl	8001ba4 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e193      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f1      	bne.n	80023da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2204      	movs	r2, #4
 80023fc:	4013      	ands	r3, r2
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_OscConfig+0x2fe>
 8002400:	e0c6      	b.n	8002590 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	231f      	movs	r3, #31
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2238      	movs	r2, #56	; 0x38
 8002410:	4013      	ands	r3, r2
 8002412:	2b20      	cmp	r3, #32
 8002414:	d11e      	bne.n	8002454 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_OscConfig+0x32c>)
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d100      	bne.n	8002422 <HAL_RCC_OscConfig+0x31e>
 8002420:	e0b6      	b.n	8002590 <HAL_RCC_OscConfig+0x48c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d000      	beq.n	800242c <HAL_RCC_OscConfig+0x328>
 800242a:	e0b1      	b.n	8002590 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e171      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
 8002430:	40021000 	.word	0x40021000
 8002434:	fffeffff 	.word	0xfffeffff
 8002438:	fffbffff 	.word	0xfffbffff
 800243c:	ffff80ff 	.word	0xffff80ff
 8002440:	ffffc7ff 	.word	0xffffc7ff
 8002444:	00f42400 	.word	0x00f42400
 8002448:	20000180 	.word	0x20000180
 800244c:	20000184 	.word	0x20000184
 8002450:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002454:	4bb1      	ldr	r3, [pc, #708]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	055b      	lsls	r3, r3, #21
 800245c:	4013      	ands	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_RCC_OscConfig+0x360>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x362>
 8002464:	2300      	movs	r3, #0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4bac      	ldr	r3, [pc, #688]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800246c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246e:	4bab      	ldr	r3, [pc, #684]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0549      	lsls	r1, r1, #21
 8002474:	430a      	orrs	r2, r1
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
 8002478:	4ba8      	ldr	r3, [pc, #672]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800247a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002486:	231f      	movs	r3, #31
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	4ba4      	ldr	r3, [pc, #656]	; (8002720 <HAL_RCC_OscConfig+0x61c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d11a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249a:	4ba1      	ldr	r3, [pc, #644]	; (8002720 <HAL_RCC_OscConfig+0x61c>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4ba0      	ldr	r3, [pc, #640]	; (8002720 <HAL_RCC_OscConfig+0x61c>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0049      	lsls	r1, r1, #1
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024a8:	f7ff fb7c 	bl	8001ba4 <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff fb77 	bl	8001ba4 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e127      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b96      	ldr	r3, [pc, #600]	; (8002720 <HAL_RCC_OscConfig+0x61c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3e2>
 80024d8:	4b90      	ldr	r3, [pc, #576]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80024da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024dc:	4b8f      	ldr	r3, [pc, #572]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024e4:	e01c      	b.n	8002520 <HAL_RCC_OscConfig+0x41c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x404>
 80024ee:	4b8b      	ldr	r3, [pc, #556]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80024f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024f2:	4b8a      	ldr	r3, [pc, #552]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80024f4:	2104      	movs	r1, #4
 80024f6:	430a      	orrs	r2, r1
 80024f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024fa:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80024fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024fe:	4b87      	ldr	r3, [pc, #540]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002500:	2101      	movs	r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	65da      	str	r2, [r3, #92]	; 0x5c
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0x41c>
 8002508:	4b84      	ldr	r3, [pc, #528]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800250a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	65da      	str	r2, [r3, #92]	; 0x5c
 8002514:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002516:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002518:	4b80      	ldr	r3, [pc, #512]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800251a:	2104      	movs	r1, #4
 800251c:	438a      	bics	r2, r1
 800251e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d014      	beq.n	8002552 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff fb3c 	bl	8001ba4 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002530:	e009      	b.n	8002546 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fb37 	bl	8001ba4 <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	4a79      	ldr	r2, [pc, #484]	; (8002724 <HAL_RCC_OscConfig+0x620>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0e6      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b75      	ldr	r3, [pc, #468]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x42e>
 8002550:	e013      	b.n	800257a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7ff fb27 	bl	8001ba4 <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800255a:	e009      	b.n	8002570 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7ff fb22 	bl	8001ba4 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	4a6f      	ldr	r2, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x620>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0d1      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800257a:	231f      	movs	r3, #31
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002588:	4b64      	ldr	r3, [pc, #400]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800258a:	4967      	ldr	r1, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x624>)
 800258c:	400a      	ands	r2, r1
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d100      	bne.n	800259a <HAL_RCC_OscConfig+0x496>
 8002598:	e0bb      	b.n	8002712 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2238      	movs	r2, #56	; 0x38
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d100      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4a4>
 80025a6:	e07b      	b.n	80026a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d156      	bne.n	800265e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b5a      	ldr	r3, [pc, #360]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80025b6:	495d      	ldr	r1, [pc, #372]	; (800272c <HAL_RCC_OscConfig+0x628>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7ff faf2 	bl	8001ba4 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff faed 	bl	8001ba4 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e09d      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	049b      	lsls	r3, r3, #18
 80025e0:	4013      	ands	r3, r2
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e4:	4b4d      	ldr	r3, [pc, #308]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a51      	ldr	r2, [pc, #324]	; (8002730 <HAL_RCC_OscConfig+0x62c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	431a      	orrs	r2, r3
 8002612:	4b42      	ldr	r3, [pc, #264]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b40      	ldr	r3, [pc, #256]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0449      	lsls	r1, r1, #17
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <HAL_RCC_OscConfig+0x618>)
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0549      	lsls	r1, r1, #21
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff fab6 	bl	8001ba4 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fab1 	bl	8001ba4 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e061      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	049b      	lsls	r3, r3, #18
 8002658:	4013      	ands	r3, r2
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x53a>
 800265c:	e059      	b.n	8002712 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002664:	4931      	ldr	r1, [pc, #196]	; (800272c <HAL_RCC_OscConfig+0x628>)
 8002666:	400a      	ands	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7ff fa9b 	bl	8001ba4 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff fa96 	bl	8001ba4 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e046      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	049b      	lsls	r3, r3, #18
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x618>)
 8002698:	4926      	ldr	r1, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x630>)
 800269a:	400a      	ands	r2, r1
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e038      	b.n	8002712 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e033      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x618>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2203      	movs	r2, #3
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d126      	bne.n	800270e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2270      	movs	r2, #112	; 0x70
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d11f      	bne.n	800270e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	23fe      	movs	r3, #254	; 0xfe
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d116      	bne.n	800270e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	23f8      	movs	r3, #248	; 0xf8
 80026e4:	039b      	lsls	r3, r3, #14
 80026e6:	401a      	ands	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d10e      	bne.n	800270e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	23e0      	movs	r3, #224	; 0xe0
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	0f5b      	lsrs	r3, r3, #29
 8002704:	075a      	lsls	r2, r3, #29
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b008      	add	sp, #32
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	00001388 	.word	0x00001388
 8002728:	efffffff 	.word	0xefffffff
 800272c:	feffffff 	.word	0xfeffffff
 8002730:	11c1808c 	.word	0x11c1808c
 8002734:	eefefffc 	.word	0xeefefffc

08002738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0e9      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d91e      	bls.n	8002798 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2207      	movs	r2, #7
 8002760:	4393      	bics	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	4b70      	ldr	r3, [pc, #448]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800276c:	f7ff fa1a 	bl	8001ba4 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002774:	e009      	b.n	800278a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002776:	f7ff fa15 	bl	8001ba4 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_RCC_ClockConfig+0x1f4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0ca      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2207      	movs	r2, #7
 8002790:	4013      	ands	r3, r2
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d1ee      	bne.n	8002776 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d015      	beq.n	80027ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d006      	beq.n	80027ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ac:	4b60      	ldr	r3, [pc, #384]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80027b2:	21e0      	movs	r1, #224	; 0xe0
 80027b4:	01c9      	lsls	r1, r1, #7
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ba:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4a5d      	ldr	r2, [pc, #372]	; (8002934 <HAL_RCC_ClockConfig+0x1fc>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d057      	beq.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	d12b      	bne.n	8002844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e097      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	049b      	lsls	r3, r3, #18
 8002800:	4013      	ands	r3, r2
 8002802:	d11f      	bne.n	8002844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e08b      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002810:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4013      	ands	r3, r2
 800281a:	d113      	bne.n	8002844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e07f      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d106      	bne.n	8002836 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002828:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282c:	2202      	movs	r2, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d108      	bne.n	8002844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e074      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2202      	movs	r2, #2
 800283c:	4013      	ands	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e06d      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2207      	movs	r2, #7
 800284a:	4393      	bics	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7ff f9a4 	bl	8001ba4 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002860:	e009      	b.n	8002876 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002862:	f7ff f99f 	bl	8001ba4 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	4a2f      	ldr	r2, [pc, #188]	; (800292c <HAL_RCC_ClockConfig+0x1f4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e054      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2238      	movs	r2, #56	; 0x38
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	429a      	cmp	r2, r3
 8002886:	d1ec      	bne.n	8002862 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2207      	movs	r2, #7
 800288e:	4013      	ands	r3, r2
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d21e      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2207      	movs	r2, #7
 800289c:	4393      	bics	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a8:	f7ff f97c 	bl	8001ba4 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028b0:	e009      	b.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b2:	f7ff f977 	bl	8001ba4 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_RCC_ClockConfig+0x1f4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e02c      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2207      	movs	r2, #7
 80028cc:	4013      	ands	r3, r2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2204      	movs	r2, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_RCC_ClockConfig+0x200>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028f2:	f000 f829 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80028f6:	0001      	movs	r1, r0
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCC_ClockConfig+0x1f8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	220f      	movs	r2, #15
 8002900:	401a      	ands	r2, r3
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x204>)
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	58d3      	ldr	r3, [r2, r3]
 8002908:	221f      	movs	r2, #31
 800290a:	4013      	ands	r3, r2
 800290c:	000a      	movs	r2, r1
 800290e:	40da      	lsrs	r2, r3
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x208>)
 8002912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_ClockConfig+0x20c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff f8e7 	bl	8001aec <HAL_InitTick>
 800291e:	0003      	movs	r3, r0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40022000 	.word	0x40022000
 800292c:	00001388 	.word	0x00001388
 8002930:	40021000 	.word	0x40021000
 8002934:	fffff0ff 	.word	0xfffff0ff
 8002938:	ffff8fff 	.word	0xffff8fff
 800293c:	0800467c 	.word	0x0800467c
 8002940:	20000180 	.word	0x20000180
 8002944:	20000184 	.word	0x20000184

08002948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294e:	4b3c      	ldr	r3, [pc, #240]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2238      	movs	r2, #56	; 0x38
 8002954:	4013      	ands	r3, r2
 8002956:	d10f      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0adb      	lsrs	r3, r3, #11
 800295e:	2207      	movs	r2, #7
 8002960:	4013      	ands	r3, r2
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	0013      	movs	r3, r2
 8002968:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800296a:	6839      	ldr	r1, [r7, #0]
 800296c:	4835      	ldr	r0, [pc, #212]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 800296e:	f7fe fb71 	bl	8001054 <__udivsi3>
 8002972:	0003      	movs	r3, r0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e05d      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2238      	movs	r2, #56	; 0x38
 800297e:	4013      	ands	r3, r2
 8002980:	2b08      	cmp	r3, #8
 8002982:	d102      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x100>)
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	e054      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2238      	movs	r2, #56	; 0x38
 8002990:	4013      	ands	r3, r2
 8002992:	2b10      	cmp	r3, #16
 8002994:	d138      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2203      	movs	r2, #3
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	3301      	adds	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4824      	ldr	r0, [pc, #144]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x100>)
 80029b8:	f7fe fb4c 	bl	8001054 <__udivsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	0019      	movs	r1, r3
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	227f      	movs	r2, #127	; 0x7f
 80029c8:	4013      	ands	r3, r2
 80029ca:	434b      	muls	r3, r1
 80029cc:	617b      	str	r3, [r7, #20]
        break;
 80029ce:	e00d      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	481c      	ldr	r0, [pc, #112]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029d4:	f7fe fb3e 	bl	8001054 <__udivsi3>
 80029d8:	0003      	movs	r3, r0
 80029da:	0019      	movs	r1, r3
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	227f      	movs	r2, #127	; 0x7f
 80029e4:	4013      	ands	r3, r2
 80029e6:	434b      	muls	r3, r1
 80029e8:	617b      	str	r3, [r7, #20]
        break;
 80029ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0f5b      	lsrs	r3, r3, #29
 80029f2:	2207      	movs	r2, #7
 80029f4:	4013      	ands	r3, r2
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	6978      	ldr	r0, [r7, #20]
 80029fe:	f7fe fb29 	bl	8001054 <__udivsi3>
 8002a02:	0003      	movs	r3, r0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	e015      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2238      	movs	r2, #56	; 0x38
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d103      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2238      	movs	r2, #56	; 0x38
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b18      	cmp	r3, #24
 8002a26:	d103      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a28:	23fa      	movs	r3, #250	; 0xfa
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	e001      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a34:	693b      	ldr	r3, [r7, #16]
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b006      	add	sp, #24
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	40021000 	.word	0x40021000
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b02      	ldr	r3, [pc, #8]	; (8002a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	20000180 	.word	0x20000180

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a64:	f7ff fff2 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a68:	0004      	movs	r4, r0
 8002a6a:	f7ff fb3f 	bl	80020ec <LL_RCC_GetAPB1Prescaler>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	0b1a      	lsrs	r2, r3, #12
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	58d3      	ldr	r3, [r2, r3]
 8002a78:	221f      	movs	r2, #31
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	40dc      	lsrs	r4, r3
 8002a7e:	0023      	movs	r3, r4
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdb0      	pop	{r4, r5, r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	080046bc 	.word	0x080046bc

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a94:	2313      	movs	r3, #19
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	4013      	ands	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ab0:	e0a3      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2011      	movs	r0, #17
 8002ab4:	183b      	adds	r3, r7, r0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aba:	4bc3      	ldr	r3, [pc, #780]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	055b      	lsls	r3, r3, #21
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d110      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4bc0      	ldr	r3, [pc, #768]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aca:	4bbf      	ldr	r3, [pc, #764]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	0549      	lsls	r1, r1, #21
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ad4:	4bbc      	ldr	r3, [pc, #752]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	055b      	lsls	r3, r3, #21
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae8:	4bb8      	ldr	r3, [pc, #736]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4bb7      	ldr	r3, [pc, #732]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	0049      	lsls	r1, r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af6:	f7ff f855 	bl	8001ba4 <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afe:	e00b      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7ff f850 	bl	8001ba4 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d904      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b0e:	2313      	movs	r3, #19
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2203      	movs	r2, #3
 8002b14:	701a      	strb	r2, [r3, #0]
        break;
 8002b16:	e005      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b18:	4bac      	ldr	r3, [pc, #688]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	d0ed      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b24:	2313      	movs	r3, #19
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d154      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b2e:	4ba6      	ldr	r3, [pc, #664]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d014      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b4a:	4b9f      	ldr	r3, [pc, #636]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	4aa0      	ldr	r2, [pc, #640]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b54:	4b9c      	ldr	r3, [pc, #624]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b58:	4b9b      	ldr	r3, [pc, #620]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	0249      	lsls	r1, r1, #9
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b62:	4b99      	ldr	r3, [pc, #612]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b66:	4b98      	ldr	r3, [pc, #608]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b68:	499a      	ldr	r1, [pc, #616]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b6e:	4b96      	ldr	r3, [pc, #600]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d016      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f812 	bl	8001ba4 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7ff f80d 	bl	8001ba4 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	4a91      	ldr	r2, [pc, #580]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d904      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b96:	2313      	movs	r3, #19
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
            break;
 8002b9e:	e004      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba0:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d0ed      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002baa:	2313      	movs	r3, #19
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb4:	4b84      	ldr	r3, [pc, #528]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	4a85      	ldr	r2, [pc, #532]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bc8:	e00c      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bca:	2312      	movs	r3, #18
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2213      	movs	r2, #19
 8002bd0:	18ba      	adds	r2, r7, r2
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	2312      	movs	r3, #18
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2213      	movs	r2, #19
 8002bde:	18ba      	adds	r2, r7, r2
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be4:	2311      	movs	r3, #17
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf2:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf4:	4979      	ldr	r1, [pc, #484]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c04:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c22:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	220c      	movs	r2, #12
 8002c28:	4393      	bics	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	4a66      	ldr	r2, [pc, #408]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	4a5f      	ldr	r2, [pc, #380]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c80:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	01db      	lsls	r3, r3, #7
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d015      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cbe:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	0899      	lsrs	r1, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cdc:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0249      	lsls	r1, r1, #9
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d04:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d06:	430a      	orrs	r2, r1
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	039b      	lsls	r3, r3, #14
 8002d12:	4013      	ands	r3, r2
 8002d14:	d016      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	03db      	lsls	r3, r3, #15
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d106      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0449      	lsls	r1, r1, #17
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	03db      	lsls	r3, r3, #15
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d016      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	045b      	lsls	r3, r3, #17
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0449      	lsls	r1, r1, #17
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	d016      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	01db      	lsls	r3, r3, #7
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	0249      	lsls	r1, r1, #9
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002db8:	2312      	movs	r3, #18
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b006      	add	sp, #24
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	fffffcff 	.word	0xfffffcff
 8002dd4:	fffeffff 	.word	0xfffeffff
 8002dd8:	00001388 	.word	0x00001388
 8002ddc:	efffffff 	.word	0xefffffff
 8002de0:	fffff3ff 	.word	0xfffff3ff
 8002de4:	fff3ffff 	.word	0xfff3ffff
 8002de8:	ffcfffff 	.word	0xffcfffff
 8002dec:	ffffcfff 	.word	0xffffcfff
 8002df0:	ffbfffff 	.word	0xffbfffff
 8002df4:	feffffff 	.word	0xfeffffff
 8002df8:	ffff3fff 	.word	0xffff3fff

08002dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e046      	b.n	8002e9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2288      	movs	r2, #136	; 0x88
 8002e12:	589b      	ldr	r3, [r3, r2]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2284      	movs	r2, #132	; 0x84
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7fe fd1c 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2288      	movs	r2, #136	; 0x88
 8002e2c:	2124      	movs	r1, #36	; 0x24
 8002e2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f8cc 	bl	8002fe0 <UART_SetConfig>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e024      	b.n	8002e9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fb7d 	bl	800355c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	490d      	ldr	r1, [pc, #52]	; (8002ea4 <HAL_UART_Init+0xa8>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	212a      	movs	r1, #42	; 0x2a
 8002e7e:	438a      	bics	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fc15 	bl	80036c4 <UART_CheckIdleState>
 8002e9a:	0003      	movs	r3, r0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	ffffb7ff 	.word	0xffffb7ff

08002ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	1dbb      	adds	r3, r7, #6
 8002eb6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2288      	movs	r2, #136	; 0x88
 8002ebc:	589b      	ldr	r3, [r3, r2]
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d000      	beq.n	8002ec4 <HAL_UART_Transmit+0x1c>
 8002ec2:	e088      	b.n	8002fd6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_UART_Transmit+0x2a>
 8002eca:	1dbb      	adds	r3, r7, #6
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e080      	b.n	8002fd8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	015b      	lsls	r3, r3, #5
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d109      	bne.n	8002ef6 <HAL_UART_Transmit+0x4e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d001      	beq.n	8002ef6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e070      	b.n	8002fd8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2290      	movs	r2, #144	; 0x90
 8002efa:	2100      	movs	r1, #0
 8002efc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2288      	movs	r2, #136	; 0x88
 8002f02:	2121      	movs	r1, #33	; 0x21
 8002f04:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f06:	f7fe fe4d 	bl	8001ba4 <HAL_GetTick>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1dba      	adds	r2, r7, #6
 8002f12:	2154      	movs	r1, #84	; 0x54
 8002f14:	8812      	ldrh	r2, [r2, #0]
 8002f16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1dba      	adds	r2, r7, #6
 8002f1c:	2156      	movs	r1, #86	; 0x56
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	015b      	lsls	r3, r3, #5
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d108      	bne.n	8002f40 <HAL_UART_Transmit+0x98>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	e003      	b.n	8002f48 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f48:	e02c      	b.n	8002fa4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	0013      	movs	r3, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	f000 fc02 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e039      	b.n	8002fd8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	001a      	movs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	05d2      	lsls	r2, r2, #23
 8002f76:	0dd2      	lsrs	r2, r2, #23
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2256      	movs	r2, #86	; 0x56
 8002f96:	5a9b      	ldrh	r3, [r3, r2]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b299      	uxth	r1, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2256      	movs	r2, #86	; 0x56
 8002fa2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2256      	movs	r2, #86	; 0x56
 8002fa8:	5a9b      	ldrh	r3, [r3, r2]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1cc      	bne.n	8002f4a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	0013      	movs	r3, r2
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	f000 fbcf 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e006      	b.n	8002fd8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2288      	movs	r2, #136	; 0x88
 8002fce:	2120      	movs	r1, #32
 8002fd0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
  }
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b008      	add	sp, #32
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b090      	sub	sp, #64	; 0x40
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe8:	231a      	movs	r3, #26
 8002fea:	2220      	movs	r2, #32
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	19db      	adds	r3, r3, r7
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	431a      	orrs	r2, r3
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4313      	orrs	r3, r2
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4aaf      	ldr	r2, [pc, #700]	; (80032d0 <UART_SetConfig+0x2f0>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301e:	430b      	orrs	r3, r1
 8003020:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4aaa      	ldr	r2, [pc, #680]	; (80032d4 <UART_SetConfig+0x2f4>)
 800302a:	4013      	ands	r3, r2
 800302c:	0018      	movs	r0, r3
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	68d9      	ldr	r1, [r3, #12]
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	0003      	movs	r3, r0
 8003038:	430b      	orrs	r3, r1
 800303a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4aa4      	ldr	r2, [pc, #656]	; (80032d8 <UART_SetConfig+0x2f8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003052:	4313      	orrs	r3, r2
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a9f      	ldr	r2, [pc, #636]	; (80032dc <UART_SetConfig+0x2fc>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	430b      	orrs	r3, r1
 800306a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	220f      	movs	r2, #15
 8003074:	4393      	bics	r3, r2
 8003076:	0018      	movs	r0, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	0003      	movs	r3, r0
 8003082:	430b      	orrs	r3, r1
 8003084:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a95      	ldr	r2, [pc, #596]	; (80032e0 <UART_SetConfig+0x300>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d131      	bne.n	80030f4 <UART_SetConfig+0x114>
 8003090:	4b94      	ldr	r3, [pc, #592]	; (80032e4 <UART_SetConfig+0x304>)
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	2203      	movs	r2, #3
 8003096:	4013      	ands	r3, r2
 8003098:	2b03      	cmp	r3, #3
 800309a:	d01d      	beq.n	80030d8 <UART_SetConfig+0xf8>
 800309c:	d823      	bhi.n	80030e6 <UART_SetConfig+0x106>
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d00c      	beq.n	80030bc <UART_SetConfig+0xdc>
 80030a2:	d820      	bhi.n	80030e6 <UART_SetConfig+0x106>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <UART_SetConfig+0xce>
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d00e      	beq.n	80030ca <UART_SetConfig+0xea>
 80030ac:	e01b      	b.n	80030e6 <UART_SetConfig+0x106>
 80030ae:	231b      	movs	r3, #27
 80030b0:	2220      	movs	r2, #32
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e0b4      	b.n	8003226 <UART_SetConfig+0x246>
 80030bc:	231b      	movs	r3, #27
 80030be:	2220      	movs	r2, #32
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	19db      	adds	r3, r3, r7
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e0ad      	b.n	8003226 <UART_SetConfig+0x246>
 80030ca:	231b      	movs	r3, #27
 80030cc:	2220      	movs	r2, #32
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e0a6      	b.n	8003226 <UART_SetConfig+0x246>
 80030d8:	231b      	movs	r3, #27
 80030da:	2220      	movs	r2, #32
 80030dc:	189b      	adds	r3, r3, r2
 80030de:	19db      	adds	r3, r3, r7
 80030e0:	2208      	movs	r2, #8
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e09f      	b.n	8003226 <UART_SetConfig+0x246>
 80030e6:	231b      	movs	r3, #27
 80030e8:	2220      	movs	r2, #32
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	19db      	adds	r3, r3, r7
 80030ee:	2210      	movs	r2, #16
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e098      	b.n	8003226 <UART_SetConfig+0x246>
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7b      	ldr	r2, [pc, #492]	; (80032e8 <UART_SetConfig+0x308>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d131      	bne.n	8003162 <UART_SetConfig+0x182>
 80030fe:	4b79      	ldr	r3, [pc, #484]	; (80032e4 <UART_SetConfig+0x304>)
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	220c      	movs	r2, #12
 8003104:	4013      	ands	r3, r2
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d01d      	beq.n	8003146 <UART_SetConfig+0x166>
 800310a:	d823      	bhi.n	8003154 <UART_SetConfig+0x174>
 800310c:	2b08      	cmp	r3, #8
 800310e:	d00c      	beq.n	800312a <UART_SetConfig+0x14a>
 8003110:	d820      	bhi.n	8003154 <UART_SetConfig+0x174>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <UART_SetConfig+0x13c>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d00e      	beq.n	8003138 <UART_SetConfig+0x158>
 800311a:	e01b      	b.n	8003154 <UART_SetConfig+0x174>
 800311c:	231b      	movs	r3, #27
 800311e:	2220      	movs	r2, #32
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e07d      	b.n	8003226 <UART_SetConfig+0x246>
 800312a:	231b      	movs	r3, #27
 800312c:	2220      	movs	r2, #32
 800312e:	189b      	adds	r3, r3, r2
 8003130:	19db      	adds	r3, r3, r7
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e076      	b.n	8003226 <UART_SetConfig+0x246>
 8003138:	231b      	movs	r3, #27
 800313a:	2220      	movs	r2, #32
 800313c:	189b      	adds	r3, r3, r2
 800313e:	19db      	adds	r3, r3, r7
 8003140:	2204      	movs	r2, #4
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e06f      	b.n	8003226 <UART_SetConfig+0x246>
 8003146:	231b      	movs	r3, #27
 8003148:	2220      	movs	r2, #32
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2208      	movs	r2, #8
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e068      	b.n	8003226 <UART_SetConfig+0x246>
 8003154:	231b      	movs	r3, #27
 8003156:	2220      	movs	r2, #32
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2210      	movs	r2, #16
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e061      	b.n	8003226 <UART_SetConfig+0x246>
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <UART_SetConfig+0x30c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d106      	bne.n	800317a <UART_SetConfig+0x19a>
 800316c:	231b      	movs	r3, #27
 800316e:	2220      	movs	r2, #32
 8003170:	189b      	adds	r3, r3, r2
 8003172:	19db      	adds	r3, r3, r7
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e055      	b.n	8003226 <UART_SetConfig+0x246>
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <UART_SetConfig+0x310>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d106      	bne.n	8003192 <UART_SetConfig+0x1b2>
 8003184:	231b      	movs	r3, #27
 8003186:	2220      	movs	r2, #32
 8003188:	189b      	adds	r3, r3, r2
 800318a:	19db      	adds	r3, r3, r7
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e049      	b.n	8003226 <UART_SetConfig+0x246>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a50      	ldr	r2, [pc, #320]	; (80032d8 <UART_SetConfig+0x2f8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d13e      	bne.n	800321a <UART_SetConfig+0x23a>
 800319c:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <UART_SetConfig+0x304>)
 800319e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031a0:	23c0      	movs	r3, #192	; 0xc0
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	4013      	ands	r3, r2
 80031a6:	22c0      	movs	r2, #192	; 0xc0
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <UART_SetConfig+0x21e>
 80031ae:	22c0      	movs	r2, #192	; 0xc0
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d82a      	bhi.n	800320c <UART_SetConfig+0x22c>
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d011      	beq.n	80031e2 <UART_SetConfig+0x202>
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d822      	bhi.n	800320c <UART_SetConfig+0x22c>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <UART_SetConfig+0x1f4>
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	00d2      	lsls	r2, r2, #3
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <UART_SetConfig+0x210>
 80031d2:	e01b      	b.n	800320c <UART_SetConfig+0x22c>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e021      	b.n	8003226 <UART_SetConfig+0x246>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e01a      	b.n	8003226 <UART_SetConfig+0x246>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2220      	movs	r2, #32
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2204      	movs	r2, #4
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e013      	b.n	8003226 <UART_SetConfig+0x246>
 80031fe:	231b      	movs	r3, #27
 8003200:	2220      	movs	r2, #32
 8003202:	189b      	adds	r3, r3, r2
 8003204:	19db      	adds	r3, r3, r7
 8003206:	2208      	movs	r2, #8
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e00c      	b.n	8003226 <UART_SetConfig+0x246>
 800320c:	231b      	movs	r3, #27
 800320e:	2220      	movs	r2, #32
 8003210:	189b      	adds	r3, r3, r2
 8003212:	19db      	adds	r3, r3, r7
 8003214:	2210      	movs	r2, #16
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e005      	b.n	8003226 <UART_SetConfig+0x246>
 800321a:	231b      	movs	r3, #27
 800321c:	2220      	movs	r2, #32
 800321e:	189b      	adds	r3, r3, r2
 8003220:	19db      	adds	r3, r3, r7
 8003222:	2210      	movs	r2, #16
 8003224:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <UART_SetConfig+0x2f8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d000      	beq.n	8003232 <UART_SetConfig+0x252>
 8003230:	e0a9      	b.n	8003386 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003232:	231b      	movs	r3, #27
 8003234:	2220      	movs	r2, #32
 8003236:	189b      	adds	r3, r3, r2
 8003238:	19db      	adds	r3, r3, r7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d015      	beq.n	800326c <UART_SetConfig+0x28c>
 8003240:	dc18      	bgt.n	8003274 <UART_SetConfig+0x294>
 8003242:	2b04      	cmp	r3, #4
 8003244:	d00d      	beq.n	8003262 <UART_SetConfig+0x282>
 8003246:	dc15      	bgt.n	8003274 <UART_SetConfig+0x294>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <UART_SetConfig+0x272>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d005      	beq.n	800325c <UART_SetConfig+0x27c>
 8003250:	e010      	b.n	8003274 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003252:	f7ff fc05 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8003256:	0003      	movs	r3, r0
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800325a:	e014      	b.n	8003286 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <UART_SetConfig+0x314>)
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003260:	e011      	b.n	8003286 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003262:	f7ff fb71 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8003266:	0003      	movs	r3, r0
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800326a:	e00c      	b.n	8003286 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003272:	e008      	b.n	8003286 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003278:	231a      	movs	r3, #26
 800327a:	2220      	movs	r2, #32
 800327c:	189b      	adds	r3, r3, r2
 800327e:	19db      	adds	r3, r3, r7
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
        break;
 8003284:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	2b00      	cmp	r3, #0
 800328a:	d100      	bne.n	800328e <UART_SetConfig+0x2ae>
 800328c:	e14b      	b.n	8003526 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <UART_SetConfig+0x318>)
 8003294:	0052      	lsls	r2, r2, #1
 8003296:	5ad3      	ldrh	r3, [r2, r3]
 8003298:	0019      	movs	r1, r3
 800329a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800329c:	f7fd feda 	bl	8001054 <__udivsi3>
 80032a0:	0003      	movs	r3, r0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	0013      	movs	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d305      	bcc.n	80032c0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032bc:	429a      	cmp	r2, r3
 80032be:	d91d      	bls.n	80032fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80032c0:	231a      	movs	r3, #26
 80032c2:	2220      	movs	r2, #32
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e12b      	b.n	8003526 <UART_SetConfig+0x546>
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	cfff69f3 	.word	0xcfff69f3
 80032d4:	ffffcfff 	.word	0xffffcfff
 80032d8:	40008000 	.word	0x40008000
 80032dc:	11fff4ff 	.word	0x11fff4ff
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40004400 	.word	0x40004400
 80032ec:	40004800 	.word	0x40004800
 80032f0:	40004c00 	.word	0x40004c00
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	080046dc 	.word	0x080046dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003308:	4b92      	ldr	r3, [pc, #584]	; (8003554 <UART_SetConfig+0x574>)
 800330a:	0052      	lsls	r2, r2, #1
 800330c:	5ad3      	ldrh	r3, [r2, r3]
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	69b8      	ldr	r0, [r7, #24]
 800331a:	69f9      	ldr	r1, [r7, #28]
 800331c:	f7fe f810 	bl	8001340 <__aeabi_uldivmod>
 8003320:	0002      	movs	r2, r0
 8003322:	000b      	movs	r3, r1
 8003324:	0e11      	lsrs	r1, r2, #24
 8003326:	021d      	lsls	r5, r3, #8
 8003328:	430d      	orrs	r5, r1
 800332a:	0214      	lsls	r4, r2, #8
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	1900      	adds	r0, r0, r4
 800333e:	4169      	adcs	r1, r5
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f7fd fff7 	bl	8001340 <__aeabi_uldivmod>
 8003352:	0002      	movs	r2, r0
 8003354:	000b      	movs	r3, r1
 8003356:	0013      	movs	r3, r2
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800335a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335c:	23c0      	movs	r3, #192	; 0xc0
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d309      	bcc.n	8003378 <UART_SetConfig+0x398>
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	035b      	lsls	r3, r3, #13
 800336a:	429a      	cmp	r2, r3
 800336c:	d204      	bcs.n	8003378 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	e0d6      	b.n	8003526 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003378:	231a      	movs	r3, #26
 800337a:	2220      	movs	r2, #32
 800337c:	189b      	adds	r3, r3, r2
 800337e:	19db      	adds	r3, r3, r7
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e0cf      	b.n	8003526 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	429a      	cmp	r2, r3
 8003390:	d000      	beq.n	8003394 <UART_SetConfig+0x3b4>
 8003392:	e070      	b.n	8003476 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003394:	231b      	movs	r3, #27
 8003396:	2220      	movs	r2, #32
 8003398:	189b      	adds	r3, r3, r2
 800339a:	19db      	adds	r3, r3, r7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d015      	beq.n	80033ce <UART_SetConfig+0x3ee>
 80033a2:	dc18      	bgt.n	80033d6 <UART_SetConfig+0x3f6>
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d00d      	beq.n	80033c4 <UART_SetConfig+0x3e4>
 80033a8:	dc15      	bgt.n	80033d6 <UART_SetConfig+0x3f6>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <UART_SetConfig+0x3d4>
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d005      	beq.n	80033be <UART_SetConfig+0x3de>
 80033b2:	e010      	b.n	80033d6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7ff fb54 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 80033b8:	0003      	movs	r3, r0
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033bc:	e014      	b.n	80033e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033be:	4b66      	ldr	r3, [pc, #408]	; (8003558 <UART_SetConfig+0x578>)
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033c2:	e011      	b.n	80033e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c4:	f7ff fac0 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80033c8:	0003      	movs	r3, r0
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033cc:	e00c      	b.n	80033e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033d4:	e008      	b.n	80033e8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033da:	231a      	movs	r3, #26
 80033dc:	2220      	movs	r2, #32
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	19db      	adds	r3, r3, r7
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
        break;
 80033e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d100      	bne.n	80033f0 <UART_SetConfig+0x410>
 80033ee:	e09a      	b.n	8003526 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f4:	4b57      	ldr	r3, [pc, #348]	; (8003554 <UART_SetConfig+0x574>)
 80033f6:	0052      	lsls	r2, r2, #1
 80033f8:	5ad3      	ldrh	r3, [r2, r3]
 80033fa:	0019      	movs	r1, r3
 80033fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033fe:	f7fd fe29 	bl	8001054 <__udivsi3>
 8003402:	0003      	movs	r3, r0
 8003404:	005a      	lsls	r2, r3, #1
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	18d2      	adds	r2, r2, r3
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f7fd fe1d 	bl	8001054 <__udivsi3>
 800341a:	0003      	movs	r3, r0
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d921      	bls.n	8003468 <UART_SetConfig+0x488>
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	025b      	lsls	r3, r3, #9
 800342a:	429a      	cmp	r2, r3
 800342c:	d21c      	bcs.n	8003468 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	b29a      	uxth	r2, r3
 8003432:	200e      	movs	r0, #14
 8003434:	2420      	movs	r4, #32
 8003436:	1903      	adds	r3, r0, r4
 8003438:	19db      	adds	r3, r3, r7
 800343a:	210f      	movs	r1, #15
 800343c:	438a      	bics	r2, r1
 800343e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	2207      	movs	r2, #7
 8003448:	4013      	ands	r3, r2
 800344a:	b299      	uxth	r1, r3
 800344c:	1903      	adds	r3, r0, r4
 800344e:	19db      	adds	r3, r3, r7
 8003450:	1902      	adds	r2, r0, r4
 8003452:	19d2      	adds	r2, r2, r7
 8003454:	8812      	ldrh	r2, [r2, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1902      	adds	r2, r0, r4
 8003460:	19d2      	adds	r2, r2, r7
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	e05e      	b.n	8003526 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003468:	231a      	movs	r3, #26
 800346a:	2220      	movs	r2, #32
 800346c:	189b      	adds	r3, r3, r2
 800346e:	19db      	adds	r3, r3, r7
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e057      	b.n	8003526 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003476:	231b      	movs	r3, #27
 8003478:	2220      	movs	r2, #32
 800347a:	189b      	adds	r3, r3, r2
 800347c:	19db      	adds	r3, r3, r7
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d015      	beq.n	80034b0 <UART_SetConfig+0x4d0>
 8003484:	dc18      	bgt.n	80034b8 <UART_SetConfig+0x4d8>
 8003486:	2b04      	cmp	r3, #4
 8003488:	d00d      	beq.n	80034a6 <UART_SetConfig+0x4c6>
 800348a:	dc15      	bgt.n	80034b8 <UART_SetConfig+0x4d8>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <UART_SetConfig+0x4b6>
 8003490:	2b02      	cmp	r3, #2
 8003492:	d005      	beq.n	80034a0 <UART_SetConfig+0x4c0>
 8003494:	e010      	b.n	80034b8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003496:	f7ff fae3 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 800349a:	0003      	movs	r3, r0
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800349e:	e014      	b.n	80034ca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <UART_SetConfig+0x578>)
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034a4:	e011      	b.n	80034ca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a6:	f7ff fa4f 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80034aa:	0003      	movs	r3, r0
 80034ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ae:	e00c      	b.n	80034ca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034b6:	e008      	b.n	80034ca <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034bc:	231a      	movs	r3, #26
 80034be:	2220      	movs	r2, #32
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	19db      	adds	r3, r3, r7
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
        break;
 80034c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02a      	beq.n	8003526 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <UART_SetConfig+0x574>)
 80034d6:	0052      	lsls	r2, r2, #1
 80034d8:	5ad3      	ldrh	r3, [r2, r3]
 80034da:	0019      	movs	r1, r3
 80034dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034de:	f7fd fdb9 	bl	8001054 <__udivsi3>
 80034e2:	0003      	movs	r3, r0
 80034e4:	001a      	movs	r2, r3
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	18d2      	adds	r2, r2, r3
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0019      	movs	r1, r3
 80034f4:	0010      	movs	r0, r2
 80034f6:	f7fd fdad 	bl	8001054 <__udivsi3>
 80034fa:	0003      	movs	r3, r0
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2b0f      	cmp	r3, #15
 8003502:	d90a      	bls.n	800351a <UART_SetConfig+0x53a>
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	025b      	lsls	r3, r3, #9
 800350a:	429a      	cmp	r2, r3
 800350c:	d205      	bcs.n	800351a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	b29a      	uxth	r2, r3
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	e005      	b.n	8003526 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800351a:	231a      	movs	r3, #26
 800351c:	2220      	movs	r2, #32
 800351e:	189b      	adds	r3, r3, r2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	226a      	movs	r2, #106	; 0x6a
 800352a:	2101      	movs	r1, #1
 800352c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	2268      	movs	r2, #104	; 0x68
 8003532:	2101      	movs	r1, #1
 8003534:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	2200      	movs	r2, #0
 800353a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	2200      	movs	r2, #0
 8003540:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003542:	231a      	movs	r3, #26
 8003544:	2220      	movs	r2, #32
 8003546:	189b      	adds	r3, r3, r2
 8003548:	19db      	adds	r3, r3, r7
 800354a:	781b      	ldrb	r3, [r3, #0]
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b010      	add	sp, #64	; 0x40
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	080046dc 	.word	0x080046dc
 8003558:	00f42400 	.word	0x00f42400

0800355c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	2201      	movs	r2, #1
 800356a:	4013      	ands	r3, r2
 800356c:	d00b      	beq.n	8003586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a4a      	ldr	r2, [pc, #296]	; (80036a0 <UART_AdvFeatureConfig+0x144>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	2202      	movs	r2, #2
 800358c:	4013      	ands	r3, r2
 800358e:	d00b      	beq.n	80035a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <UART_AdvFeatureConfig+0x148>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	2204      	movs	r2, #4
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00b      	beq.n	80035ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <UART_AdvFeatureConfig+0x14c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	2208      	movs	r2, #8
 80035d0:	4013      	ands	r3, r2
 80035d2:	d00b      	beq.n	80035ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <UART_AdvFeatureConfig+0x150>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	2210      	movs	r2, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	d00b      	beq.n	800360e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <UART_AdvFeatureConfig+0x154>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	2220      	movs	r2, #32
 8003614:	4013      	ands	r3, r2
 8003616:	d00b      	beq.n	8003630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <UART_AdvFeatureConfig+0x158>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2240      	movs	r2, #64	; 0x40
 8003636:	4013      	ands	r3, r2
 8003638:	d01d      	beq.n	8003676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <UART_AdvFeatureConfig+0x15c>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	035b      	lsls	r3, r3, #13
 800365a:	429a      	cmp	r2, r3
 800365c:	d10b      	bne.n	8003676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <UART_AdvFeatureConfig+0x160>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	4013      	ands	r3, r2
 800367e:	d00b      	beq.n	8003698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <UART_AdvFeatureConfig+0x164>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	fffdffff 	.word	0xfffdffff
 80036a4:	fffeffff 	.word	0xfffeffff
 80036a8:	fffbffff 	.word	0xfffbffff
 80036ac:	ffff7fff 	.word	0xffff7fff
 80036b0:	ffffefff 	.word	0xffffefff
 80036b4:	ffffdfff 	.word	0xffffdfff
 80036b8:	ffefffff 	.word	0xffefffff
 80036bc:	ff9fffff 	.word	0xff9fffff
 80036c0:	fff7ffff 	.word	0xfff7ffff

080036c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2290      	movs	r2, #144	; 0x90
 80036d0:	2100      	movs	r1, #0
 80036d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d4:	f7fe fa66 	bl	8001ba4 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2208      	movs	r2, #8
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d10c      	bne.n	8003704 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	0391      	lsls	r1, r2, #14
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <UART_CheckIdleState+0x98>)
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f000 f832 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d001      	beq.n	8003704 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e026      	b.n	8003752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2204      	movs	r2, #4
 800370c:	4013      	ands	r3, r2
 800370e:	2b04      	cmp	r3, #4
 8003710:	d10c      	bne.n	800372c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	03d1      	lsls	r1, r2, #15
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <UART_CheckIdleState+0x98>)
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	f000 f81e 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d001      	beq.n	800372c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e012      	b.n	8003752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2288      	movs	r2, #136	; 0x88
 8003730:	2120      	movs	r1, #32
 8003732:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	228c      	movs	r2, #140	; 0x8c
 8003738:	2120      	movs	r1, #32
 800373a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2284      	movs	r2, #132	; 0x84
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b004      	add	sp, #16
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	01ffffff 	.word	0x01ffffff

08003760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b094      	sub	sp, #80	; 0x50
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003770:	e0a7      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003774:	3301      	adds	r3, #1
 8003776:	d100      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003778:	e0a3      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fa13 	bl	8001ba4 <HAL_GetTick>
 800377e:	0002      	movs	r2, r0
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <UART_WaitOnFlagUntilTimeout+0x30>
 800378a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13f      	bne.n	8003810 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003790:	f3ef 8310 	mrs	r3, PRIMASK
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
 800379a:	2301      	movs	r3, #1
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	494e      	ldr	r1, [pc, #312]	; (80038ec <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
 80037cc:	2301      	movs	r3, #1
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2288      	movs	r2, #136	; 0x88
 80037f8:	2120      	movs	r1, #32
 80037fa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	228c      	movs	r2, #140	; 0x8c
 8003800:	2120      	movs	r1, #32
 8003802:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2284      	movs	r2, #132	; 0x84
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e069      	b.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2204      	movs	r2, #4
 8003818:	4013      	ands	r3, r2
 800381a:	d052      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	401a      	ands	r2, r3
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	429a      	cmp	r2, r3
 800382e:	d148      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383a:	f3ef 8310 	mrs	r3, PRIMASK
 800383e:	613b      	str	r3, [r7, #16]
  return(result);
 8003840:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4924      	ldr	r1, [pc, #144]	; (80038ec <UART_WaitOnFlagUntilTimeout+0x18c>)
 800385c:	400a      	ands	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003862:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	61fb      	str	r3, [r7, #28]
  return(result);
 8003872:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
 8003876:	2301      	movs	r3, #1
 8003878:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	438a      	bics	r2, r1
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2288      	movs	r2, #136	; 0x88
 80038a2:	2120      	movs	r1, #32
 80038a4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	228c      	movs	r2, #140	; 0x8c
 80038aa:	2120      	movs	r1, #32
 80038ac:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2290      	movs	r2, #144	; 0x90
 80038b2:	2120      	movs	r1, #32
 80038b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2284      	movs	r2, #132	; 0x84
 80038ba:	2100      	movs	r1, #0
 80038bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e010      	b.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	425a      	negs	r2, r3
 80038d2:	4153      	adcs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	001a      	movs	r2, r3
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d100      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x182>
 80038e0:	e747      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b014      	add	sp, #80	; 0x50
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	fffffe5f 	.word	0xfffffe5f

080038f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2284      	movs	r2, #132	; 0x84
 80038fc:	5c9b      	ldrb	r3, [r3, r2]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UARTEx_DisableFifoMode+0x16>
 8003902:	2302      	movs	r3, #2
 8003904:	e027      	b.n	8003956 <HAL_UARTEx_DisableFifoMode+0x66>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2284      	movs	r2, #132	; 0x84
 800390a:	2101      	movs	r1, #1
 800390c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2288      	movs	r2, #136	; 0x88
 8003912:	2124      	movs	r1, #36	; 0x24
 8003914:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	438a      	bics	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2288      	movs	r2, #136	; 0x88
 8003948:	2120      	movs	r1, #32
 800394a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2284      	movs	r2, #132	; 0x84
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	dfffffff 	.word	0xdfffffff

08003964 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2284      	movs	r2, #132	; 0x84
 8003972:	5c9b      	ldrb	r3, [r3, r2]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003978:	2302      	movs	r3, #2
 800397a:	e02e      	b.n	80039da <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2284      	movs	r2, #132	; 0x84
 8003980:	2101      	movs	r1, #1
 8003982:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2288      	movs	r2, #136	; 0x88
 8003988:	2124      	movs	r1, #36	; 0x24
 800398a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	438a      	bics	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	08d9      	lsrs	r1, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 f854 	bl	8003a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2288      	movs	r2, #136	; 0x88
 80039cc:	2120      	movs	r1, #32
 80039ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2284      	movs	r2, #132	; 0x84
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b004      	add	sp, #16
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2284      	movs	r2, #132	; 0x84
 80039f2:	5c9b      	ldrb	r3, [r3, r2]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e02f      	b.n	8003a5c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2284      	movs	r2, #132	; 0x84
 8003a00:	2101      	movs	r1, #1
 8003a02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2288      	movs	r2, #136	; 0x88
 8003a08:	2124      	movs	r1, #36	; 0x24
 8003a0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 f813 	bl	8003a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2288      	movs	r2, #136	; 0x88
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2284      	movs	r2, #132	; 0x84
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b004      	add	sp, #16
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	f1ffffff 	.word	0xf1ffffff

08003a68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	226a      	movs	r2, #106	; 0x6a
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2268      	movs	r2, #104	; 0x68
 8003a84:	2101      	movs	r1, #1
 8003a86:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a88:	e043      	b.n	8003b12 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a8a:	260f      	movs	r6, #15
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	2208      	movs	r2, #8
 8003a90:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a92:	200e      	movs	r0, #14
 8003a94:	183b      	adds	r3, r7, r0
 8003a96:	2208      	movs	r2, #8
 8003a98:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	0e5b      	lsrs	r3, r3, #25
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	240d      	movs	r4, #13
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	2107      	movs	r1, #7
 8003aaa:	400a      	ands	r2, r1
 8003aac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	0f5b      	lsrs	r3, r3, #29
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	250c      	movs	r5, #12
 8003aba:	197b      	adds	r3, r7, r5
 8003abc:	2107      	movs	r1, #7
 8003abe:	400a      	ands	r2, r1
 8003ac0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ac2:	183b      	adds	r3, r7, r0
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	197a      	adds	r2, r7, r5
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	4914      	ldr	r1, [pc, #80]	; (8003b1c <UARTEx_SetNbDataToProcess+0xb4>)
 8003acc:	5c8a      	ldrb	r2, [r1, r2]
 8003ace:	435a      	muls	r2, r3
 8003ad0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ada:	0019      	movs	r1, r3
 8003adc:	f7fd fb44 	bl	8001168 <__divsi3>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	b299      	uxth	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	226a      	movs	r2, #106	; 0x6a
 8003ae8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aea:	19bb      	adds	r3, r7, r6
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	193a      	adds	r2, r7, r4
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <UARTEx_SetNbDataToProcess+0xb4>)
 8003af4:	5c8a      	ldrb	r2, [r1, r2]
 8003af6:	435a      	muls	r2, r3
 8003af8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b02:	0019      	movs	r1, r3
 8003b04:	f7fd fb30 	bl	8001168 <__divsi3>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	b299      	uxth	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2268      	movs	r2, #104	; 0x68
 8003b10:	5299      	strh	r1, [r3, r2]
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b005      	add	sp, #20
 8003b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	080046f4 	.word	0x080046f4
 8003b20:	080046fc 	.word	0x080046fc

08003b24 <__errno>:
 8003b24:	4b01      	ldr	r3, [pc, #4]	; (8003b2c <__errno+0x8>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	4770      	bx	lr
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	2000018c 	.word	0x2000018c

08003b30 <__libc_init_array>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	2600      	movs	r6, #0
 8003b34:	4d0c      	ldr	r5, [pc, #48]	; (8003b68 <__libc_init_array+0x38>)
 8003b36:	4c0d      	ldr	r4, [pc, #52]	; (8003b6c <__libc_init_array+0x3c>)
 8003b38:	1b64      	subs	r4, r4, r5
 8003b3a:	10a4      	asrs	r4, r4, #2
 8003b3c:	42a6      	cmp	r6, r4
 8003b3e:	d109      	bne.n	8003b54 <__libc_init_array+0x24>
 8003b40:	2600      	movs	r6, #0
 8003b42:	f000 fd6b 	bl	800461c <_init>
 8003b46:	4d0a      	ldr	r5, [pc, #40]	; (8003b70 <__libc_init_array+0x40>)
 8003b48:	4c0a      	ldr	r4, [pc, #40]	; (8003b74 <__libc_init_array+0x44>)
 8003b4a:	1b64      	subs	r4, r4, r5
 8003b4c:	10a4      	asrs	r4, r4, #2
 8003b4e:	42a6      	cmp	r6, r4
 8003b50:	d105      	bne.n	8003b5e <__libc_init_array+0x2e>
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	00b3      	lsls	r3, r6, #2
 8003b56:	58eb      	ldr	r3, [r5, r3]
 8003b58:	4798      	blx	r3
 8003b5a:	3601      	adds	r6, #1
 8003b5c:	e7ee      	b.n	8003b3c <__libc_init_array+0xc>
 8003b5e:	00b3      	lsls	r3, r6, #2
 8003b60:	58eb      	ldr	r3, [r5, r3]
 8003b62:	4798      	blx	r3
 8003b64:	3601      	adds	r6, #1
 8003b66:	e7f2      	b.n	8003b4e <__libc_init_array+0x1e>
 8003b68:	08004770 	.word	0x08004770
 8003b6c:	08004770 	.word	0x08004770
 8003b70:	08004770 	.word	0x08004770
 8003b74:	08004774 	.word	0x08004774

08003b78 <memset>:
 8003b78:	0003      	movs	r3, r0
 8003b7a:	1882      	adds	r2, r0, r2
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <memset+0xa>
 8003b80:	4770      	bx	lr
 8003b82:	7019      	strb	r1, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	e7f9      	b.n	8003b7c <memset+0x4>

08003b88 <_puts_r>:
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	0005      	movs	r5, r0
 8003b8c:	000e      	movs	r6, r1
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d004      	beq.n	8003b9c <_puts_r+0x14>
 8003b92:	6983      	ldr	r3, [r0, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <_puts_r+0x14>
 8003b98:	f000 fa6e 	bl	8004078 <__sinit>
 8003b9c:	69ab      	ldr	r3, [r5, #24]
 8003b9e:	68ac      	ldr	r4, [r5, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <_puts_r+0x22>
 8003ba4:	0028      	movs	r0, r5
 8003ba6:	f000 fa67 	bl	8004078 <__sinit>
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <_puts_r+0xd8>)
 8003bac:	429c      	cmp	r4, r3
 8003bae:	d122      	bne.n	8003bf6 <_puts_r+0x6e>
 8003bb0:	686c      	ldr	r4, [r5, #4]
 8003bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bb4:	07db      	lsls	r3, r3, #31
 8003bb6:	d405      	bmi.n	8003bc4 <_puts_r+0x3c>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	059b      	lsls	r3, r3, #22
 8003bbc:	d402      	bmi.n	8003bc4 <_puts_r+0x3c>
 8003bbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc0:	f000 fafb 	bl	80041ba <__retarget_lock_acquire_recursive>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	071b      	lsls	r3, r3, #28
 8003bc8:	d502      	bpl.n	8003bd0 <_puts_r+0x48>
 8003bca:	6923      	ldr	r3, [r4, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d129      	bne.n	8003c24 <_puts_r+0x9c>
 8003bd0:	0021      	movs	r1, r4
 8003bd2:	0028      	movs	r0, r5
 8003bd4:	f000 f8aa 	bl	8003d2c <__swsetup_r>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d023      	beq.n	8003c24 <_puts_r+0x9c>
 8003bdc:	2501      	movs	r5, #1
 8003bde:	426d      	negs	r5, r5
 8003be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be2:	07db      	lsls	r3, r3, #31
 8003be4:	d405      	bmi.n	8003bf2 <_puts_r+0x6a>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	059b      	lsls	r3, r3, #22
 8003bea:	d402      	bmi.n	8003bf2 <_puts_r+0x6a>
 8003bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bee:	f000 fae5 	bl	80041bc <__retarget_lock_release_recursive>
 8003bf2:	0028      	movs	r0, r5
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <_puts_r+0xdc>)
 8003bf8:	429c      	cmp	r4, r3
 8003bfa:	d101      	bne.n	8003c00 <_puts_r+0x78>
 8003bfc:	68ac      	ldr	r4, [r5, #8]
 8003bfe:	e7d8      	b.n	8003bb2 <_puts_r+0x2a>
 8003c00:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <_puts_r+0xe0>)
 8003c02:	429c      	cmp	r4, r3
 8003c04:	d1d5      	bne.n	8003bb2 <_puts_r+0x2a>
 8003c06:	68ec      	ldr	r4, [r5, #12]
 8003c08:	e7d3      	b.n	8003bb2 <_puts_r+0x2a>
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	60a3      	str	r3, [r4, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da04      	bge.n	8003c1c <_puts_r+0x94>
 8003c12:	69a2      	ldr	r2, [r4, #24]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dc16      	bgt.n	8003c46 <_puts_r+0xbe>
 8003c18:	290a      	cmp	r1, #10
 8003c1a:	d014      	beq.n	8003c46 <_puts_r+0xbe>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	6022      	str	r2, [r4, #0]
 8003c22:	7019      	strb	r1, [r3, #0]
 8003c24:	68a3      	ldr	r3, [r4, #8]
 8003c26:	7831      	ldrb	r1, [r6, #0]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	2900      	cmp	r1, #0
 8003c2c:	d1ed      	bne.n	8003c0a <_puts_r+0x82>
 8003c2e:	60a3      	str	r3, [r4, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da0f      	bge.n	8003c54 <_puts_r+0xcc>
 8003c34:	0028      	movs	r0, r5
 8003c36:	0022      	movs	r2, r4
 8003c38:	310a      	adds	r1, #10
 8003c3a:	f000 f821 	bl	8003c80 <__swbuf_r>
 8003c3e:	250a      	movs	r5, #10
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d1cd      	bne.n	8003be0 <_puts_r+0x58>
 8003c44:	e7ca      	b.n	8003bdc <_puts_r+0x54>
 8003c46:	0022      	movs	r2, r4
 8003c48:	0028      	movs	r0, r5
 8003c4a:	f000 f819 	bl	8003c80 <__swbuf_r>
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d1e8      	bne.n	8003c24 <_puts_r+0x9c>
 8003c52:	e7c3      	b.n	8003bdc <_puts_r+0x54>
 8003c54:	250a      	movs	r5, #10
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	701d      	strb	r5, [r3, #0]
 8003c5e:	e7bf      	b.n	8003be0 <_puts_r+0x58>
 8003c60:	08004728 	.word	0x08004728
 8003c64:	08004748 	.word	0x08004748
 8003c68:	08004708 	.word	0x08004708

08003c6c <puts>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <puts+0x10>)
 8003c70:	0001      	movs	r1, r0
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	f7ff ff88 	bl	8003b88 <_puts_r>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	2000018c 	.word	0x2000018c

08003c80 <__swbuf_r>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	0005      	movs	r5, r0
 8003c84:	000e      	movs	r6, r1
 8003c86:	0014      	movs	r4, r2
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d004      	beq.n	8003c96 <__swbuf_r+0x16>
 8003c8c:	6983      	ldr	r3, [r0, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <__swbuf_r+0x16>
 8003c92:	f000 f9f1 	bl	8004078 <__sinit>
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <__swbuf_r+0xa0>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d12e      	bne.n	8003cfa <__swbuf_r+0x7a>
 8003c9c:	686c      	ldr	r4, [r5, #4]
 8003c9e:	69a3      	ldr	r3, [r4, #24]
 8003ca0:	60a3      	str	r3, [r4, #8]
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	d532      	bpl.n	8003d0e <__swbuf_r+0x8e>
 8003ca8:	6923      	ldr	r3, [r4, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02f      	beq.n	8003d0e <__swbuf_r+0x8e>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	6922      	ldr	r2, [r4, #16]
 8003cb2:	b2f7      	uxtb	r7, r6
 8003cb4:	1a98      	subs	r0, r3, r2
 8003cb6:	6963      	ldr	r3, [r4, #20]
 8003cb8:	b2f6      	uxtb	r6, r6
 8003cba:	4283      	cmp	r3, r0
 8003cbc:	dc05      	bgt.n	8003cca <__swbuf_r+0x4a>
 8003cbe:	0021      	movs	r1, r4
 8003cc0:	0028      	movs	r0, r5
 8003cc2:	f000 f937 	bl	8003f34 <_fflush_r>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d127      	bne.n	8003d1a <__swbuf_r+0x9a>
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	3001      	adds	r0, #1
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60a3      	str	r3, [r4, #8]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	6022      	str	r2, [r4, #0]
 8003cd8:	701f      	strb	r7, [r3, #0]
 8003cda:	6963      	ldr	r3, [r4, #20]
 8003cdc:	4283      	cmp	r3, r0
 8003cde:	d004      	beq.n	8003cea <__swbuf_r+0x6a>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	07db      	lsls	r3, r3, #31
 8003ce4:	d507      	bpl.n	8003cf6 <__swbuf_r+0x76>
 8003ce6:	2e0a      	cmp	r6, #10
 8003ce8:	d105      	bne.n	8003cf6 <__swbuf_r+0x76>
 8003cea:	0021      	movs	r1, r4
 8003cec:	0028      	movs	r0, r5
 8003cee:	f000 f921 	bl	8003f34 <_fflush_r>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d111      	bne.n	8003d1a <__swbuf_r+0x9a>
 8003cf6:	0030      	movs	r0, r6
 8003cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <__swbuf_r+0xa4>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d101      	bne.n	8003d04 <__swbuf_r+0x84>
 8003d00:	68ac      	ldr	r4, [r5, #8]
 8003d02:	e7cc      	b.n	8003c9e <__swbuf_r+0x1e>
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <__swbuf_r+0xa8>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d1c9      	bne.n	8003c9e <__swbuf_r+0x1e>
 8003d0a:	68ec      	ldr	r4, [r5, #12]
 8003d0c:	e7c7      	b.n	8003c9e <__swbuf_r+0x1e>
 8003d0e:	0021      	movs	r1, r4
 8003d10:	0028      	movs	r0, r5
 8003d12:	f000 f80b 	bl	8003d2c <__swsetup_r>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d0c9      	beq.n	8003cae <__swbuf_r+0x2e>
 8003d1a:	2601      	movs	r6, #1
 8003d1c:	4276      	negs	r6, r6
 8003d1e:	e7ea      	b.n	8003cf6 <__swbuf_r+0x76>
 8003d20:	08004728 	.word	0x08004728
 8003d24:	08004748 	.word	0x08004748
 8003d28:	08004708 	.word	0x08004708

08003d2c <__swsetup_r>:
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <__swsetup_r+0xe0>)
 8003d2e:	b570      	push	{r4, r5, r6, lr}
 8003d30:	681d      	ldr	r5, [r3, #0]
 8003d32:	0006      	movs	r6, r0
 8003d34:	000c      	movs	r4, r1
 8003d36:	2d00      	cmp	r5, #0
 8003d38:	d005      	beq.n	8003d46 <__swsetup_r+0x1a>
 8003d3a:	69ab      	ldr	r3, [r5, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <__swsetup_r+0x1a>
 8003d40:	0028      	movs	r0, r5
 8003d42:	f000 f999 	bl	8004078 <__sinit>
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <__swsetup_r+0xe4>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	d10f      	bne.n	8003d6c <__swsetup_r+0x40>
 8003d4c:	686c      	ldr	r4, [r5, #4]
 8003d4e:	230c      	movs	r3, #12
 8003d50:	5ee2      	ldrsh	r2, [r4, r3]
 8003d52:	b293      	uxth	r3, r2
 8003d54:	0711      	lsls	r1, r2, #28
 8003d56:	d42d      	bmi.n	8003db4 <__swsetup_r+0x88>
 8003d58:	06d9      	lsls	r1, r3, #27
 8003d5a:	d411      	bmi.n	8003d80 <__swsetup_r+0x54>
 8003d5c:	2309      	movs	r3, #9
 8003d5e:	2001      	movs	r0, #1
 8003d60:	6033      	str	r3, [r6, #0]
 8003d62:	3337      	adds	r3, #55	; 0x37
 8003d64:	4313      	orrs	r3, r2
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	4240      	negs	r0, r0
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <__swsetup_r+0xe8>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d101      	bne.n	8003d76 <__swsetup_r+0x4a>
 8003d72:	68ac      	ldr	r4, [r5, #8]
 8003d74:	e7eb      	b.n	8003d4e <__swsetup_r+0x22>
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <__swsetup_r+0xec>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	d1e8      	bne.n	8003d4e <__swsetup_r+0x22>
 8003d7c:	68ec      	ldr	r4, [r5, #12]
 8003d7e:	e7e6      	b.n	8003d4e <__swsetup_r+0x22>
 8003d80:	075b      	lsls	r3, r3, #29
 8003d82:	d513      	bpl.n	8003dac <__swsetup_r+0x80>
 8003d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d86:	2900      	cmp	r1, #0
 8003d88:	d008      	beq.n	8003d9c <__swsetup_r+0x70>
 8003d8a:	0023      	movs	r3, r4
 8003d8c:	3344      	adds	r3, #68	; 0x44
 8003d8e:	4299      	cmp	r1, r3
 8003d90:	d002      	beq.n	8003d98 <__swsetup_r+0x6c>
 8003d92:	0030      	movs	r0, r6
 8003d94:	f000 fa80 	bl	8004298 <_free_r>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8003d9c:	2224      	movs	r2, #36	; 0x24
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	4393      	bics	r3, r2
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	2300      	movs	r3, #0
 8003da6:	6063      	str	r3, [r4, #4]
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	2308      	movs	r3, #8
 8003dae:	89a2      	ldrh	r2, [r4, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	81a3      	strh	r3, [r4, #12]
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <__swsetup_r+0xa6>
 8003dba:	21a0      	movs	r1, #160	; 0xa0
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	0089      	lsls	r1, r1, #2
 8003dc2:	0092      	lsls	r2, r2, #2
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <__swsetup_r+0xa6>
 8003dca:	0021      	movs	r1, r4
 8003dcc:	0030      	movs	r0, r6
 8003dce:	f000 fa1f 	bl	8004210 <__smakebuf_r>
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	5ea3      	ldrsh	r3, [r4, r2]
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	001a      	movs	r2, r3
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	4002      	ands	r2, r0
 8003dde:	4203      	tst	r3, r0
 8003de0:	d00f      	beq.n	8003e02 <__swsetup_r+0xd6>
 8003de2:	2200      	movs	r2, #0
 8003de4:	60a2      	str	r2, [r4, #8]
 8003de6:	6962      	ldr	r2, [r4, #20]
 8003de8:	4252      	negs	r2, r2
 8003dea:	61a2      	str	r2, [r4, #24]
 8003dec:	2000      	movs	r0, #0
 8003dee:	6922      	ldr	r2, [r4, #16]
 8003df0:	4282      	cmp	r2, r0
 8003df2:	d1ba      	bne.n	8003d6a <__swsetup_r+0x3e>
 8003df4:	060a      	lsls	r2, r1, #24
 8003df6:	d5b8      	bpl.n	8003d6a <__swsetup_r+0x3e>
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	81a3      	strh	r3, [r4, #12]
 8003dfe:	3801      	subs	r0, #1
 8003e00:	e7b3      	b.n	8003d6a <__swsetup_r+0x3e>
 8003e02:	0788      	lsls	r0, r1, #30
 8003e04:	d400      	bmi.n	8003e08 <__swsetup_r+0xdc>
 8003e06:	6962      	ldr	r2, [r4, #20]
 8003e08:	60a2      	str	r2, [r4, #8]
 8003e0a:	e7ef      	b.n	8003dec <__swsetup_r+0xc0>
 8003e0c:	2000018c 	.word	0x2000018c
 8003e10:	08004728 	.word	0x08004728
 8003e14:	08004748 	.word	0x08004748
 8003e18:	08004708 	.word	0x08004708

08003e1c <__sflush_r>:
 8003e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e1e:	898b      	ldrh	r3, [r1, #12]
 8003e20:	0005      	movs	r5, r0
 8003e22:	000c      	movs	r4, r1
 8003e24:	071a      	lsls	r2, r3, #28
 8003e26:	d45f      	bmi.n	8003ee8 <__sflush_r+0xcc>
 8003e28:	684a      	ldr	r2, [r1, #4]
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	dc04      	bgt.n	8003e38 <__sflush_r+0x1c>
 8003e2e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	dc01      	bgt.n	8003e38 <__sflush_r+0x1c>
 8003e34:	2000      	movs	r0, #0
 8003e36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e3a:	2f00      	cmp	r7, #0
 8003e3c:	d0fa      	beq.n	8003e34 <__sflush_r+0x18>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	682e      	ldr	r6, [r5, #0]
 8003e44:	602a      	str	r2, [r5, #0]
 8003e46:	001a      	movs	r2, r3
 8003e48:	0149      	lsls	r1, r1, #5
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	420b      	tst	r3, r1
 8003e4e:	d034      	beq.n	8003eba <__sflush_r+0x9e>
 8003e50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	075b      	lsls	r3, r3, #29
 8003e56:	d506      	bpl.n	8003e66 <__sflush_r+0x4a>
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	1ac0      	subs	r0, r0, r3
 8003e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <__sflush_r+0x4a>
 8003e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e64:	1ac0      	subs	r0, r0, r3
 8003e66:	0002      	movs	r2, r0
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	0028      	movs	r0, r5
 8003e6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e70:	47b8      	blx	r7
 8003e72:	89a1      	ldrh	r1, [r4, #12]
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d106      	bne.n	8003e86 <__sflush_r+0x6a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	2b1d      	cmp	r3, #29
 8003e7c:	d831      	bhi.n	8003ee2 <__sflush_r+0xc6>
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <__sflush_r+0x114>)
 8003e80:	40da      	lsrs	r2, r3
 8003e82:	07d3      	lsls	r3, r2, #31
 8003e84:	d52d      	bpl.n	8003ee2 <__sflush_r+0xc6>
 8003e86:	2300      	movs	r3, #0
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	04cb      	lsls	r3, r1, #19
 8003e90:	d505      	bpl.n	8003e9e <__sflush_r+0x82>
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	d102      	bne.n	8003e9c <__sflush_r+0x80>
 8003e96:	682b      	ldr	r3, [r5, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d100      	bne.n	8003e9e <__sflush_r+0x82>
 8003e9c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ea0:	602e      	str	r6, [r5, #0]
 8003ea2:	2900      	cmp	r1, #0
 8003ea4:	d0c6      	beq.n	8003e34 <__sflush_r+0x18>
 8003ea6:	0023      	movs	r3, r4
 8003ea8:	3344      	adds	r3, #68	; 0x44
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	d002      	beq.n	8003eb4 <__sflush_r+0x98>
 8003eae:	0028      	movs	r0, r5
 8003eb0:	f000 f9f2 	bl	8004298 <_free_r>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	6360      	str	r0, [r4, #52]	; 0x34
 8003eb8:	e7bd      	b.n	8003e36 <__sflush_r+0x1a>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	0028      	movs	r0, r5
 8003ebe:	6a21      	ldr	r1, [r4, #32]
 8003ec0:	47b8      	blx	r7
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	d1c5      	bne.n	8003e52 <__sflush_r+0x36>
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0c2      	beq.n	8003e52 <__sflush_r+0x36>
 8003ecc:	2b1d      	cmp	r3, #29
 8003ece:	d001      	beq.n	8003ed4 <__sflush_r+0xb8>
 8003ed0:	2b16      	cmp	r3, #22
 8003ed2:	d101      	bne.n	8003ed8 <__sflush_r+0xbc>
 8003ed4:	602e      	str	r6, [r5, #0]
 8003ed6:	e7ad      	b.n	8003e34 <__sflush_r+0x18>
 8003ed8:	2340      	movs	r3, #64	; 0x40
 8003eda:	89a2      	ldrh	r2, [r4, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	e7a9      	b.n	8003e36 <__sflush_r+0x1a>
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	e7fa      	b.n	8003ede <__sflush_r+0xc2>
 8003ee8:	690f      	ldr	r7, [r1, #16]
 8003eea:	2f00      	cmp	r7, #0
 8003eec:	d0a2      	beq.n	8003e34 <__sflush_r+0x18>
 8003eee:	680a      	ldr	r2, [r1, #0]
 8003ef0:	600f      	str	r7, [r1, #0]
 8003ef2:	1bd2      	subs	r2, r2, r7
 8003ef4:	9201      	str	r2, [sp, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d100      	bne.n	8003efe <__sflush_r+0xe2>
 8003efc:	694a      	ldr	r2, [r1, #20]
 8003efe:	60a2      	str	r2, [r4, #8]
 8003f00:	9b01      	ldr	r3, [sp, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	dc00      	bgt.n	8003f08 <__sflush_r+0xec>
 8003f06:	e795      	b.n	8003e34 <__sflush_r+0x18>
 8003f08:	003a      	movs	r2, r7
 8003f0a:	0028      	movs	r0, r5
 8003f0c:	9b01      	ldr	r3, [sp, #4]
 8003f0e:	6a21      	ldr	r1, [r4, #32]
 8003f10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f12:	47b0      	blx	r6
 8003f14:	2800      	cmp	r0, #0
 8003f16:	dc06      	bgt.n	8003f26 <__sflush_r+0x10a>
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	89a2      	ldrh	r2, [r4, #12]
 8003f1e:	4240      	negs	r0, r0
 8003f20:	4313      	orrs	r3, r2
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	e787      	b.n	8003e36 <__sflush_r+0x1a>
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	183f      	adds	r7, r7, r0
 8003f2a:	1a1b      	subs	r3, r3, r0
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	e7e7      	b.n	8003f00 <__sflush_r+0xe4>
 8003f30:	20400001 	.word	0x20400001

08003f34 <_fflush_r>:
 8003f34:	690b      	ldr	r3, [r1, #16]
 8003f36:	b570      	push	{r4, r5, r6, lr}
 8003f38:	0005      	movs	r5, r0
 8003f3a:	000c      	movs	r4, r1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d102      	bne.n	8003f46 <_fflush_r+0x12>
 8003f40:	2500      	movs	r5, #0
 8003f42:	0028      	movs	r0, r5
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d004      	beq.n	8003f54 <_fflush_r+0x20>
 8003f4a:	6983      	ldr	r3, [r0, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <_fflush_r+0x20>
 8003f50:	f000 f892 	bl	8004078 <__sinit>
 8003f54:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <_fflush_r+0x74>)
 8003f56:	429c      	cmp	r4, r3
 8003f58:	d11b      	bne.n	8003f92 <_fflush_r+0x5e>
 8003f5a:	686c      	ldr	r4, [r5, #4]
 8003f5c:	220c      	movs	r2, #12
 8003f5e:	5ea3      	ldrsh	r3, [r4, r2]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ed      	beq.n	8003f40 <_fflush_r+0xc>
 8003f64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f66:	07d2      	lsls	r2, r2, #31
 8003f68:	d404      	bmi.n	8003f74 <_fflush_r+0x40>
 8003f6a:	059b      	lsls	r3, r3, #22
 8003f6c:	d402      	bmi.n	8003f74 <_fflush_r+0x40>
 8003f6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f70:	f000 f923 	bl	80041ba <__retarget_lock_acquire_recursive>
 8003f74:	0028      	movs	r0, r5
 8003f76:	0021      	movs	r1, r4
 8003f78:	f7ff ff50 	bl	8003e1c <__sflush_r>
 8003f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f7e:	0005      	movs	r5, r0
 8003f80:	07db      	lsls	r3, r3, #31
 8003f82:	d4de      	bmi.n	8003f42 <_fflush_r+0xe>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	059b      	lsls	r3, r3, #22
 8003f88:	d4db      	bmi.n	8003f42 <_fflush_r+0xe>
 8003f8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f8c:	f000 f916 	bl	80041bc <__retarget_lock_release_recursive>
 8003f90:	e7d7      	b.n	8003f42 <_fflush_r+0xe>
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <_fflush_r+0x78>)
 8003f94:	429c      	cmp	r4, r3
 8003f96:	d101      	bne.n	8003f9c <_fflush_r+0x68>
 8003f98:	68ac      	ldr	r4, [r5, #8]
 8003f9a:	e7df      	b.n	8003f5c <_fflush_r+0x28>
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <_fflush_r+0x7c>)
 8003f9e:	429c      	cmp	r4, r3
 8003fa0:	d1dc      	bne.n	8003f5c <_fflush_r+0x28>
 8003fa2:	68ec      	ldr	r4, [r5, #12]
 8003fa4:	e7da      	b.n	8003f5c <_fflush_r+0x28>
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	08004728 	.word	0x08004728
 8003fac:	08004748 	.word	0x08004748
 8003fb0:	08004708 	.word	0x08004708

08003fb4 <std>:
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	0004      	movs	r4, r0
 8003fba:	6003      	str	r3, [r0, #0]
 8003fbc:	6043      	str	r3, [r0, #4]
 8003fbe:	6083      	str	r3, [r0, #8]
 8003fc0:	8181      	strh	r1, [r0, #12]
 8003fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	81c2      	strh	r2, [r0, #14]
 8003fc8:	6103      	str	r3, [r0, #16]
 8003fca:	6143      	str	r3, [r0, #20]
 8003fcc:	6183      	str	r3, [r0, #24]
 8003fce:	2208      	movs	r2, #8
 8003fd0:	305c      	adds	r0, #92	; 0x5c
 8003fd2:	f7ff fdd1 	bl	8003b78 <memset>
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <std+0x38>)
 8003fd8:	6224      	str	r4, [r4, #32]
 8003fda:	6263      	str	r3, [r4, #36]	; 0x24
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <std+0x3c>)
 8003fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <std+0x40>)
 8003fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <std+0x44>)
 8003fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	08004481 	.word	0x08004481
 8003ff0:	080044a9 	.word	0x080044a9
 8003ff4:	080044e1 	.word	0x080044e1
 8003ff8:	0800450d 	.word	0x0800450d

08003ffc <_cleanup_r>:
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	4902      	ldr	r1, [pc, #8]	; (8004008 <_cleanup_r+0xc>)
 8004000:	f000 f8ba 	bl	8004178 <_fwalk_reent>
 8004004:	bd10      	pop	{r4, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	08003f35 	.word	0x08003f35

0800400c <__sfmoreglue>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	2568      	movs	r5, #104	; 0x68
 8004010:	1e4a      	subs	r2, r1, #1
 8004012:	4355      	muls	r5, r2
 8004014:	000e      	movs	r6, r1
 8004016:	0029      	movs	r1, r5
 8004018:	3174      	adds	r1, #116	; 0x74
 800401a:	f000 f9a9 	bl	8004370 <_malloc_r>
 800401e:	1e04      	subs	r4, r0, #0
 8004020:	d008      	beq.n	8004034 <__sfmoreglue+0x28>
 8004022:	2100      	movs	r1, #0
 8004024:	002a      	movs	r2, r5
 8004026:	6001      	str	r1, [r0, #0]
 8004028:	6046      	str	r6, [r0, #4]
 800402a:	300c      	adds	r0, #12
 800402c:	60a0      	str	r0, [r4, #8]
 800402e:	3268      	adds	r2, #104	; 0x68
 8004030:	f7ff fda2 	bl	8003b78 <memset>
 8004034:	0020      	movs	r0, r4
 8004036:	bd70      	pop	{r4, r5, r6, pc}

08004038 <__sfp_lock_acquire>:
 8004038:	b510      	push	{r4, lr}
 800403a:	4802      	ldr	r0, [pc, #8]	; (8004044 <__sfp_lock_acquire+0xc>)
 800403c:	f000 f8bd 	bl	80041ba <__retarget_lock_acquire_recursive>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200002a9 	.word	0x200002a9

08004048 <__sfp_lock_release>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4802      	ldr	r0, [pc, #8]	; (8004054 <__sfp_lock_release+0xc>)
 800404c:	f000 f8b6 	bl	80041bc <__retarget_lock_release_recursive>
 8004050:	bd10      	pop	{r4, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	200002a9 	.word	0x200002a9

08004058 <__sinit_lock_acquire>:
 8004058:	b510      	push	{r4, lr}
 800405a:	4802      	ldr	r0, [pc, #8]	; (8004064 <__sinit_lock_acquire+0xc>)
 800405c:	f000 f8ad 	bl	80041ba <__retarget_lock_acquire_recursive>
 8004060:	bd10      	pop	{r4, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	200002aa 	.word	0x200002aa

08004068 <__sinit_lock_release>:
 8004068:	b510      	push	{r4, lr}
 800406a:	4802      	ldr	r0, [pc, #8]	; (8004074 <__sinit_lock_release+0xc>)
 800406c:	f000 f8a6 	bl	80041bc <__retarget_lock_release_recursive>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	200002aa 	.word	0x200002aa

08004078 <__sinit>:
 8004078:	b513      	push	{r0, r1, r4, lr}
 800407a:	0004      	movs	r4, r0
 800407c:	f7ff ffec 	bl	8004058 <__sinit_lock_acquire>
 8004080:	69a3      	ldr	r3, [r4, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <__sinit+0x14>
 8004086:	f7ff ffef 	bl	8004068 <__sinit_lock_release>
 800408a:	bd13      	pop	{r0, r1, r4, pc}
 800408c:	64a3      	str	r3, [r4, #72]	; 0x48
 800408e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004090:	6523      	str	r3, [r4, #80]	; 0x50
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <__sinit+0x68>)
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <__sinit+0x6c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	62a2      	str	r2, [r4, #40]	; 0x28
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	42a3      	cmp	r3, r4
 800409e:	d101      	bne.n	80040a4 <__sinit+0x2c>
 80040a0:	2301      	movs	r3, #1
 80040a2:	61a3      	str	r3, [r4, #24]
 80040a4:	0020      	movs	r0, r4
 80040a6:	f000 f81f 	bl	80040e8 <__sfp>
 80040aa:	6060      	str	r0, [r4, #4]
 80040ac:	0020      	movs	r0, r4
 80040ae:	f000 f81b 	bl	80040e8 <__sfp>
 80040b2:	60a0      	str	r0, [r4, #8]
 80040b4:	0020      	movs	r0, r4
 80040b6:	f000 f817 	bl	80040e8 <__sfp>
 80040ba:	2200      	movs	r2, #0
 80040bc:	2104      	movs	r1, #4
 80040be:	60e0      	str	r0, [r4, #12]
 80040c0:	6860      	ldr	r0, [r4, #4]
 80040c2:	f7ff ff77 	bl	8003fb4 <std>
 80040c6:	2201      	movs	r2, #1
 80040c8:	2109      	movs	r1, #9
 80040ca:	68a0      	ldr	r0, [r4, #8]
 80040cc:	f7ff ff72 	bl	8003fb4 <std>
 80040d0:	2202      	movs	r2, #2
 80040d2:	2112      	movs	r1, #18
 80040d4:	68e0      	ldr	r0, [r4, #12]
 80040d6:	f7ff ff6d 	bl	8003fb4 <std>
 80040da:	2301      	movs	r3, #1
 80040dc:	61a3      	str	r3, [r4, #24]
 80040de:	e7d2      	b.n	8004086 <__sinit+0xe>
 80040e0:	08004704 	.word	0x08004704
 80040e4:	08003ffd 	.word	0x08003ffd

080040e8 <__sfp>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	0007      	movs	r7, r0
 80040ec:	f7ff ffa4 	bl	8004038 <__sfp_lock_acquire>
 80040f0:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <__sfp+0x88>)
 80040f2:	681e      	ldr	r6, [r3, #0]
 80040f4:	69b3      	ldr	r3, [r6, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <__sfp+0x18>
 80040fa:	0030      	movs	r0, r6
 80040fc:	f7ff ffbc 	bl	8004078 <__sinit>
 8004100:	3648      	adds	r6, #72	; 0x48
 8004102:	68b4      	ldr	r4, [r6, #8]
 8004104:	6873      	ldr	r3, [r6, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	d504      	bpl.n	8004114 <__sfp+0x2c>
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d022      	beq.n	8004156 <__sfp+0x6e>
 8004110:	6836      	ldr	r6, [r6, #0]
 8004112:	e7f6      	b.n	8004102 <__sfp+0x1a>
 8004114:	220c      	movs	r2, #12
 8004116:	5ea5      	ldrsh	r5, [r4, r2]
 8004118:	2d00      	cmp	r5, #0
 800411a:	d11a      	bne.n	8004152 <__sfp+0x6a>
 800411c:	0020      	movs	r0, r4
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <__sfp+0x8c>)
 8004120:	3058      	adds	r0, #88	; 0x58
 8004122:	60e3      	str	r3, [r4, #12]
 8004124:	6665      	str	r5, [r4, #100]	; 0x64
 8004126:	f000 f847 	bl	80041b8 <__retarget_lock_init_recursive>
 800412a:	f7ff ff8d 	bl	8004048 <__sfp_lock_release>
 800412e:	0020      	movs	r0, r4
 8004130:	2208      	movs	r2, #8
 8004132:	0029      	movs	r1, r5
 8004134:	6025      	str	r5, [r4, #0]
 8004136:	60a5      	str	r5, [r4, #8]
 8004138:	6065      	str	r5, [r4, #4]
 800413a:	6125      	str	r5, [r4, #16]
 800413c:	6165      	str	r5, [r4, #20]
 800413e:	61a5      	str	r5, [r4, #24]
 8004140:	305c      	adds	r0, #92	; 0x5c
 8004142:	f7ff fd19 	bl	8003b78 <memset>
 8004146:	6365      	str	r5, [r4, #52]	; 0x34
 8004148:	63a5      	str	r5, [r4, #56]	; 0x38
 800414a:	64a5      	str	r5, [r4, #72]	; 0x48
 800414c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800414e:	0020      	movs	r0, r4
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004152:	3468      	adds	r4, #104	; 0x68
 8004154:	e7d7      	b.n	8004106 <__sfp+0x1e>
 8004156:	2104      	movs	r1, #4
 8004158:	0038      	movs	r0, r7
 800415a:	f7ff ff57 	bl	800400c <__sfmoreglue>
 800415e:	1e04      	subs	r4, r0, #0
 8004160:	6030      	str	r0, [r6, #0]
 8004162:	d1d5      	bne.n	8004110 <__sfp+0x28>
 8004164:	f7ff ff70 	bl	8004048 <__sfp_lock_release>
 8004168:	230c      	movs	r3, #12
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	e7ef      	b.n	800414e <__sfp+0x66>
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	08004704 	.word	0x08004704
 8004174:	ffff0001 	.word	0xffff0001

08004178 <_fwalk_reent>:
 8004178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800417a:	0004      	movs	r4, r0
 800417c:	0006      	movs	r6, r0
 800417e:	2700      	movs	r7, #0
 8004180:	9101      	str	r1, [sp, #4]
 8004182:	3448      	adds	r4, #72	; 0x48
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	68a5      	ldr	r5, [r4, #8]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	9b00      	ldr	r3, [sp, #0]
 800418c:	3b01      	subs	r3, #1
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	d504      	bpl.n	800419c <_fwalk_reent+0x24>
 8004192:	6824      	ldr	r4, [r4, #0]
 8004194:	2c00      	cmp	r4, #0
 8004196:	d1f5      	bne.n	8004184 <_fwalk_reent+0xc>
 8004198:	0038      	movs	r0, r7
 800419a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800419c:	89ab      	ldrh	r3, [r5, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d908      	bls.n	80041b4 <_fwalk_reent+0x3c>
 80041a2:	220e      	movs	r2, #14
 80041a4:	5eab      	ldrsh	r3, [r5, r2]
 80041a6:	3301      	adds	r3, #1
 80041a8:	d004      	beq.n	80041b4 <_fwalk_reent+0x3c>
 80041aa:	0029      	movs	r1, r5
 80041ac:	0030      	movs	r0, r6
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	4798      	blx	r3
 80041b2:	4307      	orrs	r7, r0
 80041b4:	3568      	adds	r5, #104	; 0x68
 80041b6:	e7e8      	b.n	800418a <_fwalk_reent+0x12>

080041b8 <__retarget_lock_init_recursive>:
 80041b8:	4770      	bx	lr

080041ba <__retarget_lock_acquire_recursive>:
 80041ba:	4770      	bx	lr

080041bc <__retarget_lock_release_recursive>:
 80041bc:	4770      	bx	lr
	...

080041c0 <__swhatbuf_r>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	000e      	movs	r6, r1
 80041c4:	001d      	movs	r5, r3
 80041c6:	230e      	movs	r3, #14
 80041c8:	5ec9      	ldrsh	r1, [r1, r3]
 80041ca:	0014      	movs	r4, r2
 80041cc:	b096      	sub	sp, #88	; 0x58
 80041ce:	2900      	cmp	r1, #0
 80041d0:	da08      	bge.n	80041e4 <__swhatbuf_r+0x24>
 80041d2:	220c      	movs	r2, #12
 80041d4:	5eb3      	ldrsh	r3, [r6, r2]
 80041d6:	2200      	movs	r2, #0
 80041d8:	602a      	str	r2, [r5, #0]
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	d411      	bmi.n	8004202 <__swhatbuf_r+0x42>
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	e00f      	b.n	8004204 <__swhatbuf_r+0x44>
 80041e4:	466a      	mov	r2, sp
 80041e6:	f000 f9bd 	bl	8004564 <_fstat_r>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	dbf1      	blt.n	80041d2 <__swhatbuf_r+0x12>
 80041ee:	23f0      	movs	r3, #240	; 0xf0
 80041f0:	9901      	ldr	r1, [sp, #4]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	4019      	ands	r1, r3
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <__swhatbuf_r+0x4c>)
 80041f8:	18c9      	adds	r1, r1, r3
 80041fa:	424b      	negs	r3, r1
 80041fc:	4159      	adcs	r1, r3
 80041fe:	6029      	str	r1, [r5, #0]
 8004200:	e7ed      	b.n	80041de <__swhatbuf_r+0x1e>
 8004202:	2340      	movs	r3, #64	; 0x40
 8004204:	2000      	movs	r0, #0
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	b016      	add	sp, #88	; 0x58
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	ffffe000 	.word	0xffffe000

08004210 <__smakebuf_r>:
 8004210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004212:	2602      	movs	r6, #2
 8004214:	898b      	ldrh	r3, [r1, #12]
 8004216:	0005      	movs	r5, r0
 8004218:	000c      	movs	r4, r1
 800421a:	4233      	tst	r3, r6
 800421c:	d006      	beq.n	800422c <__smakebuf_r+0x1c>
 800421e:	0023      	movs	r3, r4
 8004220:	3347      	adds	r3, #71	; 0x47
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	2301      	movs	r3, #1
 8004228:	6163      	str	r3, [r4, #20]
 800422a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800422c:	466a      	mov	r2, sp
 800422e:	ab01      	add	r3, sp, #4
 8004230:	f7ff ffc6 	bl	80041c0 <__swhatbuf_r>
 8004234:	9900      	ldr	r1, [sp, #0]
 8004236:	0007      	movs	r7, r0
 8004238:	0028      	movs	r0, r5
 800423a:	f000 f899 	bl	8004370 <_malloc_r>
 800423e:	2800      	cmp	r0, #0
 8004240:	d108      	bne.n	8004254 <__smakebuf_r+0x44>
 8004242:	220c      	movs	r2, #12
 8004244:	5ea3      	ldrsh	r3, [r4, r2]
 8004246:	059a      	lsls	r2, r3, #22
 8004248:	d4ef      	bmi.n	800422a <__smakebuf_r+0x1a>
 800424a:	2203      	movs	r2, #3
 800424c:	4393      	bics	r3, r2
 800424e:	431e      	orrs	r6, r3
 8004250:	81a6      	strh	r6, [r4, #12]
 8004252:	e7e4      	b.n	800421e <__smakebuf_r+0xe>
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <__smakebuf_r+0x84>)
 8004256:	62ab      	str	r3, [r5, #40]	; 0x28
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	89a2      	ldrh	r2, [r4, #12]
 800425c:	6020      	str	r0, [r4, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	9b00      	ldr	r3, [sp, #0]
 8004264:	6120      	str	r0, [r4, #16]
 8004266:	6163      	str	r3, [r4, #20]
 8004268:	9b01      	ldr	r3, [sp, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <__smakebuf_r+0x7a>
 800426e:	0028      	movs	r0, r5
 8004270:	230e      	movs	r3, #14
 8004272:	5ee1      	ldrsh	r1, [r4, r3]
 8004274:	f000 f988 	bl	8004588 <_isatty_r>
 8004278:	2800      	cmp	r0, #0
 800427a:	d006      	beq.n	800428a <__smakebuf_r+0x7a>
 800427c:	2203      	movs	r2, #3
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	4393      	bics	r3, r2
 8004282:	001a      	movs	r2, r3
 8004284:	2301      	movs	r3, #1
 8004286:	4313      	orrs	r3, r2
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	89a0      	ldrh	r0, [r4, #12]
 800428c:	4307      	orrs	r7, r0
 800428e:	81a7      	strh	r7, [r4, #12]
 8004290:	e7cb      	b.n	800422a <__smakebuf_r+0x1a>
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	08003ffd 	.word	0x08003ffd

08004298 <_free_r>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	0005      	movs	r5, r0
 800429c:	2900      	cmp	r1, #0
 800429e:	d010      	beq.n	80042c2 <_free_r+0x2a>
 80042a0:	1f0c      	subs	r4, r1, #4
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da00      	bge.n	80042aa <_free_r+0x12>
 80042a8:	18e4      	adds	r4, r4, r3
 80042aa:	0028      	movs	r0, r5
 80042ac:	f000 f992 	bl	80045d4 <__malloc_lock>
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <_free_r+0x90>)
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <_free_r+0x2c>
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	6014      	str	r4, [r2, #0]
 80042bc:	0028      	movs	r0, r5
 80042be:	f000 f991 	bl	80045e4 <__malloc_unlock>
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d908      	bls.n	80042da <_free_r+0x42>
 80042c8:	6821      	ldr	r1, [r4, #0]
 80042ca:	1860      	adds	r0, r4, r1
 80042cc:	4283      	cmp	r3, r0
 80042ce:	d1f3      	bne.n	80042b8 <_free_r+0x20>
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	1841      	adds	r1, r0, r1
 80042d6:	6021      	str	r1, [r4, #0]
 80042d8:	e7ee      	b.n	80042b8 <_free_r+0x20>
 80042da:	001a      	movs	r2, r3
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <_free_r+0x4e>
 80042e2:	42a3      	cmp	r3, r4
 80042e4:	d9f9      	bls.n	80042da <_free_r+0x42>
 80042e6:	6811      	ldr	r1, [r2, #0]
 80042e8:	1850      	adds	r0, r2, r1
 80042ea:	42a0      	cmp	r0, r4
 80042ec:	d10b      	bne.n	8004306 <_free_r+0x6e>
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	1809      	adds	r1, r1, r0
 80042f2:	1850      	adds	r0, r2, r1
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	4283      	cmp	r3, r0
 80042f8:	d1e0      	bne.n	80042bc <_free_r+0x24>
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	1841      	adds	r1, r0, r1
 8004300:	6011      	str	r1, [r2, #0]
 8004302:	6053      	str	r3, [r2, #4]
 8004304:	e7da      	b.n	80042bc <_free_r+0x24>
 8004306:	42a0      	cmp	r0, r4
 8004308:	d902      	bls.n	8004310 <_free_r+0x78>
 800430a:	230c      	movs	r3, #12
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	e7d5      	b.n	80042bc <_free_r+0x24>
 8004310:	6821      	ldr	r1, [r4, #0]
 8004312:	1860      	adds	r0, r4, r1
 8004314:	4283      	cmp	r3, r0
 8004316:	d103      	bne.n	8004320 <_free_r+0x88>
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	1841      	adds	r1, r0, r1
 800431e:	6021      	str	r1, [r4, #0]
 8004320:	6063      	str	r3, [r4, #4]
 8004322:	6054      	str	r4, [r2, #4]
 8004324:	e7ca      	b.n	80042bc <_free_r+0x24>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	200002ac 	.word	0x200002ac

0800432c <sbrk_aligned>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4e0f      	ldr	r6, [pc, #60]	; (800436c <sbrk_aligned+0x40>)
 8004330:	000d      	movs	r5, r1
 8004332:	6831      	ldr	r1, [r6, #0]
 8004334:	0004      	movs	r4, r0
 8004336:	2900      	cmp	r1, #0
 8004338:	d102      	bne.n	8004340 <sbrk_aligned+0x14>
 800433a:	f000 f88f 	bl	800445c <_sbrk_r>
 800433e:	6030      	str	r0, [r6, #0]
 8004340:	0029      	movs	r1, r5
 8004342:	0020      	movs	r0, r4
 8004344:	f000 f88a 	bl	800445c <_sbrk_r>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d00a      	beq.n	8004362 <sbrk_aligned+0x36>
 800434c:	2303      	movs	r3, #3
 800434e:	1cc5      	adds	r5, r0, #3
 8004350:	439d      	bics	r5, r3
 8004352:	42a8      	cmp	r0, r5
 8004354:	d007      	beq.n	8004366 <sbrk_aligned+0x3a>
 8004356:	1a29      	subs	r1, r5, r0
 8004358:	0020      	movs	r0, r4
 800435a:	f000 f87f 	bl	800445c <_sbrk_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	d101      	bne.n	8004366 <sbrk_aligned+0x3a>
 8004362:	2501      	movs	r5, #1
 8004364:	426d      	negs	r5, r5
 8004366:	0028      	movs	r0, r5
 8004368:	bd70      	pop	{r4, r5, r6, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	200002b0 	.word	0x200002b0

08004370 <_malloc_r>:
 8004370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004372:	2203      	movs	r2, #3
 8004374:	1ccb      	adds	r3, r1, #3
 8004376:	4393      	bics	r3, r2
 8004378:	3308      	adds	r3, #8
 800437a:	0006      	movs	r6, r0
 800437c:	001f      	movs	r7, r3
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d232      	bcs.n	80043e8 <_malloc_r+0x78>
 8004382:	270c      	movs	r7, #12
 8004384:	42b9      	cmp	r1, r7
 8004386:	d831      	bhi.n	80043ec <_malloc_r+0x7c>
 8004388:	0030      	movs	r0, r6
 800438a:	f000 f923 	bl	80045d4 <__malloc_lock>
 800438e:	4d32      	ldr	r5, [pc, #200]	; (8004458 <_malloc_r+0xe8>)
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	001c      	movs	r4, r3
 8004394:	2c00      	cmp	r4, #0
 8004396:	d12e      	bne.n	80043f6 <_malloc_r+0x86>
 8004398:	0039      	movs	r1, r7
 800439a:	0030      	movs	r0, r6
 800439c:	f7ff ffc6 	bl	800432c <sbrk_aligned>
 80043a0:	0004      	movs	r4, r0
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d11e      	bne.n	80043e4 <_malloc_r+0x74>
 80043a6:	682c      	ldr	r4, [r5, #0]
 80043a8:	0025      	movs	r5, r4
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	d14a      	bne.n	8004444 <_malloc_r+0xd4>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	0029      	movs	r1, r5
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	0030      	movs	r0, r6
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	f000 f850 	bl	800445c <_sbrk_r>
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	4283      	cmp	r3, r0
 80043c0:	d143      	bne.n	800444a <_malloc_r+0xda>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	3703      	adds	r7, #3
 80043c6:	1aff      	subs	r7, r7, r3
 80043c8:	2303      	movs	r3, #3
 80043ca:	439f      	bics	r7, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	2f0c      	cmp	r7, #12
 80043d0:	d200      	bcs.n	80043d4 <_malloc_r+0x64>
 80043d2:	270c      	movs	r7, #12
 80043d4:	0039      	movs	r1, r7
 80043d6:	0030      	movs	r0, r6
 80043d8:	f7ff ffa8 	bl	800432c <sbrk_aligned>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d034      	beq.n	800444a <_malloc_r+0xda>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	19df      	adds	r7, r3, r7
 80043e4:	6027      	str	r7, [r4, #0]
 80043e6:	e013      	b.n	8004410 <_malloc_r+0xa0>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	dacb      	bge.n	8004384 <_malloc_r+0x14>
 80043ec:	230c      	movs	r3, #12
 80043ee:	2500      	movs	r5, #0
 80043f0:	6033      	str	r3, [r6, #0]
 80043f2:	0028      	movs	r0, r5
 80043f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	1bd1      	subs	r1, r2, r7
 80043fa:	d420      	bmi.n	800443e <_malloc_r+0xce>
 80043fc:	290b      	cmp	r1, #11
 80043fe:	d917      	bls.n	8004430 <_malloc_r+0xc0>
 8004400:	19e2      	adds	r2, r4, r7
 8004402:	6027      	str	r7, [r4, #0]
 8004404:	42a3      	cmp	r3, r4
 8004406:	d111      	bne.n	800442c <_malloc_r+0xbc>
 8004408:	602a      	str	r2, [r5, #0]
 800440a:	6863      	ldr	r3, [r4, #4]
 800440c:	6011      	str	r1, [r2, #0]
 800440e:	6053      	str	r3, [r2, #4]
 8004410:	0030      	movs	r0, r6
 8004412:	0025      	movs	r5, r4
 8004414:	f000 f8e6 	bl	80045e4 <__malloc_unlock>
 8004418:	2207      	movs	r2, #7
 800441a:	350b      	adds	r5, #11
 800441c:	1d23      	adds	r3, r4, #4
 800441e:	4395      	bics	r5, r2
 8004420:	1aea      	subs	r2, r5, r3
 8004422:	429d      	cmp	r5, r3
 8004424:	d0e5      	beq.n	80043f2 <_malloc_r+0x82>
 8004426:	1b5b      	subs	r3, r3, r5
 8004428:	50a3      	str	r3, [r4, r2]
 800442a:	e7e2      	b.n	80043f2 <_malloc_r+0x82>
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	e7ec      	b.n	800440a <_malloc_r+0x9a>
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	42a3      	cmp	r3, r4
 8004434:	d101      	bne.n	800443a <_malloc_r+0xca>
 8004436:	602a      	str	r2, [r5, #0]
 8004438:	e7ea      	b.n	8004410 <_malloc_r+0xa0>
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e7e8      	b.n	8004410 <_malloc_r+0xa0>
 800443e:	0023      	movs	r3, r4
 8004440:	6864      	ldr	r4, [r4, #4]
 8004442:	e7a7      	b.n	8004394 <_malloc_r+0x24>
 8004444:	002c      	movs	r4, r5
 8004446:	686d      	ldr	r5, [r5, #4]
 8004448:	e7af      	b.n	80043aa <_malloc_r+0x3a>
 800444a:	230c      	movs	r3, #12
 800444c:	0030      	movs	r0, r6
 800444e:	6033      	str	r3, [r6, #0]
 8004450:	f000 f8c8 	bl	80045e4 <__malloc_unlock>
 8004454:	e7cd      	b.n	80043f2 <_malloc_r+0x82>
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	200002ac 	.word	0x200002ac

0800445c <_sbrk_r>:
 800445c:	2300      	movs	r3, #0
 800445e:	b570      	push	{r4, r5, r6, lr}
 8004460:	4d06      	ldr	r5, [pc, #24]	; (800447c <_sbrk_r+0x20>)
 8004462:	0004      	movs	r4, r0
 8004464:	0008      	movs	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fd faba 	bl	80019e0 <_sbrk>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d103      	bne.n	8004478 <_sbrk_r+0x1c>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d000      	beq.n	8004478 <_sbrk_r+0x1c>
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	200002b4 	.word	0x200002b4

08004480 <__sread>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	000c      	movs	r4, r1
 8004484:	250e      	movs	r5, #14
 8004486:	5f49      	ldrsh	r1, [r1, r5]
 8004488:	f000 f8b4 	bl	80045f4 <_read_r>
 800448c:	2800      	cmp	r0, #0
 800448e:	db03      	blt.n	8004498 <__sread+0x18>
 8004490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004492:	181b      	adds	r3, r3, r0
 8004494:	6563      	str	r3, [r4, #84]	; 0x54
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	4a02      	ldr	r2, [pc, #8]	; (80044a4 <__sread+0x24>)
 800449c:	4013      	ands	r3, r2
 800449e:	81a3      	strh	r3, [r4, #12]
 80044a0:	e7f9      	b.n	8004496 <__sread+0x16>
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	ffffefff 	.word	0xffffefff

080044a8 <__swrite>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	001f      	movs	r7, r3
 80044ac:	898b      	ldrh	r3, [r1, #12]
 80044ae:	0005      	movs	r5, r0
 80044b0:	000c      	movs	r4, r1
 80044b2:	0016      	movs	r6, r2
 80044b4:	05db      	lsls	r3, r3, #23
 80044b6:	d505      	bpl.n	80044c4 <__swrite+0x1c>
 80044b8:	230e      	movs	r3, #14
 80044ba:	5ec9      	ldrsh	r1, [r1, r3]
 80044bc:	2200      	movs	r2, #0
 80044be:	2302      	movs	r3, #2
 80044c0:	f000 f874 	bl	80045ac <_lseek_r>
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <__swrite+0x34>)
 80044c8:	0028      	movs	r0, r5
 80044ca:	4013      	ands	r3, r2
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	0032      	movs	r2, r6
 80044d0:	230e      	movs	r3, #14
 80044d2:	5ee1      	ldrsh	r1, [r4, r3]
 80044d4:	003b      	movs	r3, r7
 80044d6:	f000 f81f 	bl	8004518 <_write_r>
 80044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044dc:	ffffefff 	.word	0xffffefff

080044e0 <__sseek>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	000c      	movs	r4, r1
 80044e4:	250e      	movs	r5, #14
 80044e6:	5f49      	ldrsh	r1, [r1, r5]
 80044e8:	f000 f860 	bl	80045ac <_lseek_r>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	1c42      	adds	r2, r0, #1
 80044f0:	d103      	bne.n	80044fa <__sseek+0x1a>
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <__sseek+0x28>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	0152      	lsls	r2, r2, #5
 80044fe:	4313      	orrs	r3, r2
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	6560      	str	r0, [r4, #84]	; 0x54
 8004504:	e7f8      	b.n	80044f8 <__sseek+0x18>
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	ffffefff 	.word	0xffffefff

0800450c <__sclose>:
 800450c:	b510      	push	{r4, lr}
 800450e:	230e      	movs	r3, #14
 8004510:	5ec9      	ldrsh	r1, [r1, r3]
 8004512:	f000 f815 	bl	8004540 <_close_r>
 8004516:	bd10      	pop	{r4, pc}

08004518 <_write_r>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	0004      	movs	r4, r0
 800451c:	0008      	movs	r0, r1
 800451e:	0011      	movs	r1, r2
 8004520:	001a      	movs	r2, r3
 8004522:	2300      	movs	r3, #0
 8004524:	4d05      	ldr	r5, [pc, #20]	; (800453c <_write_r+0x24>)
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fd f852 	bl	80015d0 <_write>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d103      	bne.n	8004538 <_write_r+0x20>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d000      	beq.n	8004538 <_write_r+0x20>
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	200002b4 	.word	0x200002b4

08004540 <_close_r>:
 8004540:	2300      	movs	r3, #0
 8004542:	b570      	push	{r4, r5, r6, lr}
 8004544:	4d06      	ldr	r5, [pc, #24]	; (8004560 <_close_r+0x20>)
 8004546:	0004      	movs	r4, r0
 8004548:	0008      	movs	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fd fa1c 	bl	8001988 <_close>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d103      	bne.n	800455c <_close_r+0x1c>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d000      	beq.n	800455c <_close_r+0x1c>
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	bd70      	pop	{r4, r5, r6, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	200002b4 	.word	0x200002b4

08004564 <_fstat_r>:
 8004564:	2300      	movs	r3, #0
 8004566:	b570      	push	{r4, r5, r6, lr}
 8004568:	4d06      	ldr	r5, [pc, #24]	; (8004584 <_fstat_r+0x20>)
 800456a:	0004      	movs	r4, r0
 800456c:	0008      	movs	r0, r1
 800456e:	0011      	movs	r1, r2
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	f7fd fa13 	bl	800199c <_fstat>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	d103      	bne.n	8004582 <_fstat_r+0x1e>
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d000      	beq.n	8004582 <_fstat_r+0x1e>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd70      	pop	{r4, r5, r6, pc}
 8004584:	200002b4 	.word	0x200002b4

08004588 <_isatty_r>:
 8004588:	2300      	movs	r3, #0
 800458a:	b570      	push	{r4, r5, r6, lr}
 800458c:	4d06      	ldr	r5, [pc, #24]	; (80045a8 <_isatty_r+0x20>)
 800458e:	0004      	movs	r4, r0
 8004590:	0008      	movs	r0, r1
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	f7fd fa10 	bl	80019b8 <_isatty>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d103      	bne.n	80045a4 <_isatty_r+0x1c>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d000      	beq.n	80045a4 <_isatty_r+0x1c>
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	200002b4 	.word	0x200002b4

080045ac <_lseek_r>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	0004      	movs	r4, r0
 80045b0:	0008      	movs	r0, r1
 80045b2:	0011      	movs	r1, r2
 80045b4:	001a      	movs	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	4d05      	ldr	r5, [pc, #20]	; (80045d0 <_lseek_r+0x24>)
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	f7fd fa05 	bl	80019ca <_lseek>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d103      	bne.n	80045cc <_lseek_r+0x20>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d000      	beq.n	80045cc <_lseek_r+0x20>
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	bd70      	pop	{r4, r5, r6, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	200002b4 	.word	0x200002b4

080045d4 <__malloc_lock>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4802      	ldr	r0, [pc, #8]	; (80045e0 <__malloc_lock+0xc>)
 80045d8:	f7ff fdef 	bl	80041ba <__retarget_lock_acquire_recursive>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	200002a8 	.word	0x200002a8

080045e4 <__malloc_unlock>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4802      	ldr	r0, [pc, #8]	; (80045f0 <__malloc_unlock+0xc>)
 80045e8:	f7ff fde8 	bl	80041bc <__retarget_lock_release_recursive>
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	200002a8 	.word	0x200002a8

080045f4 <_read_r>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	0004      	movs	r4, r0
 80045f8:	0008      	movs	r0, r1
 80045fa:	0011      	movs	r1, r2
 80045fc:	001a      	movs	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	4d05      	ldr	r5, [pc, #20]	; (8004618 <_read_r+0x24>)
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fd f9a3 	bl	800194e <_read>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d103      	bne.n	8004614 <_read_r+0x20>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d000      	beq.n	8004614 <_read_r+0x20>
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200002b4 	.word	0x200002b4

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
