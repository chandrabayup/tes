
Simple-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockFLASH 0000000a  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .myBufBlockRAM 00000080  20000100  20000100  00030100  2**2
                  ALLOC
  3 .API_SHARED   0000000c  08010000  08010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00004950  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .mysection    00000054  0801000c  0801000c  0003000c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000001f4  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08005b50  08005b50  00030060  2**0
                  CONTENTS
  8 .ARM          00000008  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08005b58  08005b58  00030060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000070  20000180  08005b60  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00000130  200001f0  08005bd0  000201f0  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20000320  08005bd0  00020320  2**0
                  ALLOC
 15 .ARM.attributes 00000028  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY
 16 .debug_info   0000d795  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001f37  00000000  00000000  0003d81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000af8  00000000  00000000  0003f758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000a30  00000000  00000000  00040250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00018c6c  00000000  00000000  00040c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0000d4e3  00000000  00000000  000598ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00099cb4  00000000  00000000  00066dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  00100a83  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002e9c  00000000  00000000  00100ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800100c <__do_global_dtors_aux>:
 800100c:	b510      	push	{r4, lr}
 800100e:	4c06      	ldr	r4, [pc, #24]	; (8001028 <__do_global_dtors_aux+0x1c>)
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <__do_global_dtors_aux+0x1a>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <__do_global_dtors_aux+0x20>)
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <__do_global_dtors_aux+0x16>
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <__do_global_dtors_aux+0x24>)
 800101e:	e000      	b.n	8001022 <__do_global_dtors_aux+0x16>
 8001020:	bf00      	nop
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	200001f0 	.word	0x200001f0
 800102c:	00000000 	.word	0x00000000
 8001030:	08005944 	.word	0x08005944

08001034 <frame_dummy>:
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <frame_dummy+0x14>)
 8001036:	b510      	push	{r4, lr}
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <frame_dummy+0x10>
 800103c:	4903      	ldr	r1, [pc, #12]	; (800104c <frame_dummy+0x18>)
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <frame_dummy+0x1c>)
 8001040:	e000      	b.n	8001044 <frame_dummy+0x10>
 8001042:	bf00      	nop
 8001044:	bd10      	pop	{r4, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	00000000 	.word	0x00000000
 800104c:	200001f4 	.word	0x200001f4
 8001050:	08005944 	.word	0x08005944

08001054 <__gnu_thumb1_case_shi>:
 8001054:	b403      	push	{r0, r1}
 8001056:	4671      	mov	r1, lr
 8001058:	0849      	lsrs	r1, r1, #1
 800105a:	0040      	lsls	r0, r0, #1
 800105c:	0049      	lsls	r1, r1, #1
 800105e:	5e09      	ldrsh	r1, [r1, r0]
 8001060:	0049      	lsls	r1, r1, #1
 8001062:	448e      	add	lr, r1
 8001064:	bc03      	pop	{r0, r1}
 8001066:	4770      	bx	lr

08001068 <__udivsi3>:
 8001068:	2200      	movs	r2, #0
 800106a:	0843      	lsrs	r3, r0, #1
 800106c:	428b      	cmp	r3, r1
 800106e:	d374      	bcc.n	800115a <__udivsi3+0xf2>
 8001070:	0903      	lsrs	r3, r0, #4
 8001072:	428b      	cmp	r3, r1
 8001074:	d35f      	bcc.n	8001136 <__udivsi3+0xce>
 8001076:	0a03      	lsrs	r3, r0, #8
 8001078:	428b      	cmp	r3, r1
 800107a:	d344      	bcc.n	8001106 <__udivsi3+0x9e>
 800107c:	0b03      	lsrs	r3, r0, #12
 800107e:	428b      	cmp	r3, r1
 8001080:	d328      	bcc.n	80010d4 <__udivsi3+0x6c>
 8001082:	0c03      	lsrs	r3, r0, #16
 8001084:	428b      	cmp	r3, r1
 8001086:	d30d      	bcc.n	80010a4 <__udivsi3+0x3c>
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	0209      	lsls	r1, r1, #8
 800108c:	ba12      	rev	r2, r2
 800108e:	0c03      	lsrs	r3, r0, #16
 8001090:	428b      	cmp	r3, r1
 8001092:	d302      	bcc.n	800109a <__udivsi3+0x32>
 8001094:	1212      	asrs	r2, r2, #8
 8001096:	0209      	lsls	r1, r1, #8
 8001098:	d065      	beq.n	8001166 <__udivsi3+0xfe>
 800109a:	0b03      	lsrs	r3, r0, #12
 800109c:	428b      	cmp	r3, r1
 800109e:	d319      	bcc.n	80010d4 <__udivsi3+0x6c>
 80010a0:	e000      	b.n	80010a4 <__udivsi3+0x3c>
 80010a2:	0a09      	lsrs	r1, r1, #8
 80010a4:	0bc3      	lsrs	r3, r0, #15
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d301      	bcc.n	80010ae <__udivsi3+0x46>
 80010aa:	03cb      	lsls	r3, r1, #15
 80010ac:	1ac0      	subs	r0, r0, r3
 80010ae:	4152      	adcs	r2, r2
 80010b0:	0b83      	lsrs	r3, r0, #14
 80010b2:	428b      	cmp	r3, r1
 80010b4:	d301      	bcc.n	80010ba <__udivsi3+0x52>
 80010b6:	038b      	lsls	r3, r1, #14
 80010b8:	1ac0      	subs	r0, r0, r3
 80010ba:	4152      	adcs	r2, r2
 80010bc:	0b43      	lsrs	r3, r0, #13
 80010be:	428b      	cmp	r3, r1
 80010c0:	d301      	bcc.n	80010c6 <__udivsi3+0x5e>
 80010c2:	034b      	lsls	r3, r1, #13
 80010c4:	1ac0      	subs	r0, r0, r3
 80010c6:	4152      	adcs	r2, r2
 80010c8:	0b03      	lsrs	r3, r0, #12
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d301      	bcc.n	80010d2 <__udivsi3+0x6a>
 80010ce:	030b      	lsls	r3, r1, #12
 80010d0:	1ac0      	subs	r0, r0, r3
 80010d2:	4152      	adcs	r2, r2
 80010d4:	0ac3      	lsrs	r3, r0, #11
 80010d6:	428b      	cmp	r3, r1
 80010d8:	d301      	bcc.n	80010de <__udivsi3+0x76>
 80010da:	02cb      	lsls	r3, r1, #11
 80010dc:	1ac0      	subs	r0, r0, r3
 80010de:	4152      	adcs	r2, r2
 80010e0:	0a83      	lsrs	r3, r0, #10
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d301      	bcc.n	80010ea <__udivsi3+0x82>
 80010e6:	028b      	lsls	r3, r1, #10
 80010e8:	1ac0      	subs	r0, r0, r3
 80010ea:	4152      	adcs	r2, r2
 80010ec:	0a43      	lsrs	r3, r0, #9
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d301      	bcc.n	80010f6 <__udivsi3+0x8e>
 80010f2:	024b      	lsls	r3, r1, #9
 80010f4:	1ac0      	subs	r0, r0, r3
 80010f6:	4152      	adcs	r2, r2
 80010f8:	0a03      	lsrs	r3, r0, #8
 80010fa:	428b      	cmp	r3, r1
 80010fc:	d301      	bcc.n	8001102 <__udivsi3+0x9a>
 80010fe:	020b      	lsls	r3, r1, #8
 8001100:	1ac0      	subs	r0, r0, r3
 8001102:	4152      	adcs	r2, r2
 8001104:	d2cd      	bcs.n	80010a2 <__udivsi3+0x3a>
 8001106:	09c3      	lsrs	r3, r0, #7
 8001108:	428b      	cmp	r3, r1
 800110a:	d301      	bcc.n	8001110 <__udivsi3+0xa8>
 800110c:	01cb      	lsls	r3, r1, #7
 800110e:	1ac0      	subs	r0, r0, r3
 8001110:	4152      	adcs	r2, r2
 8001112:	0983      	lsrs	r3, r0, #6
 8001114:	428b      	cmp	r3, r1
 8001116:	d301      	bcc.n	800111c <__udivsi3+0xb4>
 8001118:	018b      	lsls	r3, r1, #6
 800111a:	1ac0      	subs	r0, r0, r3
 800111c:	4152      	adcs	r2, r2
 800111e:	0943      	lsrs	r3, r0, #5
 8001120:	428b      	cmp	r3, r1
 8001122:	d301      	bcc.n	8001128 <__udivsi3+0xc0>
 8001124:	014b      	lsls	r3, r1, #5
 8001126:	1ac0      	subs	r0, r0, r3
 8001128:	4152      	adcs	r2, r2
 800112a:	0903      	lsrs	r3, r0, #4
 800112c:	428b      	cmp	r3, r1
 800112e:	d301      	bcc.n	8001134 <__udivsi3+0xcc>
 8001130:	010b      	lsls	r3, r1, #4
 8001132:	1ac0      	subs	r0, r0, r3
 8001134:	4152      	adcs	r2, r2
 8001136:	08c3      	lsrs	r3, r0, #3
 8001138:	428b      	cmp	r3, r1
 800113a:	d301      	bcc.n	8001140 <__udivsi3+0xd8>
 800113c:	00cb      	lsls	r3, r1, #3
 800113e:	1ac0      	subs	r0, r0, r3
 8001140:	4152      	adcs	r2, r2
 8001142:	0883      	lsrs	r3, r0, #2
 8001144:	428b      	cmp	r3, r1
 8001146:	d301      	bcc.n	800114c <__udivsi3+0xe4>
 8001148:	008b      	lsls	r3, r1, #2
 800114a:	1ac0      	subs	r0, r0, r3
 800114c:	4152      	adcs	r2, r2
 800114e:	0843      	lsrs	r3, r0, #1
 8001150:	428b      	cmp	r3, r1
 8001152:	d301      	bcc.n	8001158 <__udivsi3+0xf0>
 8001154:	004b      	lsls	r3, r1, #1
 8001156:	1ac0      	subs	r0, r0, r3
 8001158:	4152      	adcs	r2, r2
 800115a:	1a41      	subs	r1, r0, r1
 800115c:	d200      	bcs.n	8001160 <__udivsi3+0xf8>
 800115e:	4601      	mov	r1, r0
 8001160:	4152      	adcs	r2, r2
 8001162:	4610      	mov	r0, r2
 8001164:	4770      	bx	lr
 8001166:	e7ff      	b.n	8001168 <__udivsi3+0x100>
 8001168:	b501      	push	{r0, lr}
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f8f0 	bl	8001350 <__aeabi_idiv0>
 8001170:	bd02      	pop	{r1, pc}
 8001172:	46c0      	nop			; (mov r8, r8)

08001174 <__aeabi_uidivmod>:
 8001174:	2900      	cmp	r1, #0
 8001176:	d0f7      	beq.n	8001168 <__udivsi3+0x100>
 8001178:	e776      	b.n	8001068 <__udivsi3>
 800117a:	4770      	bx	lr

0800117c <__divsi3>:
 800117c:	4603      	mov	r3, r0
 800117e:	430b      	orrs	r3, r1
 8001180:	d47f      	bmi.n	8001282 <__divsi3+0x106>
 8001182:	2200      	movs	r2, #0
 8001184:	0843      	lsrs	r3, r0, #1
 8001186:	428b      	cmp	r3, r1
 8001188:	d374      	bcc.n	8001274 <__divsi3+0xf8>
 800118a:	0903      	lsrs	r3, r0, #4
 800118c:	428b      	cmp	r3, r1
 800118e:	d35f      	bcc.n	8001250 <__divsi3+0xd4>
 8001190:	0a03      	lsrs	r3, r0, #8
 8001192:	428b      	cmp	r3, r1
 8001194:	d344      	bcc.n	8001220 <__divsi3+0xa4>
 8001196:	0b03      	lsrs	r3, r0, #12
 8001198:	428b      	cmp	r3, r1
 800119a:	d328      	bcc.n	80011ee <__divsi3+0x72>
 800119c:	0c03      	lsrs	r3, r0, #16
 800119e:	428b      	cmp	r3, r1
 80011a0:	d30d      	bcc.n	80011be <__divsi3+0x42>
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	0209      	lsls	r1, r1, #8
 80011a6:	ba12      	rev	r2, r2
 80011a8:	0c03      	lsrs	r3, r0, #16
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d302      	bcc.n	80011b4 <__divsi3+0x38>
 80011ae:	1212      	asrs	r2, r2, #8
 80011b0:	0209      	lsls	r1, r1, #8
 80011b2:	d065      	beq.n	8001280 <__divsi3+0x104>
 80011b4:	0b03      	lsrs	r3, r0, #12
 80011b6:	428b      	cmp	r3, r1
 80011b8:	d319      	bcc.n	80011ee <__divsi3+0x72>
 80011ba:	e000      	b.n	80011be <__divsi3+0x42>
 80011bc:	0a09      	lsrs	r1, r1, #8
 80011be:	0bc3      	lsrs	r3, r0, #15
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d301      	bcc.n	80011c8 <__divsi3+0x4c>
 80011c4:	03cb      	lsls	r3, r1, #15
 80011c6:	1ac0      	subs	r0, r0, r3
 80011c8:	4152      	adcs	r2, r2
 80011ca:	0b83      	lsrs	r3, r0, #14
 80011cc:	428b      	cmp	r3, r1
 80011ce:	d301      	bcc.n	80011d4 <__divsi3+0x58>
 80011d0:	038b      	lsls	r3, r1, #14
 80011d2:	1ac0      	subs	r0, r0, r3
 80011d4:	4152      	adcs	r2, r2
 80011d6:	0b43      	lsrs	r3, r0, #13
 80011d8:	428b      	cmp	r3, r1
 80011da:	d301      	bcc.n	80011e0 <__divsi3+0x64>
 80011dc:	034b      	lsls	r3, r1, #13
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	4152      	adcs	r2, r2
 80011e2:	0b03      	lsrs	r3, r0, #12
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d301      	bcc.n	80011ec <__divsi3+0x70>
 80011e8:	030b      	lsls	r3, r1, #12
 80011ea:	1ac0      	subs	r0, r0, r3
 80011ec:	4152      	adcs	r2, r2
 80011ee:	0ac3      	lsrs	r3, r0, #11
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d301      	bcc.n	80011f8 <__divsi3+0x7c>
 80011f4:	02cb      	lsls	r3, r1, #11
 80011f6:	1ac0      	subs	r0, r0, r3
 80011f8:	4152      	adcs	r2, r2
 80011fa:	0a83      	lsrs	r3, r0, #10
 80011fc:	428b      	cmp	r3, r1
 80011fe:	d301      	bcc.n	8001204 <__divsi3+0x88>
 8001200:	028b      	lsls	r3, r1, #10
 8001202:	1ac0      	subs	r0, r0, r3
 8001204:	4152      	adcs	r2, r2
 8001206:	0a43      	lsrs	r3, r0, #9
 8001208:	428b      	cmp	r3, r1
 800120a:	d301      	bcc.n	8001210 <__divsi3+0x94>
 800120c:	024b      	lsls	r3, r1, #9
 800120e:	1ac0      	subs	r0, r0, r3
 8001210:	4152      	adcs	r2, r2
 8001212:	0a03      	lsrs	r3, r0, #8
 8001214:	428b      	cmp	r3, r1
 8001216:	d301      	bcc.n	800121c <__divsi3+0xa0>
 8001218:	020b      	lsls	r3, r1, #8
 800121a:	1ac0      	subs	r0, r0, r3
 800121c:	4152      	adcs	r2, r2
 800121e:	d2cd      	bcs.n	80011bc <__divsi3+0x40>
 8001220:	09c3      	lsrs	r3, r0, #7
 8001222:	428b      	cmp	r3, r1
 8001224:	d301      	bcc.n	800122a <__divsi3+0xae>
 8001226:	01cb      	lsls	r3, r1, #7
 8001228:	1ac0      	subs	r0, r0, r3
 800122a:	4152      	adcs	r2, r2
 800122c:	0983      	lsrs	r3, r0, #6
 800122e:	428b      	cmp	r3, r1
 8001230:	d301      	bcc.n	8001236 <__divsi3+0xba>
 8001232:	018b      	lsls	r3, r1, #6
 8001234:	1ac0      	subs	r0, r0, r3
 8001236:	4152      	adcs	r2, r2
 8001238:	0943      	lsrs	r3, r0, #5
 800123a:	428b      	cmp	r3, r1
 800123c:	d301      	bcc.n	8001242 <__divsi3+0xc6>
 800123e:	014b      	lsls	r3, r1, #5
 8001240:	1ac0      	subs	r0, r0, r3
 8001242:	4152      	adcs	r2, r2
 8001244:	0903      	lsrs	r3, r0, #4
 8001246:	428b      	cmp	r3, r1
 8001248:	d301      	bcc.n	800124e <__divsi3+0xd2>
 800124a:	010b      	lsls	r3, r1, #4
 800124c:	1ac0      	subs	r0, r0, r3
 800124e:	4152      	adcs	r2, r2
 8001250:	08c3      	lsrs	r3, r0, #3
 8001252:	428b      	cmp	r3, r1
 8001254:	d301      	bcc.n	800125a <__divsi3+0xde>
 8001256:	00cb      	lsls	r3, r1, #3
 8001258:	1ac0      	subs	r0, r0, r3
 800125a:	4152      	adcs	r2, r2
 800125c:	0883      	lsrs	r3, r0, #2
 800125e:	428b      	cmp	r3, r1
 8001260:	d301      	bcc.n	8001266 <__divsi3+0xea>
 8001262:	008b      	lsls	r3, r1, #2
 8001264:	1ac0      	subs	r0, r0, r3
 8001266:	4152      	adcs	r2, r2
 8001268:	0843      	lsrs	r3, r0, #1
 800126a:	428b      	cmp	r3, r1
 800126c:	d301      	bcc.n	8001272 <__divsi3+0xf6>
 800126e:	004b      	lsls	r3, r1, #1
 8001270:	1ac0      	subs	r0, r0, r3
 8001272:	4152      	adcs	r2, r2
 8001274:	1a41      	subs	r1, r0, r1
 8001276:	d200      	bcs.n	800127a <__divsi3+0xfe>
 8001278:	4601      	mov	r1, r0
 800127a:	4152      	adcs	r2, r2
 800127c:	4610      	mov	r0, r2
 800127e:	4770      	bx	lr
 8001280:	e05d      	b.n	800133e <__divsi3+0x1c2>
 8001282:	0fca      	lsrs	r2, r1, #31
 8001284:	d000      	beq.n	8001288 <__divsi3+0x10c>
 8001286:	4249      	negs	r1, r1
 8001288:	1003      	asrs	r3, r0, #32
 800128a:	d300      	bcc.n	800128e <__divsi3+0x112>
 800128c:	4240      	negs	r0, r0
 800128e:	4053      	eors	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	469c      	mov	ip, r3
 8001294:	0903      	lsrs	r3, r0, #4
 8001296:	428b      	cmp	r3, r1
 8001298:	d32d      	bcc.n	80012f6 <__divsi3+0x17a>
 800129a:	0a03      	lsrs	r3, r0, #8
 800129c:	428b      	cmp	r3, r1
 800129e:	d312      	bcc.n	80012c6 <__divsi3+0x14a>
 80012a0:	22fc      	movs	r2, #252	; 0xfc
 80012a2:	0189      	lsls	r1, r1, #6
 80012a4:	ba12      	rev	r2, r2
 80012a6:	0a03      	lsrs	r3, r0, #8
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d30c      	bcc.n	80012c6 <__divsi3+0x14a>
 80012ac:	0189      	lsls	r1, r1, #6
 80012ae:	1192      	asrs	r2, r2, #6
 80012b0:	428b      	cmp	r3, r1
 80012b2:	d308      	bcc.n	80012c6 <__divsi3+0x14a>
 80012b4:	0189      	lsls	r1, r1, #6
 80012b6:	1192      	asrs	r2, r2, #6
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d304      	bcc.n	80012c6 <__divsi3+0x14a>
 80012bc:	0189      	lsls	r1, r1, #6
 80012be:	d03a      	beq.n	8001336 <__divsi3+0x1ba>
 80012c0:	1192      	asrs	r2, r2, #6
 80012c2:	e000      	b.n	80012c6 <__divsi3+0x14a>
 80012c4:	0989      	lsrs	r1, r1, #6
 80012c6:	09c3      	lsrs	r3, r0, #7
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d301      	bcc.n	80012d0 <__divsi3+0x154>
 80012cc:	01cb      	lsls	r3, r1, #7
 80012ce:	1ac0      	subs	r0, r0, r3
 80012d0:	4152      	adcs	r2, r2
 80012d2:	0983      	lsrs	r3, r0, #6
 80012d4:	428b      	cmp	r3, r1
 80012d6:	d301      	bcc.n	80012dc <__divsi3+0x160>
 80012d8:	018b      	lsls	r3, r1, #6
 80012da:	1ac0      	subs	r0, r0, r3
 80012dc:	4152      	adcs	r2, r2
 80012de:	0943      	lsrs	r3, r0, #5
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d301      	bcc.n	80012e8 <__divsi3+0x16c>
 80012e4:	014b      	lsls	r3, r1, #5
 80012e6:	1ac0      	subs	r0, r0, r3
 80012e8:	4152      	adcs	r2, r2
 80012ea:	0903      	lsrs	r3, r0, #4
 80012ec:	428b      	cmp	r3, r1
 80012ee:	d301      	bcc.n	80012f4 <__divsi3+0x178>
 80012f0:	010b      	lsls	r3, r1, #4
 80012f2:	1ac0      	subs	r0, r0, r3
 80012f4:	4152      	adcs	r2, r2
 80012f6:	08c3      	lsrs	r3, r0, #3
 80012f8:	428b      	cmp	r3, r1
 80012fa:	d301      	bcc.n	8001300 <__divsi3+0x184>
 80012fc:	00cb      	lsls	r3, r1, #3
 80012fe:	1ac0      	subs	r0, r0, r3
 8001300:	4152      	adcs	r2, r2
 8001302:	0883      	lsrs	r3, r0, #2
 8001304:	428b      	cmp	r3, r1
 8001306:	d301      	bcc.n	800130c <__divsi3+0x190>
 8001308:	008b      	lsls	r3, r1, #2
 800130a:	1ac0      	subs	r0, r0, r3
 800130c:	4152      	adcs	r2, r2
 800130e:	d2d9      	bcs.n	80012c4 <__divsi3+0x148>
 8001310:	0843      	lsrs	r3, r0, #1
 8001312:	428b      	cmp	r3, r1
 8001314:	d301      	bcc.n	800131a <__divsi3+0x19e>
 8001316:	004b      	lsls	r3, r1, #1
 8001318:	1ac0      	subs	r0, r0, r3
 800131a:	4152      	adcs	r2, r2
 800131c:	1a41      	subs	r1, r0, r1
 800131e:	d200      	bcs.n	8001322 <__divsi3+0x1a6>
 8001320:	4601      	mov	r1, r0
 8001322:	4663      	mov	r3, ip
 8001324:	4152      	adcs	r2, r2
 8001326:	105b      	asrs	r3, r3, #1
 8001328:	4610      	mov	r0, r2
 800132a:	d301      	bcc.n	8001330 <__divsi3+0x1b4>
 800132c:	4240      	negs	r0, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d500      	bpl.n	8001334 <__divsi3+0x1b8>
 8001332:	4249      	negs	r1, r1
 8001334:	4770      	bx	lr
 8001336:	4663      	mov	r3, ip
 8001338:	105b      	asrs	r3, r3, #1
 800133a:	d300      	bcc.n	800133e <__divsi3+0x1c2>
 800133c:	4240      	negs	r0, r0
 800133e:	b501      	push	{r0, lr}
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f805 	bl	8001350 <__aeabi_idiv0>
 8001346:	bd02      	pop	{r1, pc}

08001348 <__aeabi_idivmod>:
 8001348:	2900      	cmp	r1, #0
 800134a:	d0f8      	beq.n	800133e <__divsi3+0x1c2>
 800134c:	e716      	b.n	800117c <__divsi3>
 800134e:	4770      	bx	lr

08001350 <__aeabi_idiv0>:
 8001350:	4770      	bx	lr
 8001352:	46c0      	nop			; (mov r8, r8)

08001354 <__aeabi_uldivmod>:
 8001354:	2b00      	cmp	r3, #0
 8001356:	d111      	bne.n	800137c <__aeabi_uldivmod+0x28>
 8001358:	2a00      	cmp	r2, #0
 800135a:	d10f      	bne.n	800137c <__aeabi_uldivmod+0x28>
 800135c:	2900      	cmp	r1, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_uldivmod+0xe>
 8001360:	2800      	cmp	r0, #0
 8001362:	d002      	beq.n	800136a <__aeabi_uldivmod+0x16>
 8001364:	2100      	movs	r1, #0
 8001366:	43c9      	mvns	r1, r1
 8001368:	0008      	movs	r0, r1
 800136a:	b407      	push	{r0, r1, r2}
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <__aeabi_uldivmod+0x24>)
 800136e:	a102      	add	r1, pc, #8	; (adr r1, 8001378 <__aeabi_uldivmod+0x24>)
 8001370:	1840      	adds	r0, r0, r1
 8001372:	9002      	str	r0, [sp, #8]
 8001374:	bd03      	pop	{r0, r1, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	ffffffd9 	.word	0xffffffd9
 800137c:	b403      	push	{r0, r1}
 800137e:	4668      	mov	r0, sp
 8001380:	b501      	push	{r0, lr}
 8001382:	9802      	ldr	r0, [sp, #8]
 8001384:	f000 f806 	bl	8001394 <__udivmoddi4>
 8001388:	9b01      	ldr	r3, [sp, #4]
 800138a:	469e      	mov	lr, r3
 800138c:	b002      	add	sp, #8
 800138e:	bc0c      	pop	{r2, r3}
 8001390:	4770      	bx	lr
 8001392:	46c0      	nop			; (mov r8, r8)

08001394 <__udivmoddi4>:
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	4657      	mov	r7, sl
 8001398:	464e      	mov	r6, r9
 800139a:	4645      	mov	r5, r8
 800139c:	46de      	mov	lr, fp
 800139e:	b5e0      	push	{r5, r6, r7, lr}
 80013a0:	0004      	movs	r4, r0
 80013a2:	000d      	movs	r5, r1
 80013a4:	4692      	mov	sl, r2
 80013a6:	4699      	mov	r9, r3
 80013a8:	b083      	sub	sp, #12
 80013aa:	428b      	cmp	r3, r1
 80013ac:	d830      	bhi.n	8001410 <__udivmoddi4+0x7c>
 80013ae:	d02d      	beq.n	800140c <__udivmoddi4+0x78>
 80013b0:	4649      	mov	r1, r9
 80013b2:	4650      	mov	r0, sl
 80013b4:	f000 f8ba 	bl	800152c <__clzdi2>
 80013b8:	0029      	movs	r1, r5
 80013ba:	0006      	movs	r6, r0
 80013bc:	0020      	movs	r0, r4
 80013be:	f000 f8b5 	bl	800152c <__clzdi2>
 80013c2:	1a33      	subs	r3, r6, r0
 80013c4:	4698      	mov	r8, r3
 80013c6:	3b20      	subs	r3, #32
 80013c8:	469b      	mov	fp, r3
 80013ca:	d433      	bmi.n	8001434 <__udivmoddi4+0xa0>
 80013cc:	465a      	mov	r2, fp
 80013ce:	4653      	mov	r3, sl
 80013d0:	4093      	lsls	r3, r2
 80013d2:	4642      	mov	r2, r8
 80013d4:	001f      	movs	r7, r3
 80013d6:	4653      	mov	r3, sl
 80013d8:	4093      	lsls	r3, r2
 80013da:	001e      	movs	r6, r3
 80013dc:	42af      	cmp	r7, r5
 80013de:	d83a      	bhi.n	8001456 <__udivmoddi4+0xc2>
 80013e0:	42af      	cmp	r7, r5
 80013e2:	d100      	bne.n	80013e6 <__udivmoddi4+0x52>
 80013e4:	e078      	b.n	80014d8 <__udivmoddi4+0x144>
 80013e6:	465b      	mov	r3, fp
 80013e8:	1ba4      	subs	r4, r4, r6
 80013ea:	41bd      	sbcs	r5, r7
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da00      	bge.n	80013f2 <__udivmoddi4+0x5e>
 80013f0:	e075      	b.n	80014de <__udivmoddi4+0x14a>
 80013f2:	2200      	movs	r2, #0
 80013f4:	2300      	movs	r3, #0
 80013f6:	9200      	str	r2, [sp, #0]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2301      	movs	r3, #1
 80013fc:	465a      	mov	r2, fp
 80013fe:	4093      	lsls	r3, r2
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2301      	movs	r3, #1
 8001404:	4642      	mov	r2, r8
 8001406:	4093      	lsls	r3, r2
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	e028      	b.n	800145e <__udivmoddi4+0xca>
 800140c:	4282      	cmp	r2, r0
 800140e:	d9cf      	bls.n	80013b0 <__udivmoddi4+0x1c>
 8001410:	2200      	movs	r2, #0
 8001412:	2300      	movs	r3, #0
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <__udivmoddi4+0x8e>
 800141e:	601c      	str	r4, [r3, #0]
 8001420:	605d      	str	r5, [r3, #4]
 8001422:	9800      	ldr	r0, [sp, #0]
 8001424:	9901      	ldr	r1, [sp, #4]
 8001426:	b003      	add	sp, #12
 8001428:	bcf0      	pop	{r4, r5, r6, r7}
 800142a:	46bb      	mov	fp, r7
 800142c:	46b2      	mov	sl, r6
 800142e:	46a9      	mov	r9, r5
 8001430:	46a0      	mov	r8, r4
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001434:	4642      	mov	r2, r8
 8001436:	2320      	movs	r3, #32
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	4652      	mov	r2, sl
 800143c:	40da      	lsrs	r2, r3
 800143e:	4641      	mov	r1, r8
 8001440:	0013      	movs	r3, r2
 8001442:	464a      	mov	r2, r9
 8001444:	408a      	lsls	r2, r1
 8001446:	0017      	movs	r7, r2
 8001448:	4642      	mov	r2, r8
 800144a:	431f      	orrs	r7, r3
 800144c:	4653      	mov	r3, sl
 800144e:	4093      	lsls	r3, r2
 8001450:	001e      	movs	r6, r3
 8001452:	42af      	cmp	r7, r5
 8001454:	d9c4      	bls.n	80013e0 <__udivmoddi4+0x4c>
 8001456:	2200      	movs	r2, #0
 8001458:	2300      	movs	r3, #0
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	4643      	mov	r3, r8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0d9      	beq.n	8001418 <__udivmoddi4+0x84>
 8001464:	07fb      	lsls	r3, r7, #31
 8001466:	0872      	lsrs	r2, r6, #1
 8001468:	431a      	orrs	r2, r3
 800146a:	4646      	mov	r6, r8
 800146c:	087b      	lsrs	r3, r7, #1
 800146e:	e00e      	b.n	800148e <__udivmoddi4+0xfa>
 8001470:	42ab      	cmp	r3, r5
 8001472:	d101      	bne.n	8001478 <__udivmoddi4+0xe4>
 8001474:	42a2      	cmp	r2, r4
 8001476:	d80c      	bhi.n	8001492 <__udivmoddi4+0xfe>
 8001478:	1aa4      	subs	r4, r4, r2
 800147a:	419d      	sbcs	r5, r3
 800147c:	2001      	movs	r0, #1
 800147e:	1924      	adds	r4, r4, r4
 8001480:	416d      	adcs	r5, r5
 8001482:	2100      	movs	r1, #0
 8001484:	3e01      	subs	r6, #1
 8001486:	1824      	adds	r4, r4, r0
 8001488:	414d      	adcs	r5, r1
 800148a:	2e00      	cmp	r6, #0
 800148c:	d006      	beq.n	800149c <__udivmoddi4+0x108>
 800148e:	42ab      	cmp	r3, r5
 8001490:	d9ee      	bls.n	8001470 <__udivmoddi4+0xdc>
 8001492:	3e01      	subs	r6, #1
 8001494:	1924      	adds	r4, r4, r4
 8001496:	416d      	adcs	r5, r5
 8001498:	2e00      	cmp	r6, #0
 800149a:	d1f8      	bne.n	800148e <__udivmoddi4+0xfa>
 800149c:	9800      	ldr	r0, [sp, #0]
 800149e:	9901      	ldr	r1, [sp, #4]
 80014a0:	465b      	mov	r3, fp
 80014a2:	1900      	adds	r0, r0, r4
 80014a4:	4169      	adcs	r1, r5
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db24      	blt.n	80014f4 <__udivmoddi4+0x160>
 80014aa:	002b      	movs	r3, r5
 80014ac:	465a      	mov	r2, fp
 80014ae:	4644      	mov	r4, r8
 80014b0:	40d3      	lsrs	r3, r2
 80014b2:	002a      	movs	r2, r5
 80014b4:	40e2      	lsrs	r2, r4
 80014b6:	001c      	movs	r4, r3
 80014b8:	465b      	mov	r3, fp
 80014ba:	0015      	movs	r5, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db2a      	blt.n	8001516 <__udivmoddi4+0x182>
 80014c0:	0026      	movs	r6, r4
 80014c2:	409e      	lsls	r6, r3
 80014c4:	0033      	movs	r3, r6
 80014c6:	0026      	movs	r6, r4
 80014c8:	4647      	mov	r7, r8
 80014ca:	40be      	lsls	r6, r7
 80014cc:	0032      	movs	r2, r6
 80014ce:	1a80      	subs	r0, r0, r2
 80014d0:	4199      	sbcs	r1, r3
 80014d2:	9000      	str	r0, [sp, #0]
 80014d4:	9101      	str	r1, [sp, #4]
 80014d6:	e79f      	b.n	8001418 <__udivmoddi4+0x84>
 80014d8:	42a3      	cmp	r3, r4
 80014da:	d8bc      	bhi.n	8001456 <__udivmoddi4+0xc2>
 80014dc:	e783      	b.n	80013e6 <__udivmoddi4+0x52>
 80014de:	4642      	mov	r2, r8
 80014e0:	2320      	movs	r3, #32
 80014e2:	2100      	movs	r1, #0
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	9100      	str	r1, [sp, #0]
 80014ea:	9201      	str	r2, [sp, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	40da      	lsrs	r2, r3
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	e786      	b.n	8001402 <__udivmoddi4+0x6e>
 80014f4:	4642      	mov	r2, r8
 80014f6:	2320      	movs	r3, #32
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	002a      	movs	r2, r5
 80014fc:	4646      	mov	r6, r8
 80014fe:	409a      	lsls	r2, r3
 8001500:	0023      	movs	r3, r4
 8001502:	40f3      	lsrs	r3, r6
 8001504:	4644      	mov	r4, r8
 8001506:	4313      	orrs	r3, r2
 8001508:	002a      	movs	r2, r5
 800150a:	40e2      	lsrs	r2, r4
 800150c:	001c      	movs	r4, r3
 800150e:	465b      	mov	r3, fp
 8001510:	0015      	movs	r5, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	dad4      	bge.n	80014c0 <__udivmoddi4+0x12c>
 8001516:	4642      	mov	r2, r8
 8001518:	002f      	movs	r7, r5
 800151a:	2320      	movs	r3, #32
 800151c:	0026      	movs	r6, r4
 800151e:	4097      	lsls	r7, r2
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	40de      	lsrs	r6, r3
 8001524:	003b      	movs	r3, r7
 8001526:	4333      	orrs	r3, r6
 8001528:	e7cd      	b.n	80014c6 <__udivmoddi4+0x132>
 800152a:	46c0      	nop			; (mov r8, r8)

0800152c <__clzdi2>:
 800152c:	b510      	push	{r4, lr}
 800152e:	2900      	cmp	r1, #0
 8001530:	d103      	bne.n	800153a <__clzdi2+0xe>
 8001532:	f000 f807 	bl	8001544 <__clzsi2>
 8001536:	3020      	adds	r0, #32
 8001538:	e002      	b.n	8001540 <__clzdi2+0x14>
 800153a:	0008      	movs	r0, r1
 800153c:	f000 f802 	bl	8001544 <__clzsi2>
 8001540:	bd10      	pop	{r4, pc}
 8001542:	46c0      	nop			; (mov r8, r8)

08001544 <__clzsi2>:
 8001544:	211c      	movs	r1, #28
 8001546:	2301      	movs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	4298      	cmp	r0, r3
 800154c:	d301      	bcc.n	8001552 <__clzsi2+0xe>
 800154e:	0c00      	lsrs	r0, r0, #16
 8001550:	3910      	subs	r1, #16
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	4298      	cmp	r0, r3
 8001556:	d301      	bcc.n	800155c <__clzsi2+0x18>
 8001558:	0a00      	lsrs	r0, r0, #8
 800155a:	3908      	subs	r1, #8
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	4298      	cmp	r0, r3
 8001560:	d301      	bcc.n	8001566 <__clzsi2+0x22>
 8001562:	0900      	lsrs	r0, r0, #4
 8001564:	3904      	subs	r1, #4
 8001566:	a202      	add	r2, pc, #8	; (adr r2, 8001570 <__clzsi2+0x2c>)
 8001568:	5c10      	ldrb	r0, [r2, r0]
 800156a:	1840      	adds	r0, r0, r1
 800156c:	4770      	bx	lr
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	02020304 	.word	0x02020304
 8001574:	01010101 	.word	0x01010101
	...

08001580 <go2APP>:
		TurnOff
};

//Function untuk jump to user app
void go2APP(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	//Check
	if(((*(__IO uint32_t*) FLASH_APP_ADDR) & 0x2FFE0000) == 0x20000000)
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <go2APP+0x54>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <go2APP+0x58>)
 800158c:	401a      	ands	r2, r3
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	059b      	lsls	r3, r3, #22
 8001592:	429a      	cmp	r2, r3
 8001594:	d115      	bne.n	80015c2 <go2APP+0x42>
	{
		printf("\r\nApp Start.... \r\n");
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <go2APP+0x5c>)
 8001598:	0018      	movs	r0, r3
 800159a:	f003 fa0b 	bl	80049b4 <puts>
		HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f000 fbd0 	bl	8001d44 <HAL_Delay>
		//Jump to User Application //
		JumpAddress = *(__IO uint32_t*)(FLASH_APP_ADDR + 4);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <go2APP+0x60>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	607b      	str	r3, [r7, #4]
		Jump_To_Application = (pFunction) JumpAddress;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]

		//Initialize user application's Stack Pointer//
		//__set_MSP(*(__IO uint32_t*)FLASH_APP_ADDR);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80015ae:	23a0      	movs	r3, #160	; 0xa0
 80015b0:	05db      	lsls	r3, r3, #23
 80015b2:	2201      	movs	r2, #1
 80015b4:	2120      	movs	r1, #32
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 fe00 	bl	80021bc <HAL_GPIO_WritePin>
		Jump_To_Application();
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4798      	blx	r3
	}
	else
	{
		printf("No APP Found !! \r\n");
	}
}
 80015c0:	e003      	b.n	80015ca <go2APP+0x4a>
		printf("No APP Found !! \r\n");
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <go2APP+0x64>)
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 f9f5 	bl	80049b4 <puts>
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	08007800 	.word	0x08007800
 80015d8:	2ffe0000 	.word	0x2ffe0000
 80015dc:	0800595c 	.word	0x0800595c
 80015e0:	08007804 	.word	0x08007804
 80015e4:	08005970 	.word	0x08005970

080015e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx=0; DataIdx<len; DataIdx++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e00a      	b.n	8001610 <_write+0x28>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)ptr++, 1, 100);
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	1c4b      	adds	r3, r1, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <_write+0x3c>)
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	2201      	movs	r2, #1
 8001606:	f002 fad9 	bl	8003bbc <HAL_UART_Transmit>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbf0      	blt.n	80015fa <_write+0x12>
	}
	return len;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b006      	add	sp, #24
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	20000270 	.word	0x20000270

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f000 fb04 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f848 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f000 f916 	bl	8001864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001638:	f000 f8c6 	bl	80017c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800163c:	f000 f88a 	bl	8001754 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nBootloader Start \r\n");
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <main+0x80>)
 8001642:	0018      	movs	r0, r3
 8001644:	f003 f9b6 	bl	80049b4 <puts>
  printf("Program Berjalan Pada Mode Bootloader \r\n");
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <main+0x84>)
 800164a:	0018      	movs	r0, r3
 800164c:	f003 f9b2 	bl	80049b4 <puts>
  printf("LED PA 5 ON\r\n");
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <main+0x88>)
 8001652:	0018      	movs	r0, r3
 8001654:	f003 f9ae 	bl	80049b4 <puts>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001658:	23a0      	movs	r3, #160	; 0xa0
 800165a:	05db      	lsls	r3, r3, #23
 800165c:	2201      	movs	r2, #1
 800165e:	2120      	movs	r1, #32
 8001660:	0018      	movs	r0, r3
 8001662:	f000 fdab 	bl	80021bc <HAL_GPIO_WritePin>
  printf("Send Data 0x50 dari SPI Master untuk melompat ke Application Program\r\n");
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <main+0x8c>)
 8001668:	0018      	movs	r0, r3
 800166a:	f003 f9a3 	bl	80049b4 <puts>
  HAL_SPI_Receive(&hspi1, &starAPP, 1, HAL_MAX_DELAY);
 800166e:	2301      	movs	r3, #1
 8001670:	425b      	negs	r3, r3
 8001672:	4911      	ldr	r1, [pc, #68]	; (80016b8 <main+0x90>)
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <main+0x94>)
 8001676:	2201      	movs	r2, #1
 8001678:	f001 fd58 	bl	800312c <HAL_SPI_Receive>
  while(starAPP != 0x50);
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <main+0x90>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b50      	cmp	r3, #80	; 0x50
 8001684:	d1fb      	bne.n	800167e <main+0x56>
  printf("Star APP = %x \r\n",starAPP);
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <main+0x90>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	001a      	movs	r2, r3
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <main+0x98>)
 800168e:	0011      	movs	r1, r2
 8001690:	0018      	movs	r0, r3
 8001692:	f003 f903 	bl	800489c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  go2APP();
 8001696:	f7ff ff73 	bl	8001580 <go2APP>
	  HAL_Delay(1000);
 800169a:	23fa      	movs	r3, #250	; 0xfa
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 fb50 	bl	8001d44 <HAL_Delay>
	  go2APP();
 80016a4:	e7f7      	b.n	8001696 <main+0x6e>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	08005984 	.word	0x08005984
 80016ac:	0800599c 	.word	0x0800599c
 80016b0:	080059c4 	.word	0x080059c4
 80016b4:	080059d4 	.word	0x080059d4
 80016b8:	20000304 	.word	0x20000304
 80016bc:	2000020c 	.word	0x2000020c
 80016c0:	08005a1c 	.word	0x08005a1c

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b093      	sub	sp, #76	; 0x4c
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	2410      	movs	r4, #16
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	0018      	movs	r0, r3
 80016d0:	2338      	movs	r3, #56	; 0x38
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f003 f8d9 	bl	800488c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016da:	003b      	movs	r3, r7
 80016dc:	0018      	movs	r0, r3
 80016de:	2310      	movs	r3, #16
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f003 f8d2 	bl	800488c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	0018      	movs	r0, r3
 80016ee:	f000 fd9d 	bl	800222c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	0052      	lsls	r2, r2, #1
 80016fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	f000 fdd5 	bl	80022c4 <HAL_RCC_OscConfig>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800171e:	f000 f8f1 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	003b      	movs	r3, r7
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001728:	003b      	movs	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172e:	003b      	movs	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	003b      	movs	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173a:	003b      	movs	r3, r7
 800173c:	2100      	movs	r1, #0
 800173e:	0018      	movs	r0, r3
 8001740:	f001 f8da 	bl	80028f8 <HAL_RCC_ClockConfig>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001748:	f000 f8dc 	bl	8001904 <Error_Handler>
  }
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b013      	add	sp, #76	; 0x4c
 8001752:	bd90      	pop	{r4, r7, pc}

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_SPI1_Init+0x6c>)
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <MX_SPI1_Init+0x70>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_SPI1_Init+0x6c>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_SPI1_Init+0x6c>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_SPI1_Init+0x6c>)
 800176c:	22e0      	movs	r2, #224	; 0xe0
 800176e:	00d2      	lsls	r2, r2, #3
 8001770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_SPI1_Init+0x6c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_SPI1_Init+0x6c>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_SPI1_Init+0x6c>)
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_SPI1_Init+0x6c>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_SPI1_Init+0x6c>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_SPI1_Init+0x6c>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_SPI1_Init+0x6c>)
 800179a:	2207      	movs	r2, #7
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_SPI1_Init+0x6c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_SPI1_Init+0x6c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <MX_SPI1_Init+0x6c>)
 80017ac:	0018      	movs	r0, r3
 80017ae:	f001 fc05 	bl	8002fbc <HAL_SPI_Init>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d001      	beq.n	80017ba <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80017b6:	f000 f8a5 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000020c 	.word	0x2000020c
 80017c4:	40013000 	.word	0x40013000

080017c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017ce:	4a24      	ldr	r2, [pc, #144]	; (8001860 <MX_USART2_UART_Init+0x98>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017d4:	22e1      	movs	r2, #225	; 0xe1
 80017d6:	0252      	lsls	r2, r2, #9
 80017d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_USART2_UART_Init+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_USART2_UART_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_USART2_UART_Init+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_USART2_UART_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_USART2_UART_Init+0x94>)
 8001812:	0018      	movs	r0, r3
 8001814:	f002 f97c 	bl	8003b10 <HAL_UART_Init>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d001      	beq.n	8001820 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800181c:	f000 f872 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART2_UART_Init+0x94>)
 8001822:	2100      	movs	r1, #0
 8001824:	0018      	movs	r0, r3
 8001826:	f002 ff27 	bl	8004678 <HAL_UARTEx_SetTxFifoThreshold>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800182e:	f000 f869 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_USART2_UART_Init+0x94>)
 8001834:	2100      	movs	r1, #0
 8001836:	0018      	movs	r0, r3
 8001838:	f002 ff5e 	bl	80046f8 <HAL_UARTEx_SetRxFifoThreshold>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001840:	f000 f860 	bl	8001904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <MX_USART2_UART_Init+0x94>)
 8001846:	0018      	movs	r0, r3
 8001848:	f002 fedc 	bl	8004604 <HAL_UARTEx_DisableFifoMode>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d001      	beq.n	8001854 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001850:	f000 f858 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	20000270 	.word	0x20000270
 8001860:	40004400 	.word	0x40004400

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	240c      	movs	r4, #12
 800186c:	193b      	adds	r3, r7, r4
 800186e:	0018      	movs	r0, r3
 8001870:	2314      	movs	r3, #20
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f003 f809 	bl	800488c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <MX_GPIO_Init+0x9c>)
 800187c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_GPIO_Init+0x9c>)
 8001880:	2104      	movs	r1, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <MX_GPIO_Init+0x9c>)
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_GPIO_Init+0x9c>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <MX_GPIO_Init+0x9c>)
 8001898:	2120      	movs	r1, #32
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_GPIO_Init+0x9c>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	2220      	movs	r2, #32
 80018a4:	4013      	ands	r3, r2
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_GPIO_Init+0x9c>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_GPIO_Init+0x9c>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_GPIO_Init+0x9c>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80018c2:	23a0      	movs	r3, #160	; 0xa0
 80018c4:	05db      	lsls	r3, r3, #23
 80018c6:	2200      	movs	r2, #0
 80018c8:	2120      	movs	r1, #32
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 fc76 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80018d0:	0021      	movs	r1, r4
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2220      	movs	r2, #32
 80018d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2201      	movs	r2, #1
 80018dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2202      	movs	r2, #2
 80018e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80018ea:	187a      	adds	r2, r7, r1
 80018ec:	23a0      	movs	r3, #160	; 0xa0
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 fafe 	bl	8001ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b009      	add	sp, #36	; 0x24
 80018fe:	bd90      	pop	{r4, r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x44>)
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_MspInit+0x44>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_MspInit+0x44>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2201      	movs	r2, #1
 8001928:	4013      	ands	r3, r2
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_MspInit+0x44>)
 8001930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_MspInit+0x44>)
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	430a      	orrs	r2, r1
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_MspInit+0x44>)
 800193e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	055b      	lsls	r3, r3, #21
 8001944:	4013      	ands	r3, r2
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b002      	add	sp, #8
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08b      	sub	sp, #44	; 0x2c
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	2414      	movs	r4, #20
 8001962:	193b      	adds	r3, r7, r4
 8001964:	0018      	movs	r0, r3
 8001966:	2314      	movs	r3, #20
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f002 ff8e 	bl	800488c <memset>
  if(hspi->Instance==SPI1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_SPI_MspInit+0x8c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d130      	bne.n	80019dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_SPI_MspInit+0x90>)
 800197c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_SPI_MspInit+0x90>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0149      	lsls	r1, r1, #5
 8001984:	430a      	orrs	r2, r1
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_SPI_MspInit+0x90>)
 800198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	015b      	lsls	r3, r3, #5
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_SPI_MspInit+0x90>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_SPI_MspInit+0x90>)
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_SPI_MspInit+0x90>)
 80019a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a6:	2201      	movs	r2, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80019ae:	0021      	movs	r1, r4
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	22c2      	movs	r2, #194	; 0xc2
 80019b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2202      	movs	r2, #2
 80019ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	187a      	adds	r2, r7, r1
 80019d0:	23a0      	movs	r3, #160	; 0xa0
 80019d2:	05db      	lsls	r3, r3, #23
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 fa8c 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b00b      	add	sp, #44	; 0x2c
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	40013000 	.word	0x40013000
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b097      	sub	sp, #92	; 0x5c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	2344      	movs	r3, #68	; 0x44
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	0018      	movs	r0, r3
 80019fa:	2314      	movs	r3, #20
 80019fc:	001a      	movs	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f002 ff44 	bl	800488c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	2410      	movs	r4, #16
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	0018      	movs	r0, r3
 8001a0a:	2334      	movs	r3, #52	; 0x34
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	2100      	movs	r1, #0
 8001a10:	f002 ff3c 	bl	800488c <memset>
  if(huart->Instance==USART2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_UART_MspInit+0xb8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d13e      	bne.n	8001a9c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f001 f90d 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a36:	f7ff ff65 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_UART_MspInit+0xbc>)
 8001a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_UART_MspInit+0xbc>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	0289      	lsls	r1, r1, #10
 8001a44:	430a      	orrs	r2, r1
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_UART_MspInit+0xbc>)
 8001a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_UART_MspInit+0xbc>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_UART_MspInit+0xbc>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_UART_MspInit+0xbc>)
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	2201      	movs	r2, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001a6e:	2144      	movs	r1, #68	; 0x44
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2202      	movs	r2, #2
 8001a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2201      	movs	r2, #1
 8001a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	187a      	adds	r2, r7, r1
 8001a90:	23a0      	movs	r3, #160	; 0xa0
 8001a92:	05db      	lsls	r3, r3, #23
 8001a94:	0011      	movs	r1, r2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 fa2c 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b017      	add	sp, #92	; 0x5c
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	40004400 	.word	0x40004400
 8001aa8:	40021000 	.word	0x40021000

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f91c 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e00a      	b.n	8001b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aec:	e000      	b.n	8001af0 <_read+0x16>
 8001aee:	bf00      	nop
 8001af0:	0001      	movs	r1, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	60ba      	str	r2, [r7, #8]
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf0      	blt.n	8001aec <_read+0x12>
  }

  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b006      	add	sp, #24
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	425b      	negs	r3, r3
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0192      	lsls	r2, r2, #6
 8001b38:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_isatty>:

int _isatty(int file)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b004      	add	sp, #16
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f002 fe4c 	bl	8004838 <__errno>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	425b      	negs	r3, r3
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	18d2      	adds	r2, r2, r3
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b006      	add	sp, #24
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20009000 	.word	0x20009000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	20000308 	.word	0x20000308
 8001bd4:	20000320 	.word	0x20000320

08001bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001be6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be8:	f7ff fff6 	bl	8001bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <LoopForever+0xe>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	; (8001c30 <LoopForever+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c12:	f002 fe17 	bl	8004844 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c16:	f7ff fd07 	bl	8001628 <main>

08001c1a <LoopForever>:

LoopForever:
  b LoopForever
 8001c1a:	e7fe      	b.n	8001c1a <LoopForever>
  ldr   r0, =_estack
 8001c1c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001c20:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8001c24:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001c28:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 8001c2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001c30:	20000320 	.word	0x20000320

08001c34 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_COMP_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x3c>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_Init+0x3c>)
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0049      	lsls	r1, r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f810 	bl	8001c78 <HAL_InitTick>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e001      	b.n	8001c68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fe54 	bl	8001910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	781b      	ldrb	r3, [r3, #0]
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40022000 	.word	0x40022000

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c80:	230f      	movs	r3, #15
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_InitTick+0x88>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02b      	beq.n	8001ce8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_InitTick+0x8c>)
 8001c92:	681c      	ldr	r4, [r3, #0]
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_InitTick+0x88>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	0019      	movs	r1, r3
 8001c9a:	23fa      	movs	r3, #250	; 0xfa
 8001c9c:	0098      	lsls	r0, r3, #2
 8001c9e:	f7ff f9e3 	bl	8001068 <__udivsi3>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f7ff f9de 	bl	8001068 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f913 	bl	8001eda <HAL_SYSTICK_Config>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d112      	bne.n	8001cde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d80a      	bhi.n	8001cd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f8f2 	bl	8001eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_InitTick+0x90>)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e00d      	b.n	8001cf0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e008      	b.n	8001cf0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cde:	230f      	movs	r3, #15
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e003      	b.n	8001cf0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce8:	230f      	movs	r3, #15
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b005      	add	sp, #20
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	20000188 	.word	0x20000188
 8001d04:	20000180 	.word	0x20000180
 8001d08:	20000184 	.word	0x20000184

08001d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_IncTick+0x1c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	001a      	movs	r2, r3
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_IncTick+0x20>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	18d2      	adds	r2, r2, r3
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_IncTick+0x20>)
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000188 	.word	0x20000188
 8001d2c:	2000030c 	.word	0x2000030c

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <HAL_GetTick+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	2000030c 	.word	0x2000030c

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff fff0 	bl	8001d30 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	001a      	movs	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	189b      	adds	r3, r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	f7ff ffe0 	bl	8001d30 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	20000188 	.word	0x20000188

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	0002      	movs	r2, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001da0:	d828      	bhi.n	8001df4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <__NVIC_SetPriority+0xd4>)
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	33c0      	adds	r3, #192	; 0xc0
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	589b      	ldr	r3, [r3, r2]
 8001db2:	1dfa      	adds	r2, r7, #7
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	0011      	movs	r1, r2
 8001db8:	2203      	movs	r2, #3
 8001dba:	400a      	ands	r2, r1
 8001dbc:	00d2      	lsls	r2, r2, #3
 8001dbe:	21ff      	movs	r1, #255	; 0xff
 8001dc0:	4091      	lsls	r1, r2
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	43d2      	mvns	r2, r2
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	019b      	lsls	r3, r3, #6
 8001dce:	22ff      	movs	r2, #255	; 0xff
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2303      	movs	r3, #3
 8001dda:	4003      	ands	r3, r0
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de0:	481f      	ldr	r0, [pc, #124]	; (8001e60 <__NVIC_SetPriority+0xd4>)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	430a      	orrs	r2, r1
 8001dec:	33c0      	adds	r3, #192	; 0xc0
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001df2:	e031      	b.n	8001e58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <__NVIC_SetPriority+0xd8>)
 8001df6:	1dfb      	adds	r3, r7, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	400b      	ands	r3, r1
 8001e00:	3b08      	subs	r3, #8
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3306      	adds	r3, #6
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	18d3      	adds	r3, r2, r3
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	1dfa      	adds	r2, r7, #7
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	0011      	movs	r1, r2
 8001e14:	2203      	movs	r2, #3
 8001e16:	400a      	ands	r2, r1
 8001e18:	00d2      	lsls	r2, r2, #3
 8001e1a:	21ff      	movs	r1, #255	; 0xff
 8001e1c:	4091      	lsls	r1, r2
 8001e1e:	000a      	movs	r2, r1
 8001e20:	43d2      	mvns	r2, r2
 8001e22:	401a      	ands	r2, r3
 8001e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	0018      	movs	r0, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	4003      	ands	r3, r0
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <__NVIC_SetPriority+0xd8>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	001c      	movs	r4, r3
 8001e44:	230f      	movs	r3, #15
 8001e46:	4023      	ands	r3, r4
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	3306      	adds	r3, #6
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	18c3      	adds	r3, r0, r3
 8001e54:	3304      	adds	r3, #4
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	045b      	lsls	r3, r3, #17
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d301      	bcc.n	8001e80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e010      	b.n	8001ea2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <SysTick_Config+0x44>)
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	3a01      	subs	r2, #1
 8001e86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e88:	2301      	movs	r3, #1
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff ff7c 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x44>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x44>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	210f      	movs	r1, #15
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	1c02      	adds	r2, r0, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	0011      	movs	r1, r2
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ffbf 	bl	8001e68 <SysTick_Config>
 8001eea:	0003      	movs	r3, r0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	e147      	b.n	8002194 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d100      	bne.n	8001f1c <HAL_GPIO_Init+0x28>
 8001f1a:	e138      	b.n	800218e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d005      	beq.n	8001f34 <HAL_GPIO_Init+0x40>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d130      	bne.n	8001f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	409a      	lsls	r2, r3
 8001f42:	0013      	movs	r3, r2
 8001f44:	43da      	mvns	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	409a      	lsls	r2, r3
 8001f56:	0013      	movs	r3, r2
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	43da      	mvns	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	2201      	movs	r2, #1
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d017      	beq.n	8001fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d123      	bne.n	8002026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	58d3      	ldr	r3, [r2, r3]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2207      	movs	r2, #7
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2107      	movs	r1, #7
 800200a:	400b      	ands	r3, r1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	409a      	lsls	r2, r3
 8002010:	0013      	movs	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	6939      	ldr	r1, [r7, #16]
 8002024:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	409a      	lsls	r2, r3
 8002034:	0013      	movs	r3, r2
 8002036:	43da      	mvns	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2203      	movs	r2, #3
 8002044:	401a      	ands	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	23c0      	movs	r3, #192	; 0xc0
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4013      	ands	r3, r2
 8002064:	d100      	bne.n	8002068 <HAL_GPIO_Init+0x174>
 8002066:	e092      	b.n	800218e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002068:	4a50      	ldr	r2, [pc, #320]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3318      	adds	r3, #24
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	589b      	ldr	r3, [r3, r2]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	220f      	movs	r2, #15
 8002080:	409a      	lsls	r2, r3
 8002082:	0013      	movs	r3, r2
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	23a0      	movs	r3, #160	; 0xa0
 8002090:	05db      	lsls	r3, r3, #23
 8002092:	429a      	cmp	r2, r3
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x1ca>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a45      	ldr	r2, [pc, #276]	; (80021b0 <HAL_GPIO_Init+0x2bc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x1c6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a44      	ldr	r2, [pc, #272]	; (80021b4 <HAL_GPIO_Init+0x2c0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x1c2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <HAL_GPIO_Init+0x2c4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x1be>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x1cc>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x1cc>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x1cc>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x1cc>
 80020be:	2300      	movs	r3, #0
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	2103      	movs	r1, #3
 80020c4:	400a      	ands	r2, r1
 80020c6:	00d2      	lsls	r2, r2, #3
 80020c8:	4093      	lsls	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020d0:	4936      	ldr	r1, [pc, #216]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3318      	adds	r3, #24
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43da      	mvns	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	035b      	lsls	r3, r3, #13
 80020f6:	4013      	ands	r3, r2
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002102:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43da      	mvns	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	039b      	lsls	r3, r3, #14
 8002120:	4013      	ands	r3, r2
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 8002134:	2384      	movs	r3, #132	; 0x84
 8002136:	58d3      	ldr	r3, [r2, r3]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43da      	mvns	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002158:	4914      	ldr	r1, [pc, #80]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 800215a:	2284      	movs	r2, #132	; 0x84
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	58d3      	ldr	r3, [r2, r3]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43da      	mvns	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	4013      	ands	r3, r2
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002186:	4909      	ldr	r1, [pc, #36]	; (80021ac <HAL_GPIO_Init+0x2b8>)
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	40da      	lsrs	r2, r3
 800219c:	1e13      	subs	r3, r2, #0
 800219e:	d000      	beq.n	80021a2 <HAL_GPIO_Init+0x2ae>
 80021a0:	e6b0      	b.n	8001f04 <HAL_GPIO_Init+0x10>
  }
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b006      	add	sp, #24
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021800 	.word	0x40021800
 80021b0:	50000400 	.word	0x50000400
 80021b4:	50000800 	.word	0x50000800
 80021b8:	50000c00 	.word	0x50000c00

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	0008      	movs	r0, r1
 80021c6:	0011      	movs	r1, r2
 80021c8:	1cbb      	adds	r3, r7, #2
 80021ca:	1c02      	adds	r2, r0, #0
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	1c7b      	adds	r3, r7, #1
 80021d0:	1c0a      	adds	r2, r1, #0
 80021d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d4:	1c7b      	adds	r3, r7, #1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021dc:	1cbb      	adds	r3, r7, #2
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	1cbb      	adds	r3, r7, #2
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	000a      	movs	r2, r1
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	041a      	lsls	r2, r3, #16
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	1cb9      	adds	r1, r7, #2
 800221a:	8809      	ldrh	r1, [r1, #0]
 800221c:	400b      	ands	r3, r1
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800223a:	4013      	ands	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d11f      	bne.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	0013      	movs	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	189b      	adds	r3, r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800225e:	0018      	movs	r0, r3
 8002260:	f7fe ff02 	bl	8001068 <__udivsi3>
 8002264:	0003      	movs	r3, r0
 8002266:	3301      	adds	r3, #1
 8002268:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226a:	e008      	b.n	800227e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3b01      	subs	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e001      	b.n	800227e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e009      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	401a      	ands	r2, r3
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	429a      	cmp	r2, r3
 800228e:	d0ed      	beq.n	800226c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b004      	add	sp, #16
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40007000 	.word	0x40007000
 80022a0:	fffff9ff 	.word	0xfffff9ff
 80022a4:	20000180 	.word	0x20000180
 80022a8:	000f4240 	.word	0x000f4240

080022ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	23e0      	movs	r3, #224	; 0xe0
 80022b6:	01db      	lsls	r3, r3, #7
 80022b8:	4013      	ands	r3, r2
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e2fe      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	4013      	ands	r3, r2
 80022de:	d100      	bne.n	80022e2 <HAL_RCC_OscConfig+0x1e>
 80022e0:	e07c      	b.n	80023dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e2:	4bc3      	ldr	r3, [pc, #780]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2238      	movs	r2, #56	; 0x38
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ec:	4bc0      	ldr	r3, [pc, #768]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2203      	movs	r2, #3
 80022f2:	4013      	ands	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x3e>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d002      	beq.n	8002308 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4bb9      	ldr	r3, [pc, #740]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4013      	ands	r3, r2
 8002312:	d062      	beq.n	80023da <HAL_RCC_OscConfig+0x116>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d15e      	bne.n	80023da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e2d9      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x78>
 800232c:	4bb0      	ldr	r3, [pc, #704]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4baf      	ldr	r3, [pc, #700]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e020      	b.n	800237e <HAL_RCC_OscConfig+0xba>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	23a0      	movs	r3, #160	; 0xa0
 8002342:	02db      	lsls	r3, r3, #11
 8002344:	429a      	cmp	r2, r3
 8002346:	d10e      	bne.n	8002366 <HAL_RCC_OscConfig+0xa2>
 8002348:	4ba9      	ldr	r3, [pc, #676]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4ba8      	ldr	r3, [pc, #672]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	02c9      	lsls	r1, r1, #11
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	4ba6      	ldr	r3, [pc, #664]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4ba5      	ldr	r3, [pc, #660]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0249      	lsls	r1, r1, #9
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0xba>
 8002366:	4ba2      	ldr	r3, [pc, #648]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4ba1      	ldr	r3, [pc, #644]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800236c:	49a1      	ldr	r1, [pc, #644]	; (80025f4 <HAL_RCC_OscConfig+0x330>)
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4b9f      	ldr	r3, [pc, #636]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b9e      	ldr	r3, [pc, #632]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002378:	499f      	ldr	r1, [pc, #636]	; (80025f8 <HAL_RCC_OscConfig+0x334>)
 800237a:	400a      	ands	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d014      	beq.n	80023b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff fcd3 	bl	8001d30 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fcce 	bl	8001d30 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e298      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a2:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	029b      	lsls	r3, r3, #10
 80023aa:	4013      	ands	r3, r2
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xcc>
 80023ae:	e015      	b.n	80023dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff fcbe 	bl	8001d30 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ba:	f7ff fcb9 	bl	8001d30 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e283      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023cc:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	029b      	lsls	r3, r3, #10
 80023d4:	4013      	ands	r3, r2
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0xf6>
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d100      	bne.n	80023e8 <HAL_RCC_OscConfig+0x124>
 80023e6:	e099      	b.n	800251c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e8:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2238      	movs	r2, #56	; 0x38
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2203      	movs	r2, #3
 80023f8:	4013      	ands	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d102      	bne.n	8002408 <HAL_RCC_OscConfig+0x144>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d002      	beq.n	800240e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d135      	bne.n	800247a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240e:	4b78      	ldr	r3, [pc, #480]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4013      	ands	r3, r2
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x162>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e256      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a74      	ldr	r2, [pc, #464]	; (80025fc <HAL_RCC_OscConfig+0x338>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	4b6e      	ldr	r3, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d112      	bne.n	8002468 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002442:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_RCC_OscConfig+0x33c>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002456:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0adb      	lsrs	r3, r3, #11
 800245c:	2207      	movs	r2, #7
 800245e:	4013      	ands	r3, r2
 8002460:	4a68      	ldr	r2, [pc, #416]	; (8002604 <HAL_RCC_OscConfig+0x340>)
 8002462:	40da      	lsrs	r2, r3
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x344>)
 8002466:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_RCC_OscConfig+0x348>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff fc03 	bl	8001c78 <HAL_InitTick>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d051      	beq.n	800251a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e22c      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d030      	beq.n	80024e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002482:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5e      	ldr	r2, [pc, #376]	; (8002600 <HAL_RCC_OscConfig+0x33c>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0049      	lsls	r1, r1, #1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc44 	bl	8001d30 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ae:	f7ff fc3f 	bl	8001d30 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e209      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4013      	ands	r3, r2
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b48      	ldr	r3, [pc, #288]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_RCC_OscConfig+0x338>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	021a      	lsls	r2, r3, #8
 80024dc:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	e01b      	b.n	800251c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024e4:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	4949      	ldr	r1, [pc, #292]	; (8002610 <HAL_RCC_OscConfig+0x34c>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff fc1e 	bl	8001d30 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fa:	f7ff fc19 	bl	8001d30 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1e3      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4013      	ands	r3, r2
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x236>
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	4013      	ands	r3, r2
 8002524:	d047      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002526:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2238      	movs	r2, #56	; 0x38
 800252c:	4013      	ands	r3, r2
 800252e:	2b18      	cmp	r3, #24
 8002530:	d10a      	bne.n	8002548 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	d03c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d138      	bne.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e1c5      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d019      	beq.n	8002584 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002552:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002554:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fbe8 	bl	8001d30 <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7ff fbe3 	bl	8001d30 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1ad      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	2202      	movs	r2, #2
 800257e:	4013      	ands	r3, r2
 8002580:	d0f1      	beq.n	8002566 <HAL_RCC_OscConfig+0x2a2>
 8002582:	e018      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 8002586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 800258a:	2101      	movs	r1, #1
 800258c:	438a      	bics	r2, r1
 800258e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff fbce 	bl	8001d30 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7ff fbc9 	bl	8001d30 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e193      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	2202      	movs	r2, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	d1f1      	bne.n	800259a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2204      	movs	r2, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	d100      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2fe>
 80025c0:	e0c6      	b.n	8002750 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	231f      	movs	r3, #31
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2238      	movs	r2, #56	; 0x38
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d11e      	bne.n	8002614 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x32c>)
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d100      	bne.n	80025e2 <HAL_RCC_OscConfig+0x31e>
 80025e0:	e0b6      	b.n	8002750 <HAL_RCC_OscConfig+0x48c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d000      	beq.n	80025ec <HAL_RCC_OscConfig+0x328>
 80025ea:	e0b1      	b.n	8002750 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e171      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	fffeffff 	.word	0xfffeffff
 80025f8:	fffbffff 	.word	0xfffbffff
 80025fc:	ffff80ff 	.word	0xffff80ff
 8002600:	ffffc7ff 	.word	0xffffc7ff
 8002604:	00f42400 	.word	0x00f42400
 8002608:	20000180 	.word	0x20000180
 800260c:	20000184 	.word	0x20000184
 8002610:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002614:	4bb1      	ldr	r3, [pc, #708]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	055b      	lsls	r3, r3, #21
 800261c:	4013      	ands	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_RCC_OscConfig+0x360>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x362>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d011      	beq.n	800264e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4bac      	ldr	r3, [pc, #688]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800262c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800262e:	4bab      	ldr	r3, [pc, #684]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0549      	lsls	r1, r1, #21
 8002634:	430a      	orrs	r2, r1
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
 8002638:	4ba8      	ldr	r3, [pc, #672]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800263a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	055b      	lsls	r3, r3, #21
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264e:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <HAL_RCC_OscConfig+0x61c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d11a      	bne.n	8002690 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800265a:	4ba1      	ldr	r3, [pc, #644]	; (80028e0 <HAL_RCC_OscConfig+0x61c>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <HAL_RCC_OscConfig+0x61c>)
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	0049      	lsls	r1, r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002668:	f7ff fb62 	bl	8001d30 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7ff fb5d 	bl	8001d30 <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e127      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	4b96      	ldr	r3, [pc, #600]	; (80028e0 <HAL_RCC_OscConfig+0x61c>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4013      	ands	r3, r2
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3e2>
 8002698:	4b90      	ldr	r3, [pc, #576]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800269a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800269c:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x41c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x404>
 80026ae:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026b2:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026b4:	2104      	movs	r1, #4
 80026b6:	430a      	orrs	r2, r1
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ba:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026be:	4b87      	ldr	r3, [pc, #540]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026c0:	2101      	movs	r1, #1
 80026c2:	430a      	orrs	r2, r1
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x41c>
 80026c8:	4b84      	ldr	r3, [pc, #528]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026cc:	4b83      	ldr	r3, [pc, #524]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	438a      	bics	r2, r1
 80026d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80026d4:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026d8:	4b80      	ldr	r3, [pc, #512]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80026da:	2104      	movs	r1, #4
 80026dc:	438a      	bics	r2, r1
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d014      	beq.n	8002712 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff fb22 	bl	8001d30 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f0:	e009      	b.n	8002706 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7ff fb1d 	bl	8001d30 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	4a79      	ldr	r2, [pc, #484]	; (80028e4 <HAL_RCC_OscConfig+0x620>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0e6      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	4b75      	ldr	r3, [pc, #468]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x42e>
 8002710:	e013      	b.n	800273a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff fb0d 	bl	8001d30 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7ff fb08 	bl	8001d30 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	4a6f      	ldr	r2, [pc, #444]	; (80028e4 <HAL_RCC_OscConfig+0x620>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0d1      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002730:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2202      	movs	r2, #2
 8002736:	4013      	ands	r3, r2
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800273a:	231f      	movs	r3, #31
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b65      	ldr	r3, [pc, #404]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800274a:	4967      	ldr	r1, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x624>)
 800274c:	400a      	ands	r2, r1
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d100      	bne.n	800275a <HAL_RCC_OscConfig+0x496>
 8002758:	e0bb      	b.n	80028d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	; 0x38
 8002760:	4013      	ands	r3, r2
 8002762:	2b10      	cmp	r3, #16
 8002764:	d100      	bne.n	8002768 <HAL_RCC_OscConfig+0x4a4>
 8002766:	e07b      	b.n	8002860 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d156      	bne.n	800281e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002776:	495d      	ldr	r1, [pc, #372]	; (80028ec <HAL_RCC_OscConfig+0x628>)
 8002778:	400a      	ands	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fad8 	bl	8001d30 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7ff fad3 	bl	8001d30 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e09d      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	049b      	lsls	r3, r3, #18
 80027a0:	4013      	ands	r3, r2
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a4:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a51      	ldr	r2, [pc, #324]	; (80028f0 <HAL_RCC_OscConfig+0x62c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	431a      	orrs	r2, r3
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0449      	lsls	r1, r1, #17
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	0549      	lsls	r1, r1, #21
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff fa9c 	bl	8001d30 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7ff fa97 	bl	8001d30 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e061      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002810:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	049b      	lsls	r3, r3, #18
 8002818:	4013      	ands	r3, r2
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x53a>
 800281c:	e059      	b.n	80028d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002824:	4931      	ldr	r1, [pc, #196]	; (80028ec <HAL_RCC_OscConfig+0x628>)
 8002826:	400a      	ands	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff fa81 	bl	8001d30 <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff fa7c 	bl	8001d30 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e046      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	049b      	lsls	r3, r3, #18
 800284e:	4013      	ands	r3, r2
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 8002858:	4926      	ldr	r1, [pc, #152]	; (80028f4 <HAL_RCC_OscConfig+0x630>)
 800285a:	400a      	ands	r2, r1
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	e038      	b.n	80028d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e033      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x618>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2203      	movs	r2, #3
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	429a      	cmp	r2, r3
 800287e:	d126      	bne.n	80028ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2270      	movs	r2, #112	; 0x70
 8002884:	401a      	ands	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d11f      	bne.n	80028ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	23fe      	movs	r3, #254	; 0xfe
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d116      	bne.n	80028ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	23f8      	movs	r3, #248	; 0xf8
 80028a4:	039b      	lsls	r3, r3, #14
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d10e      	bne.n	80028ce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	23e0      	movs	r3, #224	; 0xe0
 80028b4:	051b      	lsls	r3, r3, #20
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	0f5b      	lsrs	r3, r3, #29
 80028c4:	075a      	lsls	r2, r3, #29
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b008      	add	sp, #32
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
 80028e4:	00001388 	.word	0x00001388
 80028e8:	efffffff 	.word	0xefffffff
 80028ec:	feffffff 	.word	0xfeffffff
 80028f0:	11c1808c 	.word	0x11c1808c
 80028f4:	eefefffc 	.word	0xeefefffc

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0e9      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2207      	movs	r2, #7
 8002912:	4013      	ands	r3, r2
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d91e      	bls.n	8002958 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2207      	movs	r2, #7
 8002920:	4393      	bics	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800292c:	f7ff fa00 	bl	8001d30 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002934:	e009      	b.n	800294a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002936:	f7ff f9fb 	bl	8001d30 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	4a6a      	ldr	r2, [pc, #424]	; (8002aec <HAL_RCC_ClockConfig+0x1f4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0ca      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2207      	movs	r2, #7
 8002950:	4013      	ands	r3, r2
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d1ee      	bne.n	8002936 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d015      	beq.n	800298e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2204      	movs	r2, #4
 8002968:	4013      	ands	r3, r2
 800296a:	d006      	beq.n	800297a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800296c:	4b60      	ldr	r3, [pc, #384]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002972:	21e0      	movs	r1, #224	; 0xe0
 8002974:	01c9      	lsls	r1, r1, #7
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4a5d      	ldr	r2, [pc, #372]	; (8002af4 <HAL_RCC_ClockConfig+0x1fc>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	4013      	ands	r3, r2
 8002996:	d057      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	4013      	ands	r3, r2
 80029aa:	d12b      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e097      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b8:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	049b      	lsls	r3, r3, #18
 80029c0:	4013      	ands	r3, r2
 80029c2:	d11f      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e08b      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d0:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	d113      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e07f      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e8:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e074      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2202      	movs	r2, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e06d      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a04:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4393      	bics	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a14:	430a      	orrs	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7ff f98a 	bl	8001d30 <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a22:	f7ff f985 	bl	8001d30 <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	4a2f      	ldr	r2, [pc, #188]	; (8002aec <HAL_RCC_ClockConfig+0x1f4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e054      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2e      	ldr	r3, [pc, #184]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2238      	movs	r2, #56	; 0x38
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1ec      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d21e      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a68:	f7ff f962 	bl	8001d30 <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a72:	f7ff f95d 	bl	8001d30 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_RCC_ClockConfig+0x1f4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e02c      	b.n	8002ae0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_RCC_ClockConfig+0x200>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ab2:	f000 f829 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ab6:	0001      	movs	r1, r0
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	220f      	movs	r2, #15
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_RCC_ClockConfig+0x204>)
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	58d3      	ldr	r3, [r2, r3]
 8002ac8:	221f      	movs	r2, #31
 8002aca:	4013      	ands	r3, r2
 8002acc:	000a      	movs	r2, r1
 8002ace:	40da      	lsrs	r2, r3
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x208>)
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_ClockConfig+0x20c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7ff f8cd 	bl	8001c78 <HAL_InitTick>
 8002ade:	0003      	movs	r3, r0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	00001388 	.word	0x00001388
 8002af0:	40021000 	.word	0x40021000
 8002af4:	fffff0ff 	.word	0xfffff0ff
 8002af8:	ffff8fff 	.word	0xffff8fff
 8002afc:	08005a30 	.word	0x08005a30
 8002b00:	20000180 	.word	0x20000180
 8002b04:	20000184 	.word	0x20000184

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2238      	movs	r2, #56	; 0x38
 8002b14:	4013      	ands	r3, r2
 8002b16:	d10f      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0adb      	lsrs	r3, r3, #11
 8002b1e:	2207      	movs	r2, #7
 8002b20:	4013      	ands	r3, r2
 8002b22:	2201      	movs	r2, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	0013      	movs	r3, r2
 8002b28:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	4835      	ldr	r0, [pc, #212]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b2e:	f7fe fa9b 	bl	8001068 <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e05d      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2238      	movs	r2, #56	; 0x38
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d102      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e054      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2238      	movs	r2, #56	; 0x38
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d138      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	2207      	movs	r2, #7
 8002b68:	4013      	ands	r3, r2
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	4824      	ldr	r0, [pc, #144]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b78:	f7fe fa76 	bl	8001068 <__udivsi3>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	0019      	movs	r1, r3
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	227f      	movs	r2, #127	; 0x7f
 8002b88:	4013      	ands	r3, r2
 8002b8a:	434b      	muls	r3, r1
 8002b8c:	617b      	str	r3, [r7, #20]
        break;
 8002b8e:	e00d      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	481c      	ldr	r0, [pc, #112]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b94:	f7fe fa68 	bl	8001068 <__udivsi3>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	227f      	movs	r2, #127	; 0x7f
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	434b      	muls	r3, r1
 8002ba8:	617b      	str	r3, [r7, #20]
        break;
 8002baa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0f5b      	lsrs	r3, r3, #29
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7fe fa53 	bl	8001068 <__udivsi3>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e015      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2238      	movs	r2, #56	; 0x38
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d103      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2238      	movs	r2, #56	; 0x38
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b18      	cmp	r3, #24
 8002be6:	d103      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002be8:	23fa      	movs	r3, #250	; 0xfa
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	e001      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bf4:	693b      	ldr	r3, [r7, #16]
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b006      	add	sp, #24
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40021000 	.word	0x40021000
 8002c04:	00f42400 	.word	0x00f42400
 8002c08:	007a1200 	.word	0x007a1200

08002c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c10:	4b02      	ldr	r3, [pc, #8]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	20000180 	.word	0x20000180

08002c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c24:	f7ff fff2 	bl	8002c0c <HAL_RCC_GetHCLKFreq>
 8002c28:	0004      	movs	r4, r0
 8002c2a:	f7ff fb3f 	bl	80022ac <LL_RCC_GetAPB1Prescaler>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	0b1a      	lsrs	r2, r3, #12
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	58d3      	ldr	r3, [r2, r3]
 8002c38:	221f      	movs	r2, #31
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	40dc      	lsrs	r4, r3
 8002c3e:	0023      	movs	r3, r4
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bdb0      	pop	{r4, r5, r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	08005a70 	.word	0x08005a70

08002c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c54:	2313      	movs	r3, #19
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c5c:	2312      	movs	r3, #18
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	029b      	lsls	r3, r3, #10
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c70:	e0a3      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2011      	movs	r0, #17
 8002c74:	183b      	adds	r3, r7, r0
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4bc3      	ldr	r3, [pc, #780]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	055b      	lsls	r3, r3, #21
 8002c82:	4013      	ands	r3, r2
 8002c84:	d110      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4bc0      	ldr	r3, [pc, #768]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8a:	4bbf      	ldr	r3, [pc, #764]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0549      	lsls	r1, r1, #21
 8002c90:	430a      	orrs	r2, r1
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c94:	4bbc      	ldr	r3, [pc, #752]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	055b      	lsls	r3, r3, #21
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca2:	183b      	adds	r3, r7, r0
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca8:	4bb8      	ldr	r3, [pc, #736]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4bb7      	ldr	r3, [pc, #732]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0049      	lsls	r1, r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb6:	f7ff f83b 	bl	8001d30 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7ff f836 	bl	8001d30 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d904      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cce:	2313      	movs	r3, #19
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	701a      	strb	r2, [r3, #0]
        break;
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd8:	4bac      	ldr	r3, [pc, #688]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0ed      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ce4:	2313      	movs	r3, #19
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d154      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cee:	4ba6      	ldr	r3, [pc, #664]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf2:	23c0      	movs	r3, #192	; 0xc0
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d014      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d0a:	4b9f      	ldr	r3, [pc, #636]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	4aa0      	ldr	r2, [pc, #640]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d14:	4b9c      	ldr	r3, [pc, #624]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d18:	4b9b      	ldr	r3, [pc, #620]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0249      	lsls	r1, r1, #9
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d22:	4b99      	ldr	r3, [pc, #612]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d26:	4b98      	ldr	r3, [pc, #608]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d28:	499a      	ldr	r1, [pc, #616]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d2e:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d016      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fff8 	bl	8001d30 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d44:	e00c      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe fff3 	bl	8001d30 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a91      	ldr	r2, [pc, #580]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d904      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d56:	2313      	movs	r3, #19
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	701a      	strb	r2, [r3, #0]
            break;
 8002d5e:	e004      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d60:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d0ed      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d6a:	2313      	movs	r3, #19
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d74:	4b84      	ldr	r3, [pc, #528]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	4a85      	ldr	r2, [pc, #532]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d82:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d88:	e00c      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d8a:	2312      	movs	r3, #18
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2213      	movs	r2, #19
 8002d90:	18ba      	adds	r2, r7, r2
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	2312      	movs	r3, #18
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2213      	movs	r2, #19
 8002d9e:	18ba      	adds	r2, r7, r2
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002da4:	2311      	movs	r3, #17
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d105      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dae:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db2:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db4:	4979      	ldr	r1, [pc, #484]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002db6:	400a      	ands	r2, r1
 8002db8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc4:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	2203      	movs	r2, #3
 8002dca:	4393      	bics	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de2:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	220c      	movs	r2, #12
 8002de8:	4393      	bics	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e00:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	4a66      	ldr	r2, [pc, #408]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	4b5e      	ldr	r3, [pc, #376]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	4a5f      	ldr	r2, [pc, #380]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e30:	430a      	orrs	r2, r1
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e40:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	4a58      	ldr	r2, [pc, #352]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d015      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7e:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	0899      	lsrs	r1, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	05db      	lsls	r3, r3, #23
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e9c:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	0249      	lsls	r1, r1, #9
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	031b      	lsls	r3, r3, #12
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	039b      	lsls	r3, r3, #14
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	03db      	lsls	r3, r3, #15
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0449      	lsls	r1, r1, #17
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	03db      	lsls	r3, r3, #15
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d016      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	045b      	lsls	r3, r3, #17
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	0449      	lsls	r1, r1, #17
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4013      	ands	r3, r2
 8002f48:	d016      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	0249      	lsls	r1, r1, #9
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f78:	2312      	movs	r3, #18
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b006      	add	sp, #24
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	fffffcff 	.word	0xfffffcff
 8002f94:	fffeffff 	.word	0xfffeffff
 8002f98:	00001388 	.word	0x00001388
 8002f9c:	efffffff 	.word	0xefffffff
 8002fa0:	fffff3ff 	.word	0xfffff3ff
 8002fa4:	fff3ffff 	.word	0xfff3ffff
 8002fa8:	ffcfffff 	.word	0xffcfffff
 8002fac:	ffffcfff 	.word	0xffffcfff
 8002fb0:	ffbfffff 	.word	0xffbfffff
 8002fb4:	feffffff 	.word	0xfeffffff
 8002fb8:	ffff3fff 	.word	0xffff3fff

08002fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0a8      	b.n	8003120 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	2382      	movs	r3, #130	; 0x82
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d009      	beq.n	8002ff6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	61da      	str	r2, [r3, #28]
 8002fe8:	e005      	b.n	8002ff6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	225d      	movs	r2, #93	; 0x5d
 8003000:	5c9b      	ldrb	r3, [r3, r2]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	225c      	movs	r2, #92	; 0x5c
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe fca0 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	225d      	movs	r2, #93	; 0x5d
 800301c:	2102      	movs	r1, #2
 800301e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	438a      	bics	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	23e0      	movs	r3, #224	; 0xe0
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	429a      	cmp	r2, r3
 800303a:	d902      	bls.n	8003042 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e002      	b.n	8003048 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	015b      	lsls	r3, r3, #5
 8003046:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	23f0      	movs	r3, #240	; 0xf0
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	429a      	cmp	r2, r3
 8003052:	d008      	beq.n	8003066 <HAL_SPI_Init+0xaa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	23e0      	movs	r3, #224	; 0xe0
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	429a      	cmp	r2, r3
 800305e:	d002      	beq.n	8003066 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	2382      	movs	r3, #130	; 0x82
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	401a      	ands	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	2384      	movs	r3, #132	; 0x84
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	400b      	ands	r3, r1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2102      	movs	r1, #2
 8003082:	400b      	ands	r3, r1
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2101      	movs	r1, #1
 800308c:	400b      	ands	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6999      	ldr	r1, [r3, #24]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	400b      	ands	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2138      	movs	r1, #56	; 0x38
 80030a2:	400b      	ands	r3, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	400b      	ands	r3, r1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	0011      	movs	r1, r2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	401a      	ands	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	2204      	movs	r2, #4
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2110      	movs	r1, #16
 80030d4:	400b      	ands	r3, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	2108      	movs	r1, #8
 80030de:	400b      	ands	r3, r1
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68d9      	ldr	r1, [r3, #12]
 80030e6:	23f0      	movs	r3, #240	; 0xf0
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	400b      	ands	r3, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	0011      	movs	r1, r2
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	015b      	lsls	r3, r3, #5
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4907      	ldr	r1, [pc, #28]	; (8003128 <HAL_SPI_Init+0x16c>)
 800310c:	400a      	ands	r2, r1
 800310e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	225d      	movs	r2, #93	; 0x5d
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffff7ff 	.word	0xfffff7ff

0800312c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	1dbb      	adds	r3, r7, #6
 800313a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800313c:	2317      	movs	r3, #23
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	2382      	movs	r3, #130	; 0x82
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	429a      	cmp	r2, r3
 800314e:	d113      	bne.n	8003178 <HAL_SPI_Receive+0x4c>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	225d      	movs	r2, #93	; 0x5d
 800315c:	2104      	movs	r1, #4
 800315e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003160:	1dbb      	adds	r3, r7, #6
 8003162:	881c      	ldrh	r4, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	0023      	movs	r3, r4
 8003170:	f000 f928 	bl	80033c4 <HAL_SPI_TransmitReceive>
 8003174:	0003      	movs	r3, r0
 8003176:	e11c      	b.n	80033b2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	225c      	movs	r2, #92	; 0x5c
 800317c:	5c9b      	ldrb	r3, [r3, r2]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_SPI_Receive+0x5a>
 8003182:	2302      	movs	r3, #2
 8003184:	e115      	b.n	80033b2 <HAL_SPI_Receive+0x286>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	225c      	movs	r2, #92	; 0x5c
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800318e:	f7fe fdcf 	bl	8001d30 <HAL_GetTick>
 8003192:	0003      	movs	r3, r0
 8003194:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	225d      	movs	r2, #93	; 0x5d
 800319a:	5c9b      	ldrb	r3, [r3, r2]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d004      	beq.n	80031ac <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80031a2:	2317      	movs	r3, #23
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80031aa:	e0f7      	b.n	800339c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_SPI_Receive+0x8e>
 80031b2:	1dbb      	adds	r3, r7, #6
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80031ba:	2317      	movs	r3, #23
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80031c2:	e0eb      	b.n	800339c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	225d      	movs	r2, #93	; 0x5d
 80031c8:	2104      	movs	r1, #4
 80031ca:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1dba      	adds	r2, r7, #6
 80031dc:	2144      	movs	r1, #68	; 0x44
 80031de:	8812      	ldrh	r2, [r2, #0]
 80031e0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1dba      	adds	r2, r7, #6
 80031e6:	2146      	movs	r1, #70	; 0x46
 80031e8:	8812      	ldrh	r2, [r2, #0]
 80031ea:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	23e0      	movs	r3, #224	; 0xe0
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	429a      	cmp	r2, r3
 8003214:	d908      	bls.n	8003228 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4966      	ldr	r1, [pc, #408]	; (80033bc <HAL_SPI_Receive+0x290>)
 8003222:	400a      	ands	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e008      	b.n	800323a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	0149      	lsls	r1, r1, #5
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	429a      	cmp	r2, r3
 8003244:	d10f      	bne.n	8003266 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	438a      	bics	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4957      	ldr	r1, [pc, #348]	; (80033c0 <HAL_SPI_Receive+0x294>)
 8003262:	400a      	ands	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	4013      	ands	r3, r2
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d007      	beq.n	8003284 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	23e0      	movs	r3, #224	; 0xe0
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	429a      	cmp	r2, r3
 800328e:	d900      	bls.n	8003292 <HAL_SPI_Receive+0x166>
 8003290:	e069      	b.n	8003366 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003292:	e031      	b.n	80032f8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2201      	movs	r2, #1
 800329c:	4013      	ands	r3, r2
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d117      	bne.n	80032d2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	001a      	movs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2246      	movs	r2, #70	; 0x46
 80032c2:	5a9b      	ldrh	r3, [r3, r2]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b299      	uxth	r1, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2246      	movs	r2, #70	; 0x46
 80032ce:	5299      	strh	r1, [r3, r2]
 80032d0:	e012      	b.n	80032f8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d2:	f7fe fd2d 	bl	8001d30 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d802      	bhi.n	80032e8 <HAL_SPI_Receive+0x1bc>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_SPI_Receive+0x1c2>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80032ee:	2317      	movs	r3, #23
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2203      	movs	r2, #3
 80032f4:	701a      	strb	r2, [r3, #0]
          goto error;
 80032f6:	e051      	b.n	800339c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2246      	movs	r2, #70	; 0x46
 80032fc:	5a9b      	ldrh	r3, [r3, r2]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1c7      	bne.n	8003294 <HAL_SPI_Receive+0x168>
 8003304:	e035      	b.n	8003372 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2201      	movs	r2, #1
 800330e:	4013      	ands	r3, r2
 8003310:	2b01      	cmp	r3, #1
 8003312:	d115      	bne.n	8003340 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	b292      	uxth	r2, r2
 8003320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2246      	movs	r2, #70	; 0x46
 8003330:	5a9b      	ldrh	r3, [r3, r2]
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b299      	uxth	r1, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2246      	movs	r2, #70	; 0x46
 800333c:	5299      	strh	r1, [r3, r2]
 800333e:	e012      	b.n	8003366 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003340:	f7fe fcf6 	bl	8001d30 <HAL_GetTick>
 8003344:	0002      	movs	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d802      	bhi.n	8003356 <HAL_SPI_Receive+0x22a>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_SPI_Receive+0x230>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800335c:	2317      	movs	r3, #23
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	2203      	movs	r2, #3
 8003362:	701a      	strb	r2, [r3, #0]
          goto error;
 8003364:	e01a      	b.n	800339c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2246      	movs	r2, #70	; 0x46
 800336a:	5a9b      	ldrh	r3, [r3, r2]
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1c9      	bne.n	8003306 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 fb25 	bl	80039c8 <SPI_EndRxTransaction>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003390:	2317      	movs	r3, #23
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e000      	b.n	800339c <HAL_SPI_Receive+0x270>
  }

error :
 800339a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	225d      	movs	r2, #93	; 0x5d
 80033a0:	2101      	movs	r1, #1
 80033a2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	225c      	movs	r2, #92	; 0x5c
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80033ac:	2317      	movs	r3, #23
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b007      	add	sp, #28
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	ffffefff 	.word	0xffffefff
 80033c0:	ffffbfff 	.word	0xffffbfff

080033c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	001a      	movs	r2, r3
 80033d2:	1cbb      	adds	r3, r7, #2
 80033d4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033d6:	2301      	movs	r3, #1
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033da:	2323      	movs	r3, #35	; 0x23
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	225c      	movs	r2, #92	; 0x5c
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_SPI_TransmitReceive+0x2c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e1b5      	b.n	800375c <HAL_SPI_TransmitReceive+0x398>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	225c      	movs	r2, #92	; 0x5c
 80033f4:	2101      	movs	r1, #1
 80033f6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f8:	f7fe fc9a 	bl	8001d30 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003400:	201b      	movs	r0, #27
 8003402:	183b      	adds	r3, r7, r0
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	215d      	movs	r1, #93	; 0x5d
 8003408:	5c52      	ldrb	r2, [r2, r1]
 800340a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003412:	2312      	movs	r3, #18
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	1cba      	adds	r2, r7, #2
 8003418:	8812      	ldrh	r2, [r2, #0]
 800341a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800341c:	183b      	adds	r3, r7, r0
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d011      	beq.n	8003448 <HAL_SPI_TransmitReceive+0x84>
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	2382      	movs	r3, #130	; 0x82
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	429a      	cmp	r2, r3
 800342c:	d107      	bne.n	800343e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_SPI_TransmitReceive+0x7a>
 8003436:	183b      	adds	r3, r7, r0
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d004      	beq.n	8003448 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800343e:	2323      	movs	r3, #35	; 0x23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2202      	movs	r2, #2
 8003444:	701a      	strb	r2, [r3, #0]
    goto error;
 8003446:	e17e      	b.n	8003746 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_SPI_TransmitReceive+0x98>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_SPI_TransmitReceive+0x98>
 8003454:	1cbb      	adds	r3, r7, #2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800345c:	2323      	movs	r3, #35	; 0x23
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
    goto error;
 8003464:	e16f      	b.n	8003746 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	225d      	movs	r2, #93	; 0x5d
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b04      	cmp	r3, #4
 8003470:	d003      	beq.n	800347a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	225d      	movs	r2, #93	; 0x5d
 8003476:	2105      	movs	r1, #5
 8003478:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1cba      	adds	r2, r7, #2
 800348a:	2146      	movs	r1, #70	; 0x46
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1cba      	adds	r2, r7, #2
 8003494:	2144      	movs	r1, #68	; 0x44
 8003496:	8812      	ldrh	r2, [r2, #0]
 8003498:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1cba      	adds	r2, r7, #2
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1cba      	adds	r2, r7, #2
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	23e0      	movs	r3, #224	; 0xe0
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d908      	bls.n	80034da <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	49a4      	ldr	r1, [pc, #656]	; (8003764 <HAL_SPI_TransmitReceive+0x3a0>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e008      	b.n	80034ec <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	0149      	lsls	r1, r1, #5
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d007      	beq.n	800350a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2140      	movs	r1, #64	; 0x40
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	23e0      	movs	r3, #224	; 0xe0
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	429a      	cmp	r2, r3
 8003514:	d800      	bhi.n	8003518 <HAL_SPI_TransmitReceive+0x154>
 8003516:	e07f      	b.n	8003618 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_SPI_TransmitReceive+0x168>
 8003520:	2312      	movs	r3, #18
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d000      	beq.n	800352c <HAL_SPI_TransmitReceive+0x168>
 800352a:	e069      	b.n	8003600 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003550:	e056      	b.n	8003600 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2202      	movs	r2, #2
 800355a:	4013      	ands	r3, r2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d11b      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x1d4>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x1d4>
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b01      	cmp	r3, #1
 800356e:	d113      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2201      	movs	r2, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d11c      	bne.n	80035e0 <HAL_SPI_TransmitReceive+0x21c>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2246      	movs	r2, #70	; 0x46
 80035aa:	5a9b      	ldrh	r3, [r3, r2]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	b292      	uxth	r2, r2
 80035be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	1c9a      	adds	r2, r3, #2
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2246      	movs	r2, #70	; 0x46
 80035ce:	5a9b      	ldrh	r3, [r3, r2]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b299      	uxth	r1, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2246      	movs	r2, #70	; 0x46
 80035da:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035dc:	2301      	movs	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035e0:	f7fe fba6 	bl	8001d30 <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d807      	bhi.n	8003600 <HAL_SPI_TransmitReceive+0x23c>
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	3301      	adds	r3, #1
 80035f4:	d004      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80035f6:	2323      	movs	r3, #35	; 0x23
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2203      	movs	r2, #3
 80035fc:	701a      	strb	r2, [r3, #0]
        goto error;
 80035fe:	e0a2      	b.n	8003746 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1a3      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x18e>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2246      	movs	r2, #70	; 0x46
 800360e:	5a9b      	ldrh	r3, [r3, r2]
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d19d      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x18e>
 8003616:	e085      	b.n	8003724 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_SPI_TransmitReceive+0x268>
 8003620:	2312      	movs	r3, #18
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d000      	beq.n	800362c <HAL_SPI_TransmitReceive+0x268>
 800362a:	e070      	b.n	800370e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003652:	e05c      	b.n	800370e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2202      	movs	r2, #2
 800365c:	4013      	ands	r3, r2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11c      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2d8>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_SPI_TransmitReceive+0x2d8>
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	2b01      	cmp	r3, #1
 8003670:	d114      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	7812      	ldrb	r2, [r2, #0]
 800367e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2201      	movs	r2, #1
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d11e      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x324>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2246      	movs	r2, #70	; 0x46
 80036ae:	5a9b      	ldrh	r3, [r3, r2]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	001a      	movs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2246      	movs	r2, #70	; 0x46
 80036d6:	5a9b      	ldrh	r3, [r3, r2]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b299      	uxth	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2246      	movs	r2, #70	; 0x46
 80036e2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036e4:	2301      	movs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036e8:	f7fe fb22 	bl	8001d30 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d802      	bhi.n	80036fe <HAL_SPI_TransmitReceive+0x33a>
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	3301      	adds	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x340>
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d104      	bne.n	800370e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003704:	2323      	movs	r3, #35	; 0x23
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2203      	movs	r2, #3
 800370a:	701a      	strb	r2, [r3, #0]
        goto error;
 800370c:	e01b      	b.n	8003746 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d19d      	bne.n	8003654 <HAL_SPI_TransmitReceive+0x290>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2246      	movs	r2, #70	; 0x46
 800371c:	5a9b      	ldrh	r3, [r3, r2]
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d197      	bne.n	8003654 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	0018      	movs	r0, r3
 800372c:	f000 f9aa 	bl	8003a84 <SPI_EndRxTxTransaction>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d007      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003734:	2323      	movs	r3, #35	; 0x23
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
 8003742:	e000      	b.n	8003746 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003744:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	225d      	movs	r2, #93	; 0x5d
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	225c      	movs	r2, #92	; 0x5c
 8003752:	2100      	movs	r1, #0
 8003754:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003756:	2323      	movs	r3, #35	; 0x23
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	781b      	ldrb	r3, [r3, #0]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b00a      	add	sp, #40	; 0x28
 8003762:	bd80      	pop	{r7, pc}
 8003764:	ffffefff 	.word	0xffffefff

08003768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003778:	f7fe fada 	bl	8001d30 <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	18d3      	adds	r3, r2, r3
 8003786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003788:	f7fe fad2 	bl	8001d30 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003790:	4b3a      	ldr	r3, [pc, #232]	; (800387c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	015b      	lsls	r3, r3, #5
 8003796:	0d1b      	lsrs	r3, r3, #20
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	4353      	muls	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	e058      	b.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	d055      	beq.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a6:	f7fe fac3 	bl	8001d30 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d902      	bls.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d142      	bne.n	8003842 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	21e0      	movs	r1, #224	; 0xe0
 80037c8:	438a      	bics	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	2382      	movs	r3, #130	; 0x82
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d113      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x98>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d005      	beq.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	438a      	bics	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	019b      	lsls	r3, r3, #6
 8003808:	429a      	cmp	r2, r3
 800380a:	d110      	bne.n	800382e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	491a      	ldr	r1, [pc, #104]	; (8003880 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003818:	400a      	ands	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	0189      	lsls	r1, r1, #6
 800382a:	430a      	orrs	r2, r1
 800382c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	225d      	movs	r2, #93	; 0x5d
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	225c      	movs	r2, #92	; 0x5c
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e017      	b.n	8003872 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3b01      	subs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	001a      	movs	r2, r3
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d197      	bne.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b008      	add	sp, #32
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	20000180 	.word	0x20000180
 8003880:	ffffdfff 	.word	0xffffdfff

08003884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003892:	2317      	movs	r3, #23
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800389a:	f7fe fa49 	bl	8001d30 <HAL_GetTick>
 800389e:	0002      	movs	r2, r0
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	18d3      	adds	r3, r2, r3
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80038aa:	f7fe fa41 	bl	8001d30 <HAL_GetTick>
 80038ae:	0003      	movs	r3, r0
 80038b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	0013      	movs	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	0d1b      	lsrs	r3, r3, #20
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	4353      	muls	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038d0:	e068      	b.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	23c0      	movs	r3, #192	; 0xc0
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	429a      	cmp	r2, r3
 80038da:	d10a      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	2117      	movs	r1, #23
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	d055      	beq.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038f8:	f7fe fa1a 	bl	8001d30 <HAL_GetTick>
 80038fc:	0002      	movs	r2, r0
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	429a      	cmp	r2, r3
 8003906:	d902      	bls.n	800390e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d142      	bne.n	8003994 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	21e0      	movs	r1, #224	; 0xe0
 800391a:	438a      	bics	r2, r1
 800391c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	2382      	movs	r3, #130	; 0x82
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	429a      	cmp	r2, r3
 8003928:	d113      	bne.n	8003952 <SPI_WaitFifoStateUntilTimeout+0xce>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	429a      	cmp	r2, r3
 8003934:	d005      	beq.n	8003942 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	429a      	cmp	r2, r3
 8003940:	d107      	bne.n	8003952 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	438a      	bics	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	429a      	cmp	r2, r3
 800395c:	d110      	bne.n	8003980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800396a:	400a      	ands	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	0189      	lsls	r1, r1, #6
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	225d      	movs	r2, #93	; 0x5d
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	225c      	movs	r2, #92	; 0x5c
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e010      	b.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d18e      	bne.n	80038d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b00a      	add	sp, #40	; 0x28
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	20000180 	.word	0x20000180
 80039c4:	ffffdfff 	.word	0xffffdfff

080039c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	2382      	movs	r3, #130	; 0x82
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	429a      	cmp	r2, r3
 80039de:	d113      	bne.n	8003a08 <SPI_EndRxTransaction+0x40>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d005      	beq.n	80039f8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	438a      	bics	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	0013      	movs	r3, r2
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	f7ff fea7 	bl	8003768 <SPI_WaitFlagStateUntilTimeout>
 8003a1a:	1e03      	subs	r3, r0, #0
 8003a1c:	d007      	beq.n	8003a2e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a22:	2220      	movs	r2, #32
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e026      	b.n	8003a7c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	2382      	movs	r3, #130	; 0x82
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d11f      	bne.n	8003a7a <SPI_EndRxTransaction+0xb2>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d005      	beq.n	8003a52 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d113      	bne.n	8003a7a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	23c0      	movs	r3, #192	; 0xc0
 8003a56:	00d9      	lsls	r1, r3, #3
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	0013      	movs	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	f7ff ff0f 	bl	8003884 <SPI_WaitFifoStateUntilTimeout>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	2220      	movs	r2, #32
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e000      	b.n	8003a7c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	23c0      	movs	r3, #192	; 0xc0
 8003a94:	0159      	lsls	r1, r3, #5
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f7ff fef0 	bl	8003884 <SPI_WaitFifoStateUntilTimeout>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d007      	beq.n	8003ab8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	2220      	movs	r2, #32
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e027      	b.n	8003b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	0013      	movs	r3, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	f7ff fe4f 	bl	8003768 <SPI_WaitFlagStateUntilTimeout>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d007      	beq.n	8003ade <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e014      	b.n	8003b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	23c0      	movs	r3, #192	; 0xc0
 8003ae2:	00d9      	lsls	r1, r3, #3
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	0013      	movs	r3, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	f7ff fec9 	bl	8003884 <SPI_WaitFifoStateUntilTimeout>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d007      	beq.n	8003b06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	2220      	movs	r2, #32
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e000      	b.n	8003b08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b004      	add	sp, #16
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e046      	b.n	8003bb0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2288      	movs	r2, #136	; 0x88
 8003b26:	589b      	ldr	r3, [r3, r2]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2284      	movs	r2, #132	; 0x84
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fd ff58 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2288      	movs	r2, #136	; 0x88
 8003b40:	2124      	movs	r1, #36	; 0x24
 8003b42:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2101      	movs	r1, #1
 8003b50:	438a      	bics	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f8cc 	bl	8003cf4 <UART_SetConfig>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e024      	b.n	8003bb0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 fb7d 	bl	8004270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <HAL_UART_Init+0xa8>)
 8003b82:	400a      	ands	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	212a      	movs	r1, #42	; 0x2a
 8003b92:	438a      	bics	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 fc15 	bl	80043d8 <UART_CheckIdleState>
 8003bae:	0003      	movs	r3, r0
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	ffffb7ff 	.word	0xffffb7ff

08003bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	1dbb      	adds	r3, r7, #6
 8003bca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2288      	movs	r2, #136	; 0x88
 8003bd0:	589b      	ldr	r3, [r3, r2]
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d000      	beq.n	8003bd8 <HAL_UART_Transmit+0x1c>
 8003bd6:	e088      	b.n	8003cea <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_UART_Transmit+0x2a>
 8003bde:	1dbb      	adds	r3, r7, #6
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e080      	b.n	8003cec <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	015b      	lsls	r3, r3, #5
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d109      	bne.n	8003c0a <HAL_UART_Transmit+0x4e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2201      	movs	r2, #1
 8003c02:	4013      	ands	r3, r2
 8003c04:	d001      	beq.n	8003c0a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e070      	b.n	8003cec <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2290      	movs	r2, #144	; 0x90
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2288      	movs	r2, #136	; 0x88
 8003c16:	2121      	movs	r1, #33	; 0x21
 8003c18:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1a:	f7fe f889 	bl	8001d30 <HAL_GetTick>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1dba      	adds	r2, r7, #6
 8003c26:	2154      	movs	r1, #84	; 0x54
 8003c28:	8812      	ldrh	r2, [r2, #0]
 8003c2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1dba      	adds	r2, r7, #6
 8003c30:	2156      	movs	r1, #86	; 0x56
 8003c32:	8812      	ldrh	r2, [r2, #0]
 8003c34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	015b      	lsls	r3, r3, #5
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x98>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e02c      	b.n	8003cb8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	0013      	movs	r3, r2
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	f000 fc02 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e039      	b.n	8003cec <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	001a      	movs	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	05d2      	lsls	r2, r2, #23
 8003c8a:	0dd2      	lsrs	r2, r2, #23
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2256      	movs	r2, #86	; 0x56
 8003caa:	5a9b      	ldrh	r3, [r3, r2]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b299      	uxth	r1, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2256      	movs	r2, #86	; 0x56
 8003cb6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2256      	movs	r2, #86	; 0x56
 8003cbc:	5a9b      	ldrh	r3, [r3, r2]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1cc      	bne.n	8003c5e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	0013      	movs	r3, r2
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	f000 fbcf 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2288      	movs	r2, #136	; 0x88
 8003ce2:	2120      	movs	r1, #32
 8003ce4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b008      	add	sp, #32
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b090      	sub	sp, #64	; 0x40
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cfc:	231a      	movs	r3, #26
 8003cfe:	2220      	movs	r2, #32
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	19db      	adds	r3, r3, r7
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4aaf      	ldr	r2, [pc, #700]	; (8003fe4 <UART_SetConfig+0x2f0>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4aaa      	ldr	r2, [pc, #680]	; (8003fe8 <UART_SetConfig+0x2f4>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	68d9      	ldr	r1, [r3, #12]
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4aa4      	ldr	r2, [pc, #656]	; (8003fec <UART_SetConfig+0x2f8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d66:	4313      	orrs	r3, r2
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a9f      	ldr	r2, [pc, #636]	; (8003ff0 <UART_SetConfig+0x2fc>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	0019      	movs	r1, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	220f      	movs	r2, #15
 8003d88:	4393      	bics	r3, r2
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	0003      	movs	r3, r0
 8003d96:	430b      	orrs	r3, r1
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a95      	ldr	r2, [pc, #596]	; (8003ff4 <UART_SetConfig+0x300>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d131      	bne.n	8003e08 <UART_SetConfig+0x114>
 8003da4:	4b94      	ldr	r3, [pc, #592]	; (8003ff8 <UART_SetConfig+0x304>)
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2203      	movs	r2, #3
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d01d      	beq.n	8003dec <UART_SetConfig+0xf8>
 8003db0:	d823      	bhi.n	8003dfa <UART_SetConfig+0x106>
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d00c      	beq.n	8003dd0 <UART_SetConfig+0xdc>
 8003db6:	d820      	bhi.n	8003dfa <UART_SetConfig+0x106>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <UART_SetConfig+0xce>
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d00e      	beq.n	8003dde <UART_SetConfig+0xea>
 8003dc0:	e01b      	b.n	8003dfa <UART_SetConfig+0x106>
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e0b4      	b.n	8003f3a <UART_SetConfig+0x246>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2202      	movs	r2, #2
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e0ad      	b.n	8003f3a <UART_SetConfig+0x246>
 8003dde:	231b      	movs	r3, #27
 8003de0:	2220      	movs	r2, #32
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	2204      	movs	r2, #4
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e0a6      	b.n	8003f3a <UART_SetConfig+0x246>
 8003dec:	231b      	movs	r3, #27
 8003dee:	2220      	movs	r2, #32
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2208      	movs	r2, #8
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e09f      	b.n	8003f3a <UART_SetConfig+0x246>
 8003dfa:	231b      	movs	r3, #27
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	2210      	movs	r2, #16
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e098      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a7b      	ldr	r2, [pc, #492]	; (8003ffc <UART_SetConfig+0x308>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d131      	bne.n	8003e76 <UART_SetConfig+0x182>
 8003e12:	4b79      	ldr	r3, [pc, #484]	; (8003ff8 <UART_SetConfig+0x304>)
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	220c      	movs	r2, #12
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d01d      	beq.n	8003e5a <UART_SetConfig+0x166>
 8003e1e:	d823      	bhi.n	8003e68 <UART_SetConfig+0x174>
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d00c      	beq.n	8003e3e <UART_SetConfig+0x14a>
 8003e24:	d820      	bhi.n	8003e68 <UART_SetConfig+0x174>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <UART_SetConfig+0x13c>
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00e      	beq.n	8003e4c <UART_SetConfig+0x158>
 8003e2e:	e01b      	b.n	8003e68 <UART_SetConfig+0x174>
 8003e30:	231b      	movs	r3, #27
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e07d      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e3e:	231b      	movs	r3, #27
 8003e40:	2220      	movs	r2, #32
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	19db      	adds	r3, r3, r7
 8003e46:	2202      	movs	r2, #2
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e076      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e4c:	231b      	movs	r3, #27
 8003e4e:	2220      	movs	r2, #32
 8003e50:	189b      	adds	r3, r3, r2
 8003e52:	19db      	adds	r3, r3, r7
 8003e54:	2204      	movs	r2, #4
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e06f      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e5a:	231b      	movs	r3, #27
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	2208      	movs	r2, #8
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e068      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e68:	231b      	movs	r3, #27
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	189b      	adds	r3, r3, r2
 8003e6e:	19db      	adds	r3, r3, r7
 8003e70:	2210      	movs	r2, #16
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e061      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a61      	ldr	r2, [pc, #388]	; (8004000 <UART_SetConfig+0x30c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d106      	bne.n	8003e8e <UART_SetConfig+0x19a>
 8003e80:	231b      	movs	r3, #27
 8003e82:	2220      	movs	r2, #32
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	19db      	adds	r3, r3, r7
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e055      	b.n	8003f3a <UART_SetConfig+0x246>
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5c      	ldr	r2, [pc, #368]	; (8004004 <UART_SetConfig+0x310>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d106      	bne.n	8003ea6 <UART_SetConfig+0x1b2>
 8003e98:	231b      	movs	r3, #27
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	189b      	adds	r3, r3, r2
 8003e9e:	19db      	adds	r3, r3, r7
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e049      	b.n	8003f3a <UART_SetConfig+0x246>
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a50      	ldr	r2, [pc, #320]	; (8003fec <UART_SetConfig+0x2f8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d13e      	bne.n	8003f2e <UART_SetConfig+0x23a>
 8003eb0:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <UART_SetConfig+0x304>)
 8003eb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eb4:	23c0      	movs	r3, #192	; 0xc0
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	4013      	ands	r3, r2
 8003eba:	22c0      	movs	r2, #192	; 0xc0
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d027      	beq.n	8003f12 <UART_SetConfig+0x21e>
 8003ec2:	22c0      	movs	r2, #192	; 0xc0
 8003ec4:	0112      	lsls	r2, r2, #4
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d82a      	bhi.n	8003f20 <UART_SetConfig+0x22c>
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d011      	beq.n	8003ef6 <UART_SetConfig+0x202>
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	0112      	lsls	r2, r2, #4
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d822      	bhi.n	8003f20 <UART_SetConfig+0x22c>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <UART_SetConfig+0x1f4>
 8003ede:	2280      	movs	r2, #128	; 0x80
 8003ee0:	00d2      	lsls	r2, r2, #3
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <UART_SetConfig+0x210>
 8003ee6:	e01b      	b.n	8003f20 <UART_SetConfig+0x22c>
 8003ee8:	231b      	movs	r3, #27
 8003eea:	2220      	movs	r2, #32
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e021      	b.n	8003f3a <UART_SetConfig+0x246>
 8003ef6:	231b      	movs	r3, #27
 8003ef8:	2220      	movs	r2, #32
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	19db      	adds	r3, r3, r7
 8003efe:	2202      	movs	r2, #2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e01a      	b.n	8003f3a <UART_SetConfig+0x246>
 8003f04:	231b      	movs	r3, #27
 8003f06:	2220      	movs	r2, #32
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e013      	b.n	8003f3a <UART_SetConfig+0x246>
 8003f12:	231b      	movs	r3, #27
 8003f14:	2220      	movs	r2, #32
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	19db      	adds	r3, r3, r7
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e00c      	b.n	8003f3a <UART_SetConfig+0x246>
 8003f20:	231b      	movs	r3, #27
 8003f22:	2220      	movs	r2, #32
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	2210      	movs	r2, #16
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e005      	b.n	8003f3a <UART_SetConfig+0x246>
 8003f2e:	231b      	movs	r3, #27
 8003f30:	2220      	movs	r2, #32
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	19db      	adds	r3, r3, r7
 8003f36:	2210      	movs	r2, #16
 8003f38:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <UART_SetConfig+0x2f8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d000      	beq.n	8003f46 <UART_SetConfig+0x252>
 8003f44:	e0a9      	b.n	800409a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f46:	231b      	movs	r3, #27
 8003f48:	2220      	movs	r2, #32
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	19db      	adds	r3, r3, r7
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d015      	beq.n	8003f80 <UART_SetConfig+0x28c>
 8003f54:	dc18      	bgt.n	8003f88 <UART_SetConfig+0x294>
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d00d      	beq.n	8003f76 <UART_SetConfig+0x282>
 8003f5a:	dc15      	bgt.n	8003f88 <UART_SetConfig+0x294>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <UART_SetConfig+0x272>
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d005      	beq.n	8003f70 <UART_SetConfig+0x27c>
 8003f64:	e010      	b.n	8003f88 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7fe fe5b 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f6e:	e014      	b.n	8003f9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b25      	ldr	r3, [pc, #148]	; (8004008 <UART_SetConfig+0x314>)
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f74:	e011      	b.n	8003f9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7fe fdc7 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f7e:	e00c      	b.n	8003f9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f86:	e008      	b.n	8003f9a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f8c:	231a      	movs	r3, #26
 8003f8e:	2220      	movs	r2, #32
 8003f90:	189b      	adds	r3, r3, r2
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
        break;
 8003f98:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d100      	bne.n	8003fa2 <UART_SetConfig+0x2ae>
 8003fa0:	e14b      	b.n	800423a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa6:	4b19      	ldr	r3, [pc, #100]	; (800400c <UART_SetConfig+0x318>)
 8003fa8:	0052      	lsls	r2, r2, #1
 8003faa:	5ad3      	ldrh	r3, [r2, r3]
 8003fac:	0019      	movs	r1, r3
 8003fae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fb0:	f7fd f85a 	bl	8001068 <__udivsi3>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d305      	bcc.n	8003fd4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d91d      	bls.n	8004010 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003fd4:	231a      	movs	r3, #26
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e12b      	b.n	800423a <UART_SetConfig+0x546>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	cfff69f3 	.word	0xcfff69f3
 8003fe8:	ffffcfff 	.word	0xffffcfff
 8003fec:	40008000 	.word	0x40008000
 8003ff0:	11fff4ff 	.word	0x11fff4ff
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40004800 	.word	0x40004800
 8004004:	40004c00 	.word	0x40004c00
 8004008:	00f42400 	.word	0x00f42400
 800400c:	08005a90 	.word	0x08005a90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401c:	4b92      	ldr	r3, [pc, #584]	; (8004268 <UART_SetConfig+0x574>)
 800401e:	0052      	lsls	r2, r2, #1
 8004020:	5ad3      	ldrh	r3, [r2, r3]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	69b8      	ldr	r0, [r7, #24]
 800402e:	69f9      	ldr	r1, [r7, #28]
 8004030:	f7fd f990 	bl	8001354 <__aeabi_uldivmod>
 8004034:	0002      	movs	r2, r0
 8004036:	000b      	movs	r3, r1
 8004038:	0e11      	lsrs	r1, r2, #24
 800403a:	021d      	lsls	r5, r3, #8
 800403c:	430d      	orrs	r5, r1
 800403e:	0214      	lsls	r4, r2, #8
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	1900      	adds	r0, r0, r4
 8004052:	4169      	adcs	r1, r5
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f7fd f977 	bl	8001354 <__aeabi_uldivmod>
 8004066:	0002      	movs	r2, r0
 8004068:	000b      	movs	r3, r1
 800406a:	0013      	movs	r3, r2
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800406e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004070:	23c0      	movs	r3, #192	; 0xc0
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d309      	bcc.n	800408c <UART_SetConfig+0x398>
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	035b      	lsls	r3, r3, #13
 800407e:	429a      	cmp	r2, r3
 8004080:	d204      	bcs.n	800408c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e0d6      	b.n	800423a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800408c:	231a      	movs	r3, #26
 800408e:	2220      	movs	r2, #32
 8004090:	189b      	adds	r3, r3, r2
 8004092:	19db      	adds	r3, r3, r7
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e0cf      	b.n	800423a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d000      	beq.n	80040a8 <UART_SetConfig+0x3b4>
 80040a6:	e070      	b.n	800418a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80040a8:	231b      	movs	r3, #27
 80040aa:	2220      	movs	r2, #32
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d015      	beq.n	80040e2 <UART_SetConfig+0x3ee>
 80040b6:	dc18      	bgt.n	80040ea <UART_SetConfig+0x3f6>
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d00d      	beq.n	80040d8 <UART_SetConfig+0x3e4>
 80040bc:	dc15      	bgt.n	80040ea <UART_SetConfig+0x3f6>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <UART_SetConfig+0x3d4>
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d005      	beq.n	80040d2 <UART_SetConfig+0x3de>
 80040c6:	e010      	b.n	80040ea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7fe fdaa 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 80040cc:	0003      	movs	r3, r0
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040d0:	e014      	b.n	80040fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d2:	4b66      	ldr	r3, [pc, #408]	; (800426c <UART_SetConfig+0x578>)
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040d6:	e011      	b.n	80040fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d8:	f7fe fd16 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80040dc:	0003      	movs	r3, r0
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040e0:	e00c      	b.n	80040fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040e8:	e008      	b.n	80040fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040ee:	231a      	movs	r3, #26
 80040f0:	2220      	movs	r2, #32
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
        break;
 80040fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d100      	bne.n	8004104 <UART_SetConfig+0x410>
 8004102:	e09a      	b.n	800423a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004108:	4b57      	ldr	r3, [pc, #348]	; (8004268 <UART_SetConfig+0x574>)
 800410a:	0052      	lsls	r2, r2, #1
 800410c:	5ad3      	ldrh	r3, [r2, r3]
 800410e:	0019      	movs	r1, r3
 8004110:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004112:	f7fc ffa9 	bl	8001068 <__udivsi3>
 8004116:	0003      	movs	r3, r0
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	18d2      	adds	r2, r2, r3
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	0019      	movs	r1, r3
 8004128:	0010      	movs	r0, r2
 800412a:	f7fc ff9d 	bl	8001068 <__udivsi3>
 800412e:	0003      	movs	r3, r0
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d921      	bls.n	800417c <UART_SetConfig+0x488>
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	429a      	cmp	r2, r3
 8004140:	d21c      	bcs.n	800417c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	b29a      	uxth	r2, r3
 8004146:	200e      	movs	r0, #14
 8004148:	2420      	movs	r4, #32
 800414a:	1903      	adds	r3, r0, r4
 800414c:	19db      	adds	r3, r3, r7
 800414e:	210f      	movs	r1, #15
 8004150:	438a      	bics	r2, r1
 8004152:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	2207      	movs	r2, #7
 800415c:	4013      	ands	r3, r2
 800415e:	b299      	uxth	r1, r3
 8004160:	1903      	adds	r3, r0, r4
 8004162:	19db      	adds	r3, r3, r7
 8004164:	1902      	adds	r2, r0, r4
 8004166:	19d2      	adds	r2, r2, r7
 8004168:	8812      	ldrh	r2, [r2, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	1902      	adds	r2, r0, r4
 8004174:	19d2      	adds	r2, r2, r7
 8004176:	8812      	ldrh	r2, [r2, #0]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	e05e      	b.n	800423a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800417c:	231a      	movs	r3, #26
 800417e:	2220      	movs	r2, #32
 8004180:	189b      	adds	r3, r3, r2
 8004182:	19db      	adds	r3, r3, r7
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e057      	b.n	800423a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800418a:	231b      	movs	r3, #27
 800418c:	2220      	movs	r2, #32
 800418e:	189b      	adds	r3, r3, r2
 8004190:	19db      	adds	r3, r3, r7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d015      	beq.n	80041c4 <UART_SetConfig+0x4d0>
 8004198:	dc18      	bgt.n	80041cc <UART_SetConfig+0x4d8>
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00d      	beq.n	80041ba <UART_SetConfig+0x4c6>
 800419e:	dc15      	bgt.n	80041cc <UART_SetConfig+0x4d8>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <UART_SetConfig+0x4b6>
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d005      	beq.n	80041b4 <UART_SetConfig+0x4c0>
 80041a8:	e010      	b.n	80041cc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041aa:	f7fe fd39 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 80041ae:	0003      	movs	r3, r0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041b2:	e014      	b.n	80041de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <UART_SetConfig+0x578>)
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041b8:	e011      	b.n	80041de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ba:	f7fe fca5 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80041be:	0003      	movs	r3, r0
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041c2:	e00c      	b.n	80041de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041ca:	e008      	b.n	80041de <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80041d0:	231a      	movs	r3, #26
 80041d2:	2220      	movs	r2, #32
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
        break;
 80041dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02a      	beq.n	800423a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <UART_SetConfig+0x574>)
 80041ea:	0052      	lsls	r2, r2, #1
 80041ec:	5ad3      	ldrh	r3, [r2, r3]
 80041ee:	0019      	movs	r1, r3
 80041f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041f2:	f7fc ff39 	bl	8001068 <__udivsi3>
 80041f6:	0003      	movs	r3, r0
 80041f8:	001a      	movs	r2, r3
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	18d2      	adds	r2, r2, r3
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	0019      	movs	r1, r3
 8004208:	0010      	movs	r0, r2
 800420a:	f7fc ff2d 	bl	8001068 <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d90a      	bls.n	800422e <UART_SetConfig+0x53a>
 8004218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	429a      	cmp	r2, r3
 8004220:	d205      	bcs.n	800422e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	b29a      	uxth	r2, r3
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60da      	str	r2, [r3, #12]
 800422c:	e005      	b.n	800423a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800422e:	231a      	movs	r3, #26
 8004230:	2220      	movs	r2, #32
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19db      	adds	r3, r3, r7
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	226a      	movs	r2, #106	; 0x6a
 800423e:	2101      	movs	r1, #1
 8004240:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	2268      	movs	r2, #104	; 0x68
 8004246:	2101      	movs	r1, #1
 8004248:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2200      	movs	r2, #0
 800424e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2200      	movs	r2, #0
 8004254:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004256:	231a      	movs	r3, #26
 8004258:	2220      	movs	r2, #32
 800425a:	189b      	adds	r3, r3, r2
 800425c:	19db      	adds	r3, r3, r7
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b010      	add	sp, #64	; 0x40
 8004266:	bdb0      	pop	{r4, r5, r7, pc}
 8004268:	08005a90 	.word	0x08005a90
 800426c:	00f42400 	.word	0x00f42400

08004270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d00b      	beq.n	800429a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <UART_AdvFeatureConfig+0x144>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	2202      	movs	r2, #2
 80042a0:	4013      	ands	r3, r2
 80042a2:	d00b      	beq.n	80042bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <UART_AdvFeatureConfig+0x148>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	2204      	movs	r2, #4
 80042c2:	4013      	ands	r3, r2
 80042c4:	d00b      	beq.n	80042de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <UART_AdvFeatureConfig+0x14c>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	2208      	movs	r2, #8
 80042e4:	4013      	ands	r3, r2
 80042e6:	d00b      	beq.n	8004300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <UART_AdvFeatureConfig+0x150>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	0019      	movs	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	2210      	movs	r2, #16
 8004306:	4013      	ands	r3, r2
 8004308:	d00b      	beq.n	8004322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <UART_AdvFeatureConfig+0x154>)
 8004312:	4013      	ands	r3, r2
 8004314:	0019      	movs	r1, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	2220      	movs	r2, #32
 8004328:	4013      	ands	r3, r2
 800432a:	d00b      	beq.n	8004344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <UART_AdvFeatureConfig+0x158>)
 8004334:	4013      	ands	r3, r2
 8004336:	0019      	movs	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	2240      	movs	r2, #64	; 0x40
 800434a:	4013      	ands	r3, r2
 800434c:	d01d      	beq.n	800438a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <UART_AdvFeatureConfig+0x15c>)
 8004356:	4013      	ands	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	035b      	lsls	r3, r3, #13
 800436e:	429a      	cmp	r2, r3
 8004370:	d10b      	bne.n	800438a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <UART_AdvFeatureConfig+0x160>)
 800437a:	4013      	ands	r3, r2
 800437c:	0019      	movs	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	4013      	ands	r3, r2
 8004392:	d00b      	beq.n	80043ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <UART_AdvFeatureConfig+0x164>)
 800439c:	4013      	ands	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }
}
 80043ac:	46c0      	nop			; (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b002      	add	sp, #8
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	fffdffff 	.word	0xfffdffff
 80043b8:	fffeffff 	.word	0xfffeffff
 80043bc:	fffbffff 	.word	0xfffbffff
 80043c0:	ffff7fff 	.word	0xffff7fff
 80043c4:	ffffefff 	.word	0xffffefff
 80043c8:	ffffdfff 	.word	0xffffdfff
 80043cc:	ffefffff 	.word	0xffefffff
 80043d0:	ff9fffff 	.word	0xff9fffff
 80043d4:	fff7ffff 	.word	0xfff7ffff

080043d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2290      	movs	r2, #144	; 0x90
 80043e4:	2100      	movs	r1, #0
 80043e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e8:	f7fd fca2 	bl	8001d30 <HAL_GetTick>
 80043ec:	0003      	movs	r3, r0
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2208      	movs	r2, #8
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d10c      	bne.n	8004418 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	0391      	lsls	r1, r2, #14
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4a1a      	ldr	r2, [pc, #104]	; (8004470 <UART_CheckIdleState+0x98>)
 8004408:	9200      	str	r2, [sp, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	f000 f832 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8004410:	1e03      	subs	r3, r0, #0
 8004412:	d001      	beq.n	8004418 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e026      	b.n	8004466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2204      	movs	r2, #4
 8004420:	4013      	ands	r3, r2
 8004422:	2b04      	cmp	r3, #4
 8004424:	d10c      	bne.n	8004440 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	03d1      	lsls	r1, r2, #15
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <UART_CheckIdleState+0x98>)
 8004430:	9200      	str	r2, [sp, #0]
 8004432:	2200      	movs	r2, #0
 8004434:	f000 f81e 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8004438:	1e03      	subs	r3, r0, #0
 800443a:	d001      	beq.n	8004440 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e012      	b.n	8004466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2288      	movs	r2, #136	; 0x88
 8004444:	2120      	movs	r1, #32
 8004446:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	228c      	movs	r2, #140	; 0x8c
 800444c:	2120      	movs	r1, #32
 800444e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	; 0x84
 8004460:	2100      	movs	r1, #0
 8004462:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b004      	add	sp, #16
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	01ffffff 	.word	0x01ffffff

08004474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b094      	sub	sp, #80	; 0x50
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	1dfb      	adds	r3, r7, #7
 8004482:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	e0a7      	b.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004488:	3301      	adds	r3, #1
 800448a:	d100      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x1a>
 800448c:	e0a3      	b.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7fd fc4f 	bl	8001d30 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800449e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d13f      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a4:	f3ef 8310 	mrs	r3, PRIMASK
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044ac:	647b      	str	r3, [r7, #68]	; 0x44
 80044ae:	2301      	movs	r3, #1
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	f383 8810 	msr	PRIMASK, r3
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	494e      	ldr	r1, [pc, #312]	; (8004600 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80044c6:	400a      	ands	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	f383 8810 	msr	PRIMASK, r3
}
 80044d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d6:	f3ef 8310 	mrs	r3, PRIMASK
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
 80044e0:	2301      	movs	r3, #1
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2101      	movs	r1, #1
 80044f8:	438a      	bics	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	f383 8810 	msr	PRIMASK, r3
}
 8004506:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2288      	movs	r2, #136	; 0x88
 800450c:	2120      	movs	r1, #32
 800450e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	228c      	movs	r2, #140	; 0x8c
 8004514:	2120      	movs	r1, #32
 8004516:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2284      	movs	r2, #132	; 0x84
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e069      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2204      	movs	r2, #4
 800452c:	4013      	ands	r3, r2
 800452e:	d052      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	401a      	ands	r2, r3
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	429a      	cmp	r2, r3
 8004542:	d148      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454e:	f3ef 8310 	mrs	r3, PRIMASK
 8004552:	613b      	str	r3, [r7, #16]
  return(result);
 8004554:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4924      	ldr	r1, [pc, #144]	; (8004600 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004570:	400a      	ands	r2, r1
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f383 8810 	msr	PRIMASK, r3
}
 800457e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004580:	f3ef 8310 	mrs	r3, PRIMASK
 8004584:	61fb      	str	r3, [r7, #28]
  return(result);
 8004586:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
 800458a:	2301      	movs	r3, #1
 800458c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	438a      	bics	r2, r1
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	f383 8810 	msr	PRIMASK, r3
}
 80045b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2288      	movs	r2, #136	; 0x88
 80045b6:	2120      	movs	r1, #32
 80045b8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	228c      	movs	r2, #140	; 0x8c
 80045be:	2120      	movs	r1, #32
 80045c0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2290      	movs	r2, #144	; 0x90
 80045c6:	2120      	movs	r1, #32
 80045c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2284      	movs	r2, #132	; 0x84
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e010      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	425a      	negs	r2, r3
 80045e6:	4153      	adcs	r3, r2
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	001a      	movs	r2, r3
 80045ec:	1dfb      	adds	r3, r7, #7
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d100      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x182>
 80045f4:	e747      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b014      	add	sp, #80	; 0x50
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	fffffe5f 	.word	0xfffffe5f

08004604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2284      	movs	r2, #132	; 0x84
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_UARTEx_DisableFifoMode+0x16>
 8004616:	2302      	movs	r3, #2
 8004618:	e027      	b.n	800466a <HAL_UARTEx_DisableFifoMode+0x66>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2284      	movs	r2, #132	; 0x84
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2288      	movs	r2, #136	; 0x88
 8004626:	2124      	movs	r1, #36	; 0x24
 8004628:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004646:	4013      	ands	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2288      	movs	r2, #136	; 0x88
 800465c:	2120      	movs	r1, #32
 800465e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2284      	movs	r2, #132	; 0x84
 8004664:	2100      	movs	r1, #0
 8004666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	dfffffff 	.word	0xdfffffff

08004678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2284      	movs	r2, #132	; 0x84
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800468c:	2302      	movs	r3, #2
 800468e:	e02e      	b.n	80046ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2284      	movs	r2, #132	; 0x84
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2288      	movs	r2, #136	; 0x88
 800469c:	2124      	movs	r1, #36	; 0x24
 800469e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2101      	movs	r1, #1
 80046b4:	438a      	bics	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	08d9      	lsrs	r1, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f854 	bl	800477c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2288      	movs	r2, #136	; 0x88
 80046e0:	2120      	movs	r1, #32
 80046e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2284      	movs	r2, #132	; 0x84
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b004      	add	sp, #16
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2284      	movs	r2, #132	; 0x84
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e02f      	b.n	8004770 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2284      	movs	r2, #132	; 0x84
 8004714:	2101      	movs	r1, #1
 8004716:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2288      	movs	r2, #136	; 0x88
 800471c:	2124      	movs	r1, #36	; 0x24
 800471e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 f813 	bl	800477c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2288      	movs	r2, #136	; 0x88
 8004762:	2120      	movs	r1, #32
 8004764:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2284      	movs	r2, #132	; 0x84
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bd80      	pop	{r7, pc}
 8004778:	f1ffffff 	.word	0xf1ffffff

0800477c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	226a      	movs	r2, #106	; 0x6a
 8004790:	2101      	movs	r1, #1
 8004792:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2268      	movs	r2, #104	; 0x68
 8004798:	2101      	movs	r1, #1
 800479a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800479c:	e043      	b.n	8004826 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800479e:	260f      	movs	r6, #15
 80047a0:	19bb      	adds	r3, r7, r6
 80047a2:	2208      	movs	r2, #8
 80047a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047a6:	200e      	movs	r0, #14
 80047a8:	183b      	adds	r3, r7, r0
 80047aa:	2208      	movs	r2, #8
 80047ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0e5b      	lsrs	r3, r3, #25
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	240d      	movs	r4, #13
 80047ba:	193b      	adds	r3, r7, r4
 80047bc:	2107      	movs	r1, #7
 80047be:	400a      	ands	r2, r1
 80047c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	0f5b      	lsrs	r3, r3, #29
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	250c      	movs	r5, #12
 80047ce:	197b      	adds	r3, r7, r5
 80047d0:	2107      	movs	r1, #7
 80047d2:	400a      	ands	r2, r1
 80047d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047d6:	183b      	adds	r3, r7, r0
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	197a      	adds	r2, r7, r5
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	4914      	ldr	r1, [pc, #80]	; (8004830 <UARTEx_SetNbDataToProcess+0xb4>)
 80047e0:	5c8a      	ldrb	r2, [r1, r2]
 80047e2:	435a      	muls	r2, r3
 80047e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047e6:	197b      	adds	r3, r7, r5
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <UARTEx_SetNbDataToProcess+0xb8>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ee:	0019      	movs	r1, r3
 80047f0:	f7fc fcc4 	bl	800117c <__divsi3>
 80047f4:	0003      	movs	r3, r0
 80047f6:	b299      	uxth	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	226a      	movs	r2, #106	; 0x6a
 80047fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047fe:	19bb      	adds	r3, r7, r6
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	193a      	adds	r2, r7, r4
 8004804:	7812      	ldrb	r2, [r2, #0]
 8004806:	490a      	ldr	r1, [pc, #40]	; (8004830 <UARTEx_SetNbDataToProcess+0xb4>)
 8004808:	5c8a      	ldrb	r2, [r1, r2]
 800480a:	435a      	muls	r2, r3
 800480c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800480e:	193b      	adds	r3, r7, r4
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <UARTEx_SetNbDataToProcess+0xb8>)
 8004814:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004816:	0019      	movs	r1, r3
 8004818:	f7fc fcb0 	bl	800117c <__divsi3>
 800481c:	0003      	movs	r3, r0
 800481e:	b299      	uxth	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2268      	movs	r2, #104	; 0x68
 8004824:	5299      	strh	r1, [r3, r2]
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b005      	add	sp, #20
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	08005aa8 	.word	0x08005aa8
 8004834:	08005ab0 	.word	0x08005ab0

08004838 <__errno>:
 8004838:	4b01      	ldr	r3, [pc, #4]	; (8004840 <__errno+0x8>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	4770      	bx	lr
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	2000018c 	.word	0x2000018c

08004844 <__libc_init_array>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	2600      	movs	r6, #0
 8004848:	4d0c      	ldr	r5, [pc, #48]	; (800487c <__libc_init_array+0x38>)
 800484a:	4c0d      	ldr	r4, [pc, #52]	; (8004880 <__libc_init_array+0x3c>)
 800484c:	1b64      	subs	r4, r4, r5
 800484e:	10a4      	asrs	r4, r4, #2
 8004850:	42a6      	cmp	r6, r4
 8004852:	d109      	bne.n	8004868 <__libc_init_array+0x24>
 8004854:	2600      	movs	r6, #0
 8004856:	f001 f875 	bl	8005944 <_init>
 800485a:	4d0a      	ldr	r5, [pc, #40]	; (8004884 <__libc_init_array+0x40>)
 800485c:	4c0a      	ldr	r4, [pc, #40]	; (8004888 <__libc_init_array+0x44>)
 800485e:	1b64      	subs	r4, r4, r5
 8004860:	10a4      	asrs	r4, r4, #2
 8004862:	42a6      	cmp	r6, r4
 8004864:	d105      	bne.n	8004872 <__libc_init_array+0x2e>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	00b3      	lsls	r3, r6, #2
 800486a:	58eb      	ldr	r3, [r5, r3]
 800486c:	4798      	blx	r3
 800486e:	3601      	adds	r6, #1
 8004870:	e7ee      	b.n	8004850 <__libc_init_array+0xc>
 8004872:	00b3      	lsls	r3, r6, #2
 8004874:	58eb      	ldr	r3, [r5, r3]
 8004876:	4798      	blx	r3
 8004878:	3601      	adds	r6, #1
 800487a:	e7f2      	b.n	8004862 <__libc_init_array+0x1e>
 800487c:	08005b58 	.word	0x08005b58
 8004880:	08005b58 	.word	0x08005b58
 8004884:	08005b58 	.word	0x08005b58
 8004888:	08005b5c 	.word	0x08005b5c

0800488c <memset>:
 800488c:	0003      	movs	r3, r0
 800488e:	1882      	adds	r2, r0, r2
 8004890:	4293      	cmp	r3, r2
 8004892:	d100      	bne.n	8004896 <memset+0xa>
 8004894:	4770      	bx	lr
 8004896:	7019      	strb	r1, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	e7f9      	b.n	8004890 <memset+0x4>

0800489c <iprintf>:
 800489c:	b40f      	push	{r0, r1, r2, r3}
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <iprintf+0x30>)
 80048a0:	b513      	push	{r0, r1, r4, lr}
 80048a2:	681c      	ldr	r4, [r3, #0]
 80048a4:	2c00      	cmp	r4, #0
 80048a6:	d005      	beq.n	80048b4 <iprintf+0x18>
 80048a8:	69a3      	ldr	r3, [r4, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <iprintf+0x18>
 80048ae:	0020      	movs	r0, r4
 80048b0:	f000 fa86 	bl	8004dc0 <__sinit>
 80048b4:	ab05      	add	r3, sp, #20
 80048b6:	0020      	movs	r0, r4
 80048b8:	9a04      	ldr	r2, [sp, #16]
 80048ba:	68a1      	ldr	r1, [r4, #8]
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	f000 fc99 	bl	80051f4 <_vfiprintf_r>
 80048c2:	bc16      	pop	{r1, r2, r4}
 80048c4:	bc08      	pop	{r3}
 80048c6:	b004      	add	sp, #16
 80048c8:	4718      	bx	r3
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	2000018c 	.word	0x2000018c

080048d0 <_puts_r>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	0005      	movs	r5, r0
 80048d4:	000e      	movs	r6, r1
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d004      	beq.n	80048e4 <_puts_r+0x14>
 80048da:	6983      	ldr	r3, [r0, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <_puts_r+0x14>
 80048e0:	f000 fa6e 	bl	8004dc0 <__sinit>
 80048e4:	69ab      	ldr	r3, [r5, #24]
 80048e6:	68ac      	ldr	r4, [r5, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <_puts_r+0x22>
 80048ec:	0028      	movs	r0, r5
 80048ee:	f000 fa67 	bl	8004dc0 <__sinit>
 80048f2:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <_puts_r+0xd8>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	d122      	bne.n	800493e <_puts_r+0x6e>
 80048f8:	686c      	ldr	r4, [r5, #4]
 80048fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048fc:	07db      	lsls	r3, r3, #31
 80048fe:	d405      	bmi.n	800490c <_puts_r+0x3c>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	059b      	lsls	r3, r3, #22
 8004904:	d402      	bmi.n	800490c <_puts_r+0x3c>
 8004906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004908:	f000 fafb 	bl	8004f02 <__retarget_lock_acquire_recursive>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	071b      	lsls	r3, r3, #28
 8004910:	d502      	bpl.n	8004918 <_puts_r+0x48>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d129      	bne.n	800496c <_puts_r+0x9c>
 8004918:	0021      	movs	r1, r4
 800491a:	0028      	movs	r0, r5
 800491c:	f000 f8aa 	bl	8004a74 <__swsetup_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	d023      	beq.n	800496c <_puts_r+0x9c>
 8004924:	2501      	movs	r5, #1
 8004926:	426d      	negs	r5, r5
 8004928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800492a:	07db      	lsls	r3, r3, #31
 800492c:	d405      	bmi.n	800493a <_puts_r+0x6a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	059b      	lsls	r3, r3, #22
 8004932:	d402      	bmi.n	800493a <_puts_r+0x6a>
 8004934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004936:	f000 fae5 	bl	8004f04 <__retarget_lock_release_recursive>
 800493a:	0028      	movs	r0, r5
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <_puts_r+0xdc>)
 8004940:	429c      	cmp	r4, r3
 8004942:	d101      	bne.n	8004948 <_puts_r+0x78>
 8004944:	68ac      	ldr	r4, [r5, #8]
 8004946:	e7d8      	b.n	80048fa <_puts_r+0x2a>
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <_puts_r+0xe0>)
 800494a:	429c      	cmp	r4, r3
 800494c:	d1d5      	bne.n	80048fa <_puts_r+0x2a>
 800494e:	68ec      	ldr	r4, [r5, #12]
 8004950:	e7d3      	b.n	80048fa <_puts_r+0x2a>
 8004952:	3601      	adds	r6, #1
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	da04      	bge.n	8004964 <_puts_r+0x94>
 800495a:	69a2      	ldr	r2, [r4, #24]
 800495c:	429a      	cmp	r2, r3
 800495e:	dc16      	bgt.n	800498e <_puts_r+0xbe>
 8004960:	290a      	cmp	r1, #10
 8004962:	d014      	beq.n	800498e <_puts_r+0xbe>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	7019      	strb	r1, [r3, #0]
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	7831      	ldrb	r1, [r6, #0]
 8004970:	3b01      	subs	r3, #1
 8004972:	2900      	cmp	r1, #0
 8004974:	d1ed      	bne.n	8004952 <_puts_r+0x82>
 8004976:	60a3      	str	r3, [r4, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	da0f      	bge.n	800499c <_puts_r+0xcc>
 800497c:	0028      	movs	r0, r5
 800497e:	0022      	movs	r2, r4
 8004980:	310a      	adds	r1, #10
 8004982:	f000 f821 	bl	80049c8 <__swbuf_r>
 8004986:	250a      	movs	r5, #10
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d1cd      	bne.n	8004928 <_puts_r+0x58>
 800498c:	e7ca      	b.n	8004924 <_puts_r+0x54>
 800498e:	0022      	movs	r2, r4
 8004990:	0028      	movs	r0, r5
 8004992:	f000 f819 	bl	80049c8 <__swbuf_r>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	d1e8      	bne.n	800496c <_puts_r+0x9c>
 800499a:	e7c3      	b.n	8004924 <_puts_r+0x54>
 800499c:	250a      	movs	r5, #10
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	6022      	str	r2, [r4, #0]
 80049a4:	701d      	strb	r5, [r3, #0]
 80049a6:	e7bf      	b.n	8004928 <_puts_r+0x58>
 80049a8:	08005adc 	.word	0x08005adc
 80049ac:	08005afc 	.word	0x08005afc
 80049b0:	08005abc 	.word	0x08005abc

080049b4 <puts>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <puts+0x10>)
 80049b8:	0001      	movs	r1, r0
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	f7ff ff88 	bl	80048d0 <_puts_r>
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	2000018c 	.word	0x2000018c

080049c8 <__swbuf_r>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	0005      	movs	r5, r0
 80049cc:	000e      	movs	r6, r1
 80049ce:	0014      	movs	r4, r2
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d004      	beq.n	80049de <__swbuf_r+0x16>
 80049d4:	6983      	ldr	r3, [r0, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <__swbuf_r+0x16>
 80049da:	f000 f9f1 	bl	8004dc0 <__sinit>
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <__swbuf_r+0xa0>)
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d12e      	bne.n	8004a42 <__swbuf_r+0x7a>
 80049e4:	686c      	ldr	r4, [r5, #4]
 80049e6:	69a3      	ldr	r3, [r4, #24]
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	d532      	bpl.n	8004a56 <__swbuf_r+0x8e>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02f      	beq.n	8004a56 <__swbuf_r+0x8e>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	6922      	ldr	r2, [r4, #16]
 80049fa:	b2f7      	uxtb	r7, r6
 80049fc:	1a98      	subs	r0, r3, r2
 80049fe:	6963      	ldr	r3, [r4, #20]
 8004a00:	b2f6      	uxtb	r6, r6
 8004a02:	4283      	cmp	r3, r0
 8004a04:	dc05      	bgt.n	8004a12 <__swbuf_r+0x4a>
 8004a06:	0021      	movs	r1, r4
 8004a08:	0028      	movs	r0, r5
 8004a0a:	f000 f937 	bl	8004c7c <_fflush_r>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d127      	bne.n	8004a62 <__swbuf_r+0x9a>
 8004a12:	68a3      	ldr	r3, [r4, #8]
 8004a14:	3001      	adds	r0, #1
 8004a16:	3b01      	subs	r3, #1
 8004a18:	60a3      	str	r3, [r4, #8]
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	6022      	str	r2, [r4, #0]
 8004a20:	701f      	strb	r7, [r3, #0]
 8004a22:	6963      	ldr	r3, [r4, #20]
 8004a24:	4283      	cmp	r3, r0
 8004a26:	d004      	beq.n	8004a32 <__swbuf_r+0x6a>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	07db      	lsls	r3, r3, #31
 8004a2c:	d507      	bpl.n	8004a3e <__swbuf_r+0x76>
 8004a2e:	2e0a      	cmp	r6, #10
 8004a30:	d105      	bne.n	8004a3e <__swbuf_r+0x76>
 8004a32:	0021      	movs	r1, r4
 8004a34:	0028      	movs	r0, r5
 8004a36:	f000 f921 	bl	8004c7c <_fflush_r>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d111      	bne.n	8004a62 <__swbuf_r+0x9a>
 8004a3e:	0030      	movs	r0, r6
 8004a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <__swbuf_r+0xa4>)
 8004a44:	429c      	cmp	r4, r3
 8004a46:	d101      	bne.n	8004a4c <__swbuf_r+0x84>
 8004a48:	68ac      	ldr	r4, [r5, #8]
 8004a4a:	e7cc      	b.n	80049e6 <__swbuf_r+0x1e>
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <__swbuf_r+0xa8>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d1c9      	bne.n	80049e6 <__swbuf_r+0x1e>
 8004a52:	68ec      	ldr	r4, [r5, #12]
 8004a54:	e7c7      	b.n	80049e6 <__swbuf_r+0x1e>
 8004a56:	0021      	movs	r1, r4
 8004a58:	0028      	movs	r0, r5
 8004a5a:	f000 f80b 	bl	8004a74 <__swsetup_r>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d0c9      	beq.n	80049f6 <__swbuf_r+0x2e>
 8004a62:	2601      	movs	r6, #1
 8004a64:	4276      	negs	r6, r6
 8004a66:	e7ea      	b.n	8004a3e <__swbuf_r+0x76>
 8004a68:	08005adc 	.word	0x08005adc
 8004a6c:	08005afc 	.word	0x08005afc
 8004a70:	08005abc 	.word	0x08005abc

08004a74 <__swsetup_r>:
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <__swsetup_r+0xe0>)
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	681d      	ldr	r5, [r3, #0]
 8004a7a:	0006      	movs	r6, r0
 8004a7c:	000c      	movs	r4, r1
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	d005      	beq.n	8004a8e <__swsetup_r+0x1a>
 8004a82:	69ab      	ldr	r3, [r5, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <__swsetup_r+0x1a>
 8004a88:	0028      	movs	r0, r5
 8004a8a:	f000 f999 	bl	8004dc0 <__sinit>
 8004a8e:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <__swsetup_r+0xe4>)
 8004a90:	429c      	cmp	r4, r3
 8004a92:	d10f      	bne.n	8004ab4 <__swsetup_r+0x40>
 8004a94:	686c      	ldr	r4, [r5, #4]
 8004a96:	230c      	movs	r3, #12
 8004a98:	5ee2      	ldrsh	r2, [r4, r3]
 8004a9a:	b293      	uxth	r3, r2
 8004a9c:	0711      	lsls	r1, r2, #28
 8004a9e:	d42d      	bmi.n	8004afc <__swsetup_r+0x88>
 8004aa0:	06d9      	lsls	r1, r3, #27
 8004aa2:	d411      	bmi.n	8004ac8 <__swsetup_r+0x54>
 8004aa4:	2309      	movs	r3, #9
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	6033      	str	r3, [r6, #0]
 8004aaa:	3337      	adds	r3, #55	; 0x37
 8004aac:	4313      	orrs	r3, r2
 8004aae:	81a3      	strh	r3, [r4, #12]
 8004ab0:	4240      	negs	r0, r0
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	4b29      	ldr	r3, [pc, #164]	; (8004b5c <__swsetup_r+0xe8>)
 8004ab6:	429c      	cmp	r4, r3
 8004ab8:	d101      	bne.n	8004abe <__swsetup_r+0x4a>
 8004aba:	68ac      	ldr	r4, [r5, #8]
 8004abc:	e7eb      	b.n	8004a96 <__swsetup_r+0x22>
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <__swsetup_r+0xec>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d1e8      	bne.n	8004a96 <__swsetup_r+0x22>
 8004ac4:	68ec      	ldr	r4, [r5, #12]
 8004ac6:	e7e6      	b.n	8004a96 <__swsetup_r+0x22>
 8004ac8:	075b      	lsls	r3, r3, #29
 8004aca:	d513      	bpl.n	8004af4 <__swsetup_r+0x80>
 8004acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d008      	beq.n	8004ae4 <__swsetup_r+0x70>
 8004ad2:	0023      	movs	r3, r4
 8004ad4:	3344      	adds	r3, #68	; 0x44
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d002      	beq.n	8004ae0 <__swsetup_r+0x6c>
 8004ada:	0030      	movs	r0, r6
 8004adc:	f000 fa80 	bl	8004fe0 <_free_r>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ae4:	2224      	movs	r2, #36	; 0x24
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	4393      	bics	r3, r2
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	2300      	movs	r3, #0
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	2308      	movs	r3, #8
 8004af6:	89a2      	ldrh	r2, [r4, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <__swsetup_r+0xa6>
 8004b02:	21a0      	movs	r1, #160	; 0xa0
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	0089      	lsls	r1, r1, #2
 8004b0a:	0092      	lsls	r2, r2, #2
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <__swsetup_r+0xa6>
 8004b12:	0021      	movs	r1, r4
 8004b14:	0030      	movs	r0, r6
 8004b16:	f000 fa1f 	bl	8004f58 <__smakebuf_r>
 8004b1a:	220c      	movs	r2, #12
 8004b1c:	5ea3      	ldrsh	r3, [r4, r2]
 8004b1e:	2001      	movs	r0, #1
 8004b20:	001a      	movs	r2, r3
 8004b22:	b299      	uxth	r1, r3
 8004b24:	4002      	ands	r2, r0
 8004b26:	4203      	tst	r3, r0
 8004b28:	d00f      	beq.n	8004b4a <__swsetup_r+0xd6>
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60a2      	str	r2, [r4, #8]
 8004b2e:	6962      	ldr	r2, [r4, #20]
 8004b30:	4252      	negs	r2, r2
 8004b32:	61a2      	str	r2, [r4, #24]
 8004b34:	2000      	movs	r0, #0
 8004b36:	6922      	ldr	r2, [r4, #16]
 8004b38:	4282      	cmp	r2, r0
 8004b3a:	d1ba      	bne.n	8004ab2 <__swsetup_r+0x3e>
 8004b3c:	060a      	lsls	r2, r1, #24
 8004b3e:	d5b8      	bpl.n	8004ab2 <__swsetup_r+0x3e>
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	4313      	orrs	r3, r2
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	3801      	subs	r0, #1
 8004b48:	e7b3      	b.n	8004ab2 <__swsetup_r+0x3e>
 8004b4a:	0788      	lsls	r0, r1, #30
 8004b4c:	d400      	bmi.n	8004b50 <__swsetup_r+0xdc>
 8004b4e:	6962      	ldr	r2, [r4, #20]
 8004b50:	60a2      	str	r2, [r4, #8]
 8004b52:	e7ef      	b.n	8004b34 <__swsetup_r+0xc0>
 8004b54:	2000018c 	.word	0x2000018c
 8004b58:	08005adc 	.word	0x08005adc
 8004b5c:	08005afc 	.word	0x08005afc
 8004b60:	08005abc 	.word	0x08005abc

08004b64 <__sflush_r>:
 8004b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b66:	898b      	ldrh	r3, [r1, #12]
 8004b68:	0005      	movs	r5, r0
 8004b6a:	000c      	movs	r4, r1
 8004b6c:	071a      	lsls	r2, r3, #28
 8004b6e:	d45f      	bmi.n	8004c30 <__sflush_r+0xcc>
 8004b70:	684a      	ldr	r2, [r1, #4]
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	dc04      	bgt.n	8004b80 <__sflush_r+0x1c>
 8004b76:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	dc01      	bgt.n	8004b80 <__sflush_r+0x1c>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b80:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004b82:	2f00      	cmp	r7, #0
 8004b84:	d0fa      	beq.n	8004b7c <__sflush_r+0x18>
 8004b86:	2200      	movs	r2, #0
 8004b88:	2180      	movs	r1, #128	; 0x80
 8004b8a:	682e      	ldr	r6, [r5, #0]
 8004b8c:	602a      	str	r2, [r5, #0]
 8004b8e:	001a      	movs	r2, r3
 8004b90:	0149      	lsls	r1, r1, #5
 8004b92:	400a      	ands	r2, r1
 8004b94:	420b      	tst	r3, r1
 8004b96:	d034      	beq.n	8004c02 <__sflush_r+0x9e>
 8004b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	075b      	lsls	r3, r3, #29
 8004b9e:	d506      	bpl.n	8004bae <__sflush_r+0x4a>
 8004ba0:	6863      	ldr	r3, [r4, #4]
 8004ba2:	1ac0      	subs	r0, r0, r3
 8004ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <__sflush_r+0x4a>
 8004baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bac:	1ac0      	subs	r0, r0, r3
 8004bae:	0002      	movs	r2, r0
 8004bb0:	6a21      	ldr	r1, [r4, #32]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	0028      	movs	r0, r5
 8004bb6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004bb8:	47b8      	blx	r7
 8004bba:	89a1      	ldrh	r1, [r4, #12]
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d106      	bne.n	8004bce <__sflush_r+0x6a>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	2b1d      	cmp	r3, #29
 8004bc4:	d831      	bhi.n	8004c2a <__sflush_r+0xc6>
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <__sflush_r+0x114>)
 8004bc8:	40da      	lsrs	r2, r3
 8004bca:	07d3      	lsls	r3, r2, #31
 8004bcc:	d52d      	bpl.n	8004c2a <__sflush_r+0xc6>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	04cb      	lsls	r3, r1, #19
 8004bd8:	d505      	bpl.n	8004be6 <__sflush_r+0x82>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	d102      	bne.n	8004be4 <__sflush_r+0x80>
 8004bde:	682b      	ldr	r3, [r5, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d100      	bne.n	8004be6 <__sflush_r+0x82>
 8004be4:	6560      	str	r0, [r4, #84]	; 0x54
 8004be6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be8:	602e      	str	r6, [r5, #0]
 8004bea:	2900      	cmp	r1, #0
 8004bec:	d0c6      	beq.n	8004b7c <__sflush_r+0x18>
 8004bee:	0023      	movs	r3, r4
 8004bf0:	3344      	adds	r3, #68	; 0x44
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	d002      	beq.n	8004bfc <__sflush_r+0x98>
 8004bf6:	0028      	movs	r0, r5
 8004bf8:	f000 f9f2 	bl	8004fe0 <_free_r>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	6360      	str	r0, [r4, #52]	; 0x34
 8004c00:	e7bd      	b.n	8004b7e <__sflush_r+0x1a>
 8004c02:	2301      	movs	r3, #1
 8004c04:	0028      	movs	r0, r5
 8004c06:	6a21      	ldr	r1, [r4, #32]
 8004c08:	47b8      	blx	r7
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d1c5      	bne.n	8004b9a <__sflush_r+0x36>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0c2      	beq.n	8004b9a <__sflush_r+0x36>
 8004c14:	2b1d      	cmp	r3, #29
 8004c16:	d001      	beq.n	8004c1c <__sflush_r+0xb8>
 8004c18:	2b16      	cmp	r3, #22
 8004c1a:	d101      	bne.n	8004c20 <__sflush_r+0xbc>
 8004c1c:	602e      	str	r6, [r5, #0]
 8004c1e:	e7ad      	b.n	8004b7c <__sflush_r+0x18>
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	89a2      	ldrh	r2, [r4, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	e7a9      	b.n	8004b7e <__sflush_r+0x1a>
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	e7fa      	b.n	8004c26 <__sflush_r+0xc2>
 8004c30:	690f      	ldr	r7, [r1, #16]
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	d0a2      	beq.n	8004b7c <__sflush_r+0x18>
 8004c36:	680a      	ldr	r2, [r1, #0]
 8004c38:	600f      	str	r7, [r1, #0]
 8004c3a:	1bd2      	subs	r2, r2, r7
 8004c3c:	9201      	str	r2, [sp, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	d100      	bne.n	8004c46 <__sflush_r+0xe2>
 8004c44:	694a      	ldr	r2, [r1, #20]
 8004c46:	60a2      	str	r2, [r4, #8]
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc00      	bgt.n	8004c50 <__sflush_r+0xec>
 8004c4e:	e795      	b.n	8004b7c <__sflush_r+0x18>
 8004c50:	003a      	movs	r2, r7
 8004c52:	0028      	movs	r0, r5
 8004c54:	9b01      	ldr	r3, [sp, #4]
 8004c56:	6a21      	ldr	r1, [r4, #32]
 8004c58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c5a:	47b0      	blx	r6
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	dc06      	bgt.n	8004c6e <__sflush_r+0x10a>
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	2001      	movs	r0, #1
 8004c64:	89a2      	ldrh	r2, [r4, #12]
 8004c66:	4240      	negs	r0, r0
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	e787      	b.n	8004b7e <__sflush_r+0x1a>
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	183f      	adds	r7, r7, r0
 8004c72:	1a1b      	subs	r3, r3, r0
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	e7e7      	b.n	8004c48 <__sflush_r+0xe4>
 8004c78:	20400001 	.word	0x20400001

08004c7c <_fflush_r>:
 8004c7c:	690b      	ldr	r3, [r1, #16]
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	0005      	movs	r5, r0
 8004c82:	000c      	movs	r4, r1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <_fflush_r+0x12>
 8004c88:	2500      	movs	r5, #0
 8004c8a:	0028      	movs	r0, r5
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d004      	beq.n	8004c9c <_fflush_r+0x20>
 8004c92:	6983      	ldr	r3, [r0, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <_fflush_r+0x20>
 8004c98:	f000 f892 	bl	8004dc0 <__sinit>
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <_fflush_r+0x74>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	d11b      	bne.n	8004cda <_fflush_r+0x5e>
 8004ca2:	686c      	ldr	r4, [r5, #4]
 8004ca4:	220c      	movs	r2, #12
 8004ca6:	5ea3      	ldrsh	r3, [r4, r2]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ed      	beq.n	8004c88 <_fflush_r+0xc>
 8004cac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cae:	07d2      	lsls	r2, r2, #31
 8004cb0:	d404      	bmi.n	8004cbc <_fflush_r+0x40>
 8004cb2:	059b      	lsls	r3, r3, #22
 8004cb4:	d402      	bmi.n	8004cbc <_fflush_r+0x40>
 8004cb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb8:	f000 f923 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8004cbc:	0028      	movs	r0, r5
 8004cbe:	0021      	movs	r1, r4
 8004cc0:	f7ff ff50 	bl	8004b64 <__sflush_r>
 8004cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc6:	0005      	movs	r5, r0
 8004cc8:	07db      	lsls	r3, r3, #31
 8004cca:	d4de      	bmi.n	8004c8a <_fflush_r+0xe>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	059b      	lsls	r3, r3, #22
 8004cd0:	d4db      	bmi.n	8004c8a <_fflush_r+0xe>
 8004cd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd4:	f000 f916 	bl	8004f04 <__retarget_lock_release_recursive>
 8004cd8:	e7d7      	b.n	8004c8a <_fflush_r+0xe>
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <_fflush_r+0x78>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d101      	bne.n	8004ce4 <_fflush_r+0x68>
 8004ce0:	68ac      	ldr	r4, [r5, #8]
 8004ce2:	e7df      	b.n	8004ca4 <_fflush_r+0x28>
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <_fflush_r+0x7c>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d1dc      	bne.n	8004ca4 <_fflush_r+0x28>
 8004cea:	68ec      	ldr	r4, [r5, #12]
 8004cec:	e7da      	b.n	8004ca4 <_fflush_r+0x28>
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	08005adc 	.word	0x08005adc
 8004cf4:	08005afc 	.word	0x08005afc
 8004cf8:	08005abc 	.word	0x08005abc

08004cfc <std>:
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	0004      	movs	r4, r0
 8004d02:	6003      	str	r3, [r0, #0]
 8004d04:	6043      	str	r3, [r0, #4]
 8004d06:	6083      	str	r3, [r0, #8]
 8004d08:	8181      	strh	r1, [r0, #12]
 8004d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	81c2      	strh	r2, [r0, #14]
 8004d10:	6103      	str	r3, [r0, #16]
 8004d12:	6143      	str	r3, [r0, #20]
 8004d14:	6183      	str	r3, [r0, #24]
 8004d16:	2208      	movs	r2, #8
 8004d18:	305c      	adds	r0, #92	; 0x5c
 8004d1a:	f7ff fdb7 	bl	800488c <memset>
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <std+0x38>)
 8004d20:	6224      	str	r4, [r4, #32]
 8004d22:	6263      	str	r3, [r4, #36]	; 0x24
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <std+0x3c>)
 8004d26:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <std+0x40>)
 8004d2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <std+0x44>)
 8004d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	08005791 	.word	0x08005791
 8004d38:	080057b9 	.word	0x080057b9
 8004d3c:	080057f1 	.word	0x080057f1
 8004d40:	0800581d 	.word	0x0800581d

08004d44 <_cleanup_r>:
 8004d44:	b510      	push	{r4, lr}
 8004d46:	4902      	ldr	r1, [pc, #8]	; (8004d50 <_cleanup_r+0xc>)
 8004d48:	f000 f8ba 	bl	8004ec0 <_fwalk_reent>
 8004d4c:	bd10      	pop	{r4, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	08004c7d 	.word	0x08004c7d

08004d54 <__sfmoreglue>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	2568      	movs	r5, #104	; 0x68
 8004d58:	1e4a      	subs	r2, r1, #1
 8004d5a:	4355      	muls	r5, r2
 8004d5c:	000e      	movs	r6, r1
 8004d5e:	0029      	movs	r1, r5
 8004d60:	3174      	adds	r1, #116	; 0x74
 8004d62:	f000 f9a9 	bl	80050b8 <_malloc_r>
 8004d66:	1e04      	subs	r4, r0, #0
 8004d68:	d008      	beq.n	8004d7c <__sfmoreglue+0x28>
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	002a      	movs	r2, r5
 8004d6e:	6001      	str	r1, [r0, #0]
 8004d70:	6046      	str	r6, [r0, #4]
 8004d72:	300c      	adds	r0, #12
 8004d74:	60a0      	str	r0, [r4, #8]
 8004d76:	3268      	adds	r2, #104	; 0x68
 8004d78:	f7ff fd88 	bl	800488c <memset>
 8004d7c:	0020      	movs	r0, r4
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}

08004d80 <__sfp_lock_acquire>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4802      	ldr	r0, [pc, #8]	; (8004d8c <__sfp_lock_acquire+0xc>)
 8004d84:	f000 f8bd 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	20000311 	.word	0x20000311

08004d90 <__sfp_lock_release>:
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4802      	ldr	r0, [pc, #8]	; (8004d9c <__sfp_lock_release+0xc>)
 8004d94:	f000 f8b6 	bl	8004f04 <__retarget_lock_release_recursive>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	20000311 	.word	0x20000311

08004da0 <__sinit_lock_acquire>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	4802      	ldr	r0, [pc, #8]	; (8004dac <__sinit_lock_acquire+0xc>)
 8004da4:	f000 f8ad 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	20000312 	.word	0x20000312

08004db0 <__sinit_lock_release>:
 8004db0:	b510      	push	{r4, lr}
 8004db2:	4802      	ldr	r0, [pc, #8]	; (8004dbc <__sinit_lock_release+0xc>)
 8004db4:	f000 f8a6 	bl	8004f04 <__retarget_lock_release_recursive>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	20000312 	.word	0x20000312

08004dc0 <__sinit>:
 8004dc0:	b513      	push	{r0, r1, r4, lr}
 8004dc2:	0004      	movs	r4, r0
 8004dc4:	f7ff ffec 	bl	8004da0 <__sinit_lock_acquire>
 8004dc8:	69a3      	ldr	r3, [r4, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <__sinit+0x14>
 8004dce:	f7ff ffef 	bl	8004db0 <__sinit_lock_release>
 8004dd2:	bd13      	pop	{r0, r1, r4, pc}
 8004dd4:	64a3      	str	r3, [r4, #72]	; 0x48
 8004dd6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <__sinit+0x68>)
 8004ddc:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <__sinit+0x6c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d101      	bne.n	8004dec <__sinit+0x2c>
 8004de8:	2301      	movs	r3, #1
 8004dea:	61a3      	str	r3, [r4, #24]
 8004dec:	0020      	movs	r0, r4
 8004dee:	f000 f81f 	bl	8004e30 <__sfp>
 8004df2:	6060      	str	r0, [r4, #4]
 8004df4:	0020      	movs	r0, r4
 8004df6:	f000 f81b 	bl	8004e30 <__sfp>
 8004dfa:	60a0      	str	r0, [r4, #8]
 8004dfc:	0020      	movs	r0, r4
 8004dfe:	f000 f817 	bl	8004e30 <__sfp>
 8004e02:	2200      	movs	r2, #0
 8004e04:	2104      	movs	r1, #4
 8004e06:	60e0      	str	r0, [r4, #12]
 8004e08:	6860      	ldr	r0, [r4, #4]
 8004e0a:	f7ff ff77 	bl	8004cfc <std>
 8004e0e:	2201      	movs	r2, #1
 8004e10:	2109      	movs	r1, #9
 8004e12:	68a0      	ldr	r0, [r4, #8]
 8004e14:	f7ff ff72 	bl	8004cfc <std>
 8004e18:	2202      	movs	r2, #2
 8004e1a:	2112      	movs	r1, #18
 8004e1c:	68e0      	ldr	r0, [r4, #12]
 8004e1e:	f7ff ff6d 	bl	8004cfc <std>
 8004e22:	2301      	movs	r3, #1
 8004e24:	61a3      	str	r3, [r4, #24]
 8004e26:	e7d2      	b.n	8004dce <__sinit+0xe>
 8004e28:	08005ab8 	.word	0x08005ab8
 8004e2c:	08004d45 	.word	0x08004d45

08004e30 <__sfp>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	0007      	movs	r7, r0
 8004e34:	f7ff ffa4 	bl	8004d80 <__sfp_lock_acquire>
 8004e38:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <__sfp+0x88>)
 8004e3a:	681e      	ldr	r6, [r3, #0]
 8004e3c:	69b3      	ldr	r3, [r6, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <__sfp+0x18>
 8004e42:	0030      	movs	r0, r6
 8004e44:	f7ff ffbc 	bl	8004dc0 <__sinit>
 8004e48:	3648      	adds	r6, #72	; 0x48
 8004e4a:	68b4      	ldr	r4, [r6, #8]
 8004e4c:	6873      	ldr	r3, [r6, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	d504      	bpl.n	8004e5c <__sfp+0x2c>
 8004e52:	6833      	ldr	r3, [r6, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d022      	beq.n	8004e9e <__sfp+0x6e>
 8004e58:	6836      	ldr	r6, [r6, #0]
 8004e5a:	e7f6      	b.n	8004e4a <__sfp+0x1a>
 8004e5c:	220c      	movs	r2, #12
 8004e5e:	5ea5      	ldrsh	r5, [r4, r2]
 8004e60:	2d00      	cmp	r5, #0
 8004e62:	d11a      	bne.n	8004e9a <__sfp+0x6a>
 8004e64:	0020      	movs	r0, r4
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <__sfp+0x8c>)
 8004e68:	3058      	adds	r0, #88	; 0x58
 8004e6a:	60e3      	str	r3, [r4, #12]
 8004e6c:	6665      	str	r5, [r4, #100]	; 0x64
 8004e6e:	f000 f847 	bl	8004f00 <__retarget_lock_init_recursive>
 8004e72:	f7ff ff8d 	bl	8004d90 <__sfp_lock_release>
 8004e76:	0020      	movs	r0, r4
 8004e78:	2208      	movs	r2, #8
 8004e7a:	0029      	movs	r1, r5
 8004e7c:	6025      	str	r5, [r4, #0]
 8004e7e:	60a5      	str	r5, [r4, #8]
 8004e80:	6065      	str	r5, [r4, #4]
 8004e82:	6125      	str	r5, [r4, #16]
 8004e84:	6165      	str	r5, [r4, #20]
 8004e86:	61a5      	str	r5, [r4, #24]
 8004e88:	305c      	adds	r0, #92	; 0x5c
 8004e8a:	f7ff fcff 	bl	800488c <memset>
 8004e8e:	6365      	str	r5, [r4, #52]	; 0x34
 8004e90:	63a5      	str	r5, [r4, #56]	; 0x38
 8004e92:	64a5      	str	r5, [r4, #72]	; 0x48
 8004e94:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004e96:	0020      	movs	r0, r4
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	3468      	adds	r4, #104	; 0x68
 8004e9c:	e7d7      	b.n	8004e4e <__sfp+0x1e>
 8004e9e:	2104      	movs	r1, #4
 8004ea0:	0038      	movs	r0, r7
 8004ea2:	f7ff ff57 	bl	8004d54 <__sfmoreglue>
 8004ea6:	1e04      	subs	r4, r0, #0
 8004ea8:	6030      	str	r0, [r6, #0]
 8004eaa:	d1d5      	bne.n	8004e58 <__sfp+0x28>
 8004eac:	f7ff ff70 	bl	8004d90 <__sfp_lock_release>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	e7ef      	b.n	8004e96 <__sfp+0x66>
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	08005ab8 	.word	0x08005ab8
 8004ebc:	ffff0001 	.word	0xffff0001

08004ec0 <_fwalk_reent>:
 8004ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec2:	0004      	movs	r4, r0
 8004ec4:	0006      	movs	r6, r0
 8004ec6:	2700      	movs	r7, #0
 8004ec8:	9101      	str	r1, [sp, #4]
 8004eca:	3448      	adds	r4, #72	; 0x48
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	68a5      	ldr	r5, [r4, #8]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	d504      	bpl.n	8004ee4 <_fwalk_reent+0x24>
 8004eda:	6824      	ldr	r4, [r4, #0]
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d1f5      	bne.n	8004ecc <_fwalk_reent+0xc>
 8004ee0:	0038      	movs	r0, r7
 8004ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ee4:	89ab      	ldrh	r3, [r5, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d908      	bls.n	8004efc <_fwalk_reent+0x3c>
 8004eea:	220e      	movs	r2, #14
 8004eec:	5eab      	ldrsh	r3, [r5, r2]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	d004      	beq.n	8004efc <_fwalk_reent+0x3c>
 8004ef2:	0029      	movs	r1, r5
 8004ef4:	0030      	movs	r0, r6
 8004ef6:	9b01      	ldr	r3, [sp, #4]
 8004ef8:	4798      	blx	r3
 8004efa:	4307      	orrs	r7, r0
 8004efc:	3568      	adds	r5, #104	; 0x68
 8004efe:	e7e8      	b.n	8004ed2 <_fwalk_reent+0x12>

08004f00 <__retarget_lock_init_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_acquire_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <__retarget_lock_release_recursive>:
 8004f04:	4770      	bx	lr
	...

08004f08 <__swhatbuf_r>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	000e      	movs	r6, r1
 8004f0c:	001d      	movs	r5, r3
 8004f0e:	230e      	movs	r3, #14
 8004f10:	5ec9      	ldrsh	r1, [r1, r3]
 8004f12:	0014      	movs	r4, r2
 8004f14:	b096      	sub	sp, #88	; 0x58
 8004f16:	2900      	cmp	r1, #0
 8004f18:	da08      	bge.n	8004f2c <__swhatbuf_r+0x24>
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	5eb3      	ldrsh	r3, [r6, r2]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	d411      	bmi.n	8004f4a <__swhatbuf_r+0x42>
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	e00f      	b.n	8004f4c <__swhatbuf_r+0x44>
 8004f2c:	466a      	mov	r2, sp
 8004f2e:	f000 fca1 	bl	8005874 <_fstat_r>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	dbf1      	blt.n	8004f1a <__swhatbuf_r+0x12>
 8004f36:	23f0      	movs	r3, #240	; 0xf0
 8004f38:	9901      	ldr	r1, [sp, #4]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	4019      	ands	r1, r3
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <__swhatbuf_r+0x4c>)
 8004f40:	18c9      	adds	r1, r1, r3
 8004f42:	424b      	negs	r3, r1
 8004f44:	4159      	adcs	r1, r3
 8004f46:	6029      	str	r1, [r5, #0]
 8004f48:	e7ed      	b.n	8004f26 <__swhatbuf_r+0x1e>
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	b016      	add	sp, #88	; 0x58
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	ffffe000 	.word	0xffffe000

08004f58 <__smakebuf_r>:
 8004f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f5a:	2602      	movs	r6, #2
 8004f5c:	898b      	ldrh	r3, [r1, #12]
 8004f5e:	0005      	movs	r5, r0
 8004f60:	000c      	movs	r4, r1
 8004f62:	4233      	tst	r3, r6
 8004f64:	d006      	beq.n	8004f74 <__smakebuf_r+0x1c>
 8004f66:	0023      	movs	r3, r4
 8004f68:	3347      	adds	r3, #71	; 0x47
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	2301      	movs	r3, #1
 8004f70:	6163      	str	r3, [r4, #20]
 8004f72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004f74:	466a      	mov	r2, sp
 8004f76:	ab01      	add	r3, sp, #4
 8004f78:	f7ff ffc6 	bl	8004f08 <__swhatbuf_r>
 8004f7c:	9900      	ldr	r1, [sp, #0]
 8004f7e:	0007      	movs	r7, r0
 8004f80:	0028      	movs	r0, r5
 8004f82:	f000 f899 	bl	80050b8 <_malloc_r>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d108      	bne.n	8004f9c <__smakebuf_r+0x44>
 8004f8a:	220c      	movs	r2, #12
 8004f8c:	5ea3      	ldrsh	r3, [r4, r2]
 8004f8e:	059a      	lsls	r2, r3, #22
 8004f90:	d4ef      	bmi.n	8004f72 <__smakebuf_r+0x1a>
 8004f92:	2203      	movs	r2, #3
 8004f94:	4393      	bics	r3, r2
 8004f96:	431e      	orrs	r6, r3
 8004f98:	81a6      	strh	r6, [r4, #12]
 8004f9a:	e7e4      	b.n	8004f66 <__smakebuf_r+0xe>
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <__smakebuf_r+0x84>)
 8004f9e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	89a2      	ldrh	r2, [r4, #12]
 8004fa4:	6020      	str	r0, [r4, #0]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	9b00      	ldr	r3, [sp, #0]
 8004fac:	6120      	str	r0, [r4, #16]
 8004fae:	6163      	str	r3, [r4, #20]
 8004fb0:	9b01      	ldr	r3, [sp, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <__smakebuf_r+0x7a>
 8004fb6:	0028      	movs	r0, r5
 8004fb8:	230e      	movs	r3, #14
 8004fba:	5ee1      	ldrsh	r1, [r4, r3]
 8004fbc:	f000 fc6c 	bl	8005898 <_isatty_r>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d006      	beq.n	8004fd2 <__smakebuf_r+0x7a>
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	4393      	bics	r3, r2
 8004fca:	001a      	movs	r2, r3
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	89a0      	ldrh	r0, [r4, #12]
 8004fd4:	4307      	orrs	r7, r0
 8004fd6:	81a7      	strh	r7, [r4, #12]
 8004fd8:	e7cb      	b.n	8004f72 <__smakebuf_r+0x1a>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	08004d45 	.word	0x08004d45

08004fe0 <_free_r>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	0005      	movs	r5, r0
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d010      	beq.n	800500a <_free_r+0x2a>
 8004fe8:	1f0c      	subs	r4, r1, #4
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da00      	bge.n	8004ff2 <_free_r+0x12>
 8004ff0:	18e4      	adds	r4, r4, r3
 8004ff2:	0028      	movs	r0, r5
 8004ff4:	f000 fc82 	bl	80058fc <__malloc_lock>
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <_free_r+0x90>)
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d105      	bne.n	800500c <_free_r+0x2c>
 8005000:	6063      	str	r3, [r4, #4]
 8005002:	6014      	str	r4, [r2, #0]
 8005004:	0028      	movs	r0, r5
 8005006:	f000 fc81 	bl	800590c <__malloc_unlock>
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	42a3      	cmp	r3, r4
 800500e:	d908      	bls.n	8005022 <_free_r+0x42>
 8005010:	6821      	ldr	r1, [r4, #0]
 8005012:	1860      	adds	r0, r4, r1
 8005014:	4283      	cmp	r3, r0
 8005016:	d1f3      	bne.n	8005000 <_free_r+0x20>
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	1841      	adds	r1, r0, r1
 800501e:	6021      	str	r1, [r4, #0]
 8005020:	e7ee      	b.n	8005000 <_free_r+0x20>
 8005022:	001a      	movs	r2, r3
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <_free_r+0x4e>
 800502a:	42a3      	cmp	r3, r4
 800502c:	d9f9      	bls.n	8005022 <_free_r+0x42>
 800502e:	6811      	ldr	r1, [r2, #0]
 8005030:	1850      	adds	r0, r2, r1
 8005032:	42a0      	cmp	r0, r4
 8005034:	d10b      	bne.n	800504e <_free_r+0x6e>
 8005036:	6820      	ldr	r0, [r4, #0]
 8005038:	1809      	adds	r1, r1, r0
 800503a:	1850      	adds	r0, r2, r1
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	4283      	cmp	r3, r0
 8005040:	d1e0      	bne.n	8005004 <_free_r+0x24>
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	1841      	adds	r1, r0, r1
 8005048:	6011      	str	r1, [r2, #0]
 800504a:	6053      	str	r3, [r2, #4]
 800504c:	e7da      	b.n	8005004 <_free_r+0x24>
 800504e:	42a0      	cmp	r0, r4
 8005050:	d902      	bls.n	8005058 <_free_r+0x78>
 8005052:	230c      	movs	r3, #12
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	e7d5      	b.n	8005004 <_free_r+0x24>
 8005058:	6821      	ldr	r1, [r4, #0]
 800505a:	1860      	adds	r0, r4, r1
 800505c:	4283      	cmp	r3, r0
 800505e:	d103      	bne.n	8005068 <_free_r+0x88>
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	1841      	adds	r1, r0, r1
 8005066:	6021      	str	r1, [r4, #0]
 8005068:	6063      	str	r3, [r4, #4]
 800506a:	6054      	str	r4, [r2, #4]
 800506c:	e7ca      	b.n	8005004 <_free_r+0x24>
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20000314 	.word	0x20000314

08005074 <sbrk_aligned>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4e0f      	ldr	r6, [pc, #60]	; (80050b4 <sbrk_aligned+0x40>)
 8005078:	000d      	movs	r5, r1
 800507a:	6831      	ldr	r1, [r6, #0]
 800507c:	0004      	movs	r4, r0
 800507e:	2900      	cmp	r1, #0
 8005080:	d102      	bne.n	8005088 <sbrk_aligned+0x14>
 8005082:	f000 fb73 	bl	800576c <_sbrk_r>
 8005086:	6030      	str	r0, [r6, #0]
 8005088:	0029      	movs	r1, r5
 800508a:	0020      	movs	r0, r4
 800508c:	f000 fb6e 	bl	800576c <_sbrk_r>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d00a      	beq.n	80050aa <sbrk_aligned+0x36>
 8005094:	2303      	movs	r3, #3
 8005096:	1cc5      	adds	r5, r0, #3
 8005098:	439d      	bics	r5, r3
 800509a:	42a8      	cmp	r0, r5
 800509c:	d007      	beq.n	80050ae <sbrk_aligned+0x3a>
 800509e:	1a29      	subs	r1, r5, r0
 80050a0:	0020      	movs	r0, r4
 80050a2:	f000 fb63 	bl	800576c <_sbrk_r>
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	d101      	bne.n	80050ae <sbrk_aligned+0x3a>
 80050aa:	2501      	movs	r5, #1
 80050ac:	426d      	negs	r5, r5
 80050ae:	0028      	movs	r0, r5
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	20000318 	.word	0x20000318

080050b8 <_malloc_r>:
 80050b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ba:	2203      	movs	r2, #3
 80050bc:	1ccb      	adds	r3, r1, #3
 80050be:	4393      	bics	r3, r2
 80050c0:	3308      	adds	r3, #8
 80050c2:	0006      	movs	r6, r0
 80050c4:	001f      	movs	r7, r3
 80050c6:	2b0c      	cmp	r3, #12
 80050c8:	d232      	bcs.n	8005130 <_malloc_r+0x78>
 80050ca:	270c      	movs	r7, #12
 80050cc:	42b9      	cmp	r1, r7
 80050ce:	d831      	bhi.n	8005134 <_malloc_r+0x7c>
 80050d0:	0030      	movs	r0, r6
 80050d2:	f000 fc13 	bl	80058fc <__malloc_lock>
 80050d6:	4d32      	ldr	r5, [pc, #200]	; (80051a0 <_malloc_r+0xe8>)
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	001c      	movs	r4, r3
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d12e      	bne.n	800513e <_malloc_r+0x86>
 80050e0:	0039      	movs	r1, r7
 80050e2:	0030      	movs	r0, r6
 80050e4:	f7ff ffc6 	bl	8005074 <sbrk_aligned>
 80050e8:	0004      	movs	r4, r0
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	d11e      	bne.n	800512c <_malloc_r+0x74>
 80050ee:	682c      	ldr	r4, [r5, #0]
 80050f0:	0025      	movs	r5, r4
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	d14a      	bne.n	800518c <_malloc_r+0xd4>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	0029      	movs	r1, r5
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	0030      	movs	r0, r6
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	f000 fb34 	bl	800576c <_sbrk_r>
 8005104:	9b01      	ldr	r3, [sp, #4]
 8005106:	4283      	cmp	r3, r0
 8005108:	d143      	bne.n	8005192 <_malloc_r+0xda>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	3703      	adds	r7, #3
 800510e:	1aff      	subs	r7, r7, r3
 8005110:	2303      	movs	r3, #3
 8005112:	439f      	bics	r7, r3
 8005114:	3708      	adds	r7, #8
 8005116:	2f0c      	cmp	r7, #12
 8005118:	d200      	bcs.n	800511c <_malloc_r+0x64>
 800511a:	270c      	movs	r7, #12
 800511c:	0039      	movs	r1, r7
 800511e:	0030      	movs	r0, r6
 8005120:	f7ff ffa8 	bl	8005074 <sbrk_aligned>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d034      	beq.n	8005192 <_malloc_r+0xda>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	19df      	adds	r7, r3, r7
 800512c:	6027      	str	r7, [r4, #0]
 800512e:	e013      	b.n	8005158 <_malloc_r+0xa0>
 8005130:	2b00      	cmp	r3, #0
 8005132:	dacb      	bge.n	80050cc <_malloc_r+0x14>
 8005134:	230c      	movs	r3, #12
 8005136:	2500      	movs	r5, #0
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	0028      	movs	r0, r5
 800513c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	1bd1      	subs	r1, r2, r7
 8005142:	d420      	bmi.n	8005186 <_malloc_r+0xce>
 8005144:	290b      	cmp	r1, #11
 8005146:	d917      	bls.n	8005178 <_malloc_r+0xc0>
 8005148:	19e2      	adds	r2, r4, r7
 800514a:	6027      	str	r7, [r4, #0]
 800514c:	42a3      	cmp	r3, r4
 800514e:	d111      	bne.n	8005174 <_malloc_r+0xbc>
 8005150:	602a      	str	r2, [r5, #0]
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	6053      	str	r3, [r2, #4]
 8005158:	0030      	movs	r0, r6
 800515a:	0025      	movs	r5, r4
 800515c:	f000 fbd6 	bl	800590c <__malloc_unlock>
 8005160:	2207      	movs	r2, #7
 8005162:	350b      	adds	r5, #11
 8005164:	1d23      	adds	r3, r4, #4
 8005166:	4395      	bics	r5, r2
 8005168:	1aea      	subs	r2, r5, r3
 800516a:	429d      	cmp	r5, r3
 800516c:	d0e5      	beq.n	800513a <_malloc_r+0x82>
 800516e:	1b5b      	subs	r3, r3, r5
 8005170:	50a3      	str	r3, [r4, r2]
 8005172:	e7e2      	b.n	800513a <_malloc_r+0x82>
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e7ec      	b.n	8005152 <_malloc_r+0x9a>
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	42a3      	cmp	r3, r4
 800517c:	d101      	bne.n	8005182 <_malloc_r+0xca>
 800517e:	602a      	str	r2, [r5, #0]
 8005180:	e7ea      	b.n	8005158 <_malloc_r+0xa0>
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	e7e8      	b.n	8005158 <_malloc_r+0xa0>
 8005186:	0023      	movs	r3, r4
 8005188:	6864      	ldr	r4, [r4, #4]
 800518a:	e7a7      	b.n	80050dc <_malloc_r+0x24>
 800518c:	002c      	movs	r4, r5
 800518e:	686d      	ldr	r5, [r5, #4]
 8005190:	e7af      	b.n	80050f2 <_malloc_r+0x3a>
 8005192:	230c      	movs	r3, #12
 8005194:	0030      	movs	r0, r6
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f000 fbb8 	bl	800590c <__malloc_unlock>
 800519c:	e7cd      	b.n	800513a <_malloc_r+0x82>
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	20000314 	.word	0x20000314

080051a4 <__sfputc_r>:
 80051a4:	6893      	ldr	r3, [r2, #8]
 80051a6:	b510      	push	{r4, lr}
 80051a8:	3b01      	subs	r3, #1
 80051aa:	6093      	str	r3, [r2, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da04      	bge.n	80051ba <__sfputc_r+0x16>
 80051b0:	6994      	ldr	r4, [r2, #24]
 80051b2:	42a3      	cmp	r3, r4
 80051b4:	db07      	blt.n	80051c6 <__sfputc_r+0x22>
 80051b6:	290a      	cmp	r1, #10
 80051b8:	d005      	beq.n	80051c6 <__sfputc_r+0x22>
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	1c58      	adds	r0, r3, #1
 80051be:	6010      	str	r0, [r2, #0]
 80051c0:	7019      	strb	r1, [r3, #0]
 80051c2:	0008      	movs	r0, r1
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	f7ff fbff 	bl	80049c8 <__swbuf_r>
 80051ca:	0001      	movs	r1, r0
 80051cc:	e7f9      	b.n	80051c2 <__sfputc_r+0x1e>

080051ce <__sfputs_r>:
 80051ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d0:	0006      	movs	r6, r0
 80051d2:	000f      	movs	r7, r1
 80051d4:	0014      	movs	r4, r2
 80051d6:	18d5      	adds	r5, r2, r3
 80051d8:	42ac      	cmp	r4, r5
 80051da:	d101      	bne.n	80051e0 <__sfputs_r+0x12>
 80051dc:	2000      	movs	r0, #0
 80051de:	e007      	b.n	80051f0 <__sfputs_r+0x22>
 80051e0:	7821      	ldrb	r1, [r4, #0]
 80051e2:	003a      	movs	r2, r7
 80051e4:	0030      	movs	r0, r6
 80051e6:	f7ff ffdd 	bl	80051a4 <__sfputc_r>
 80051ea:	3401      	adds	r4, #1
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d1f3      	bne.n	80051d8 <__sfputs_r+0xa>
 80051f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051f4 <_vfiprintf_r>:
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f6:	b0a1      	sub	sp, #132	; 0x84
 80051f8:	0006      	movs	r6, r0
 80051fa:	000c      	movs	r4, r1
 80051fc:	001f      	movs	r7, r3
 80051fe:	9203      	str	r2, [sp, #12]
 8005200:	2800      	cmp	r0, #0
 8005202:	d004      	beq.n	800520e <_vfiprintf_r+0x1a>
 8005204:	6983      	ldr	r3, [r0, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <_vfiprintf_r+0x1a>
 800520a:	f7ff fdd9 	bl	8004dc0 <__sinit>
 800520e:	4b8e      	ldr	r3, [pc, #568]	; (8005448 <_vfiprintf_r+0x254>)
 8005210:	429c      	cmp	r4, r3
 8005212:	d11c      	bne.n	800524e <_vfiprintf_r+0x5a>
 8005214:	6874      	ldr	r4, [r6, #4]
 8005216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005218:	07db      	lsls	r3, r3, #31
 800521a:	d405      	bmi.n	8005228 <_vfiprintf_r+0x34>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	059b      	lsls	r3, r3, #22
 8005220:	d402      	bmi.n	8005228 <_vfiprintf_r+0x34>
 8005222:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005224:	f7ff fe6d 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	071b      	lsls	r3, r3, #28
 800522c:	d502      	bpl.n	8005234 <_vfiprintf_r+0x40>
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11d      	bne.n	8005270 <_vfiprintf_r+0x7c>
 8005234:	0021      	movs	r1, r4
 8005236:	0030      	movs	r0, r6
 8005238:	f7ff fc1c 	bl	8004a74 <__swsetup_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	d017      	beq.n	8005270 <_vfiprintf_r+0x7c>
 8005240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005242:	07db      	lsls	r3, r3, #31
 8005244:	d50d      	bpl.n	8005262 <_vfiprintf_r+0x6e>
 8005246:	2001      	movs	r0, #1
 8005248:	4240      	negs	r0, r0
 800524a:	b021      	add	sp, #132	; 0x84
 800524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524e:	4b7f      	ldr	r3, [pc, #508]	; (800544c <_vfiprintf_r+0x258>)
 8005250:	429c      	cmp	r4, r3
 8005252:	d101      	bne.n	8005258 <_vfiprintf_r+0x64>
 8005254:	68b4      	ldr	r4, [r6, #8]
 8005256:	e7de      	b.n	8005216 <_vfiprintf_r+0x22>
 8005258:	4b7d      	ldr	r3, [pc, #500]	; (8005450 <_vfiprintf_r+0x25c>)
 800525a:	429c      	cmp	r4, r3
 800525c:	d1db      	bne.n	8005216 <_vfiprintf_r+0x22>
 800525e:	68f4      	ldr	r4, [r6, #12]
 8005260:	e7d9      	b.n	8005216 <_vfiprintf_r+0x22>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	059b      	lsls	r3, r3, #22
 8005266:	d4ee      	bmi.n	8005246 <_vfiprintf_r+0x52>
 8005268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800526a:	f7ff fe4b 	bl	8004f04 <__retarget_lock_release_recursive>
 800526e:	e7ea      	b.n	8005246 <_vfiprintf_r+0x52>
 8005270:	2300      	movs	r3, #0
 8005272:	ad08      	add	r5, sp, #32
 8005274:	616b      	str	r3, [r5, #20]
 8005276:	3320      	adds	r3, #32
 8005278:	766b      	strb	r3, [r5, #25]
 800527a:	3310      	adds	r3, #16
 800527c:	76ab      	strb	r3, [r5, #26]
 800527e:	9707      	str	r7, [sp, #28]
 8005280:	9f03      	ldr	r7, [sp, #12]
 8005282:	783b      	ldrb	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <_vfiprintf_r+0x98>
 8005288:	2b25      	cmp	r3, #37	; 0x25
 800528a:	d14e      	bne.n	800532a <_vfiprintf_r+0x136>
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	1afb      	subs	r3, r7, r3
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	429f      	cmp	r7, r3
 8005296:	d00d      	beq.n	80052b4 <_vfiprintf_r+0xc0>
 8005298:	9b05      	ldr	r3, [sp, #20]
 800529a:	0021      	movs	r1, r4
 800529c:	0030      	movs	r0, r6
 800529e:	9a03      	ldr	r2, [sp, #12]
 80052a0:	f7ff ff95 	bl	80051ce <__sfputs_r>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d100      	bne.n	80052aa <_vfiprintf_r+0xb6>
 80052a8:	e0b5      	b.n	8005416 <_vfiprintf_r+0x222>
 80052aa:	696a      	ldr	r2, [r5, #20]
 80052ac:	9b05      	ldr	r3, [sp, #20]
 80052ae:	4694      	mov	ip, r2
 80052b0:	4463      	add	r3, ip
 80052b2:	616b      	str	r3, [r5, #20]
 80052b4:	783b      	ldrb	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d100      	bne.n	80052bc <_vfiprintf_r+0xc8>
 80052ba:	e0ac      	b.n	8005416 <_vfiprintf_r+0x222>
 80052bc:	2201      	movs	r2, #1
 80052be:	1c7b      	adds	r3, r7, #1
 80052c0:	9303      	str	r3, [sp, #12]
 80052c2:	2300      	movs	r3, #0
 80052c4:	4252      	negs	r2, r2
 80052c6:	606a      	str	r2, [r5, #4]
 80052c8:	a904      	add	r1, sp, #16
 80052ca:	3254      	adds	r2, #84	; 0x54
 80052cc:	1852      	adds	r2, r2, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	60eb      	str	r3, [r5, #12]
 80052d2:	60ab      	str	r3, [r5, #8]
 80052d4:	7013      	strb	r3, [r2, #0]
 80052d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80052d8:	9b03      	ldr	r3, [sp, #12]
 80052da:	2205      	movs	r2, #5
 80052dc:	7819      	ldrb	r1, [r3, #0]
 80052de:	485d      	ldr	r0, [pc, #372]	; (8005454 <_vfiprintf_r+0x260>)
 80052e0:	f000 fb00 	bl	80058e4 <memchr>
 80052e4:	9b03      	ldr	r3, [sp, #12]
 80052e6:	1c5f      	adds	r7, r3, #1
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d120      	bne.n	800532e <_vfiprintf_r+0x13a>
 80052ec:	682a      	ldr	r2, [r5, #0]
 80052ee:	06d3      	lsls	r3, r2, #27
 80052f0:	d504      	bpl.n	80052fc <_vfiprintf_r+0x108>
 80052f2:	2353      	movs	r3, #83	; 0x53
 80052f4:	a904      	add	r1, sp, #16
 80052f6:	185b      	adds	r3, r3, r1
 80052f8:	2120      	movs	r1, #32
 80052fa:	7019      	strb	r1, [r3, #0]
 80052fc:	0713      	lsls	r3, r2, #28
 80052fe:	d504      	bpl.n	800530a <_vfiprintf_r+0x116>
 8005300:	2353      	movs	r3, #83	; 0x53
 8005302:	a904      	add	r1, sp, #16
 8005304:	185b      	adds	r3, r3, r1
 8005306:	212b      	movs	r1, #43	; 0x2b
 8005308:	7019      	strb	r1, [r3, #0]
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b2a      	cmp	r3, #42	; 0x2a
 8005310:	d016      	beq.n	8005340 <_vfiprintf_r+0x14c>
 8005312:	2100      	movs	r1, #0
 8005314:	68eb      	ldr	r3, [r5, #12]
 8005316:	9f03      	ldr	r7, [sp, #12]
 8005318:	783a      	ldrb	r2, [r7, #0]
 800531a:	1c78      	adds	r0, r7, #1
 800531c:	3a30      	subs	r2, #48	; 0x30
 800531e:	4684      	mov	ip, r0
 8005320:	2a09      	cmp	r2, #9
 8005322:	d94f      	bls.n	80053c4 <_vfiprintf_r+0x1d0>
 8005324:	2900      	cmp	r1, #0
 8005326:	d111      	bne.n	800534c <_vfiprintf_r+0x158>
 8005328:	e017      	b.n	800535a <_vfiprintf_r+0x166>
 800532a:	3701      	adds	r7, #1
 800532c:	e7a9      	b.n	8005282 <_vfiprintf_r+0x8e>
 800532e:	4b49      	ldr	r3, [pc, #292]	; (8005454 <_vfiprintf_r+0x260>)
 8005330:	682a      	ldr	r2, [r5, #0]
 8005332:	1ac0      	subs	r0, r0, r3
 8005334:	2301      	movs	r3, #1
 8005336:	4083      	lsls	r3, r0
 8005338:	4313      	orrs	r3, r2
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	9703      	str	r7, [sp, #12]
 800533e:	e7cb      	b.n	80052d8 <_vfiprintf_r+0xe4>
 8005340:	9b07      	ldr	r3, [sp, #28]
 8005342:	1d19      	adds	r1, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9107      	str	r1, [sp, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	db01      	blt.n	8005350 <_vfiprintf_r+0x15c>
 800534c:	930b      	str	r3, [sp, #44]	; 0x2c
 800534e:	e004      	b.n	800535a <_vfiprintf_r+0x166>
 8005350:	425b      	negs	r3, r3
 8005352:	60eb      	str	r3, [r5, #12]
 8005354:	2302      	movs	r3, #2
 8005356:	4313      	orrs	r3, r2
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	783b      	ldrb	r3, [r7, #0]
 800535c:	2b2e      	cmp	r3, #46	; 0x2e
 800535e:	d10a      	bne.n	8005376 <_vfiprintf_r+0x182>
 8005360:	787b      	ldrb	r3, [r7, #1]
 8005362:	2b2a      	cmp	r3, #42	; 0x2a
 8005364:	d137      	bne.n	80053d6 <_vfiprintf_r+0x1e2>
 8005366:	9b07      	ldr	r3, [sp, #28]
 8005368:	3702      	adds	r7, #2
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	9207      	str	r2, [sp, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	db2d      	blt.n	80053d0 <_vfiprintf_r+0x1dc>
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
 8005376:	2203      	movs	r2, #3
 8005378:	7839      	ldrb	r1, [r7, #0]
 800537a:	4837      	ldr	r0, [pc, #220]	; (8005458 <_vfiprintf_r+0x264>)
 800537c:	f000 fab2 	bl	80058e4 <memchr>
 8005380:	2800      	cmp	r0, #0
 8005382:	d007      	beq.n	8005394 <_vfiprintf_r+0x1a0>
 8005384:	4b34      	ldr	r3, [pc, #208]	; (8005458 <_vfiprintf_r+0x264>)
 8005386:	682a      	ldr	r2, [r5, #0]
 8005388:	1ac0      	subs	r0, r0, r3
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	4083      	lsls	r3, r0
 800538e:	4313      	orrs	r3, r2
 8005390:	3701      	adds	r7, #1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	7839      	ldrb	r1, [r7, #0]
 8005396:	1c7b      	adds	r3, r7, #1
 8005398:	2206      	movs	r2, #6
 800539a:	4830      	ldr	r0, [pc, #192]	; (800545c <_vfiprintf_r+0x268>)
 800539c:	9303      	str	r3, [sp, #12]
 800539e:	7629      	strb	r1, [r5, #24]
 80053a0:	f000 faa0 	bl	80058e4 <memchr>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d045      	beq.n	8005434 <_vfiprintf_r+0x240>
 80053a8:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <_vfiprintf_r+0x26c>)
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d127      	bne.n	80053fe <_vfiprintf_r+0x20a>
 80053ae:	2207      	movs	r2, #7
 80053b0:	9b07      	ldr	r3, [sp, #28]
 80053b2:	3307      	adds	r3, #7
 80053b4:	4393      	bics	r3, r2
 80053b6:	3308      	adds	r3, #8
 80053b8:	9307      	str	r3, [sp, #28]
 80053ba:	696b      	ldr	r3, [r5, #20]
 80053bc:	9a04      	ldr	r2, [sp, #16]
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	616b      	str	r3, [r5, #20]
 80053c2:	e75d      	b.n	8005280 <_vfiprintf_r+0x8c>
 80053c4:	210a      	movs	r1, #10
 80053c6:	434b      	muls	r3, r1
 80053c8:	4667      	mov	r7, ip
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	3909      	subs	r1, #9
 80053ce:	e7a3      	b.n	8005318 <_vfiprintf_r+0x124>
 80053d0:	2301      	movs	r3, #1
 80053d2:	425b      	negs	r3, r3
 80053d4:	e7ce      	b.n	8005374 <_vfiprintf_r+0x180>
 80053d6:	2300      	movs	r3, #0
 80053d8:	001a      	movs	r2, r3
 80053da:	3701      	adds	r7, #1
 80053dc:	606b      	str	r3, [r5, #4]
 80053de:	7839      	ldrb	r1, [r7, #0]
 80053e0:	1c78      	adds	r0, r7, #1
 80053e2:	3930      	subs	r1, #48	; 0x30
 80053e4:	4684      	mov	ip, r0
 80053e6:	2909      	cmp	r1, #9
 80053e8:	d903      	bls.n	80053f2 <_vfiprintf_r+0x1fe>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0c3      	beq.n	8005376 <_vfiprintf_r+0x182>
 80053ee:	9209      	str	r2, [sp, #36]	; 0x24
 80053f0:	e7c1      	b.n	8005376 <_vfiprintf_r+0x182>
 80053f2:	230a      	movs	r3, #10
 80053f4:	435a      	muls	r2, r3
 80053f6:	4667      	mov	r7, ip
 80053f8:	1852      	adds	r2, r2, r1
 80053fa:	3b09      	subs	r3, #9
 80053fc:	e7ef      	b.n	80053de <_vfiprintf_r+0x1ea>
 80053fe:	ab07      	add	r3, sp, #28
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	0022      	movs	r2, r4
 8005404:	0029      	movs	r1, r5
 8005406:	0030      	movs	r0, r6
 8005408:	4b16      	ldr	r3, [pc, #88]	; (8005464 <_vfiprintf_r+0x270>)
 800540a:	e000      	b.n	800540e <_vfiprintf_r+0x21a>
 800540c:	bf00      	nop
 800540e:	9004      	str	r0, [sp, #16]
 8005410:	9b04      	ldr	r3, [sp, #16]
 8005412:	3301      	adds	r3, #1
 8005414:	d1d1      	bne.n	80053ba <_vfiprintf_r+0x1c6>
 8005416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005418:	07db      	lsls	r3, r3, #31
 800541a:	d405      	bmi.n	8005428 <_vfiprintf_r+0x234>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	059b      	lsls	r3, r3, #22
 8005420:	d402      	bmi.n	8005428 <_vfiprintf_r+0x234>
 8005422:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005424:	f7ff fd6e 	bl	8004f04 <__retarget_lock_release_recursive>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	065b      	lsls	r3, r3, #25
 800542c:	d500      	bpl.n	8005430 <_vfiprintf_r+0x23c>
 800542e:	e70a      	b.n	8005246 <_vfiprintf_r+0x52>
 8005430:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005432:	e70a      	b.n	800524a <_vfiprintf_r+0x56>
 8005434:	ab07      	add	r3, sp, #28
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	0022      	movs	r2, r4
 800543a:	0029      	movs	r1, r5
 800543c:	0030      	movs	r0, r6
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <_vfiprintf_r+0x270>)
 8005440:	f000 f882 	bl	8005548 <_printf_i>
 8005444:	e7e3      	b.n	800540e <_vfiprintf_r+0x21a>
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	08005adc 	.word	0x08005adc
 800544c:	08005afc 	.word	0x08005afc
 8005450:	08005abc 	.word	0x08005abc
 8005454:	08005b1c 	.word	0x08005b1c
 8005458:	08005b22 	.word	0x08005b22
 800545c:	08005b26 	.word	0x08005b26
 8005460:	00000000 	.word	0x00000000
 8005464:	080051cf 	.word	0x080051cf

08005468 <_printf_common>:
 8005468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546a:	0015      	movs	r5, r2
 800546c:	9301      	str	r3, [sp, #4]
 800546e:	688a      	ldr	r2, [r1, #8]
 8005470:	690b      	ldr	r3, [r1, #16]
 8005472:	000c      	movs	r4, r1
 8005474:	9000      	str	r0, [sp, #0]
 8005476:	4293      	cmp	r3, r2
 8005478:	da00      	bge.n	800547c <_printf_common+0x14>
 800547a:	0013      	movs	r3, r2
 800547c:	0022      	movs	r2, r4
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	3243      	adds	r2, #67	; 0x43
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	2a00      	cmp	r2, #0
 8005486:	d001      	beq.n	800548c <_printf_common+0x24>
 8005488:	3301      	adds	r3, #1
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	069b      	lsls	r3, r3, #26
 8005490:	d502      	bpl.n	8005498 <_printf_common+0x30>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	3302      	adds	r3, #2
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	2306      	movs	r3, #6
 800549c:	0017      	movs	r7, r2
 800549e:	401f      	ands	r7, r3
 80054a0:	421a      	tst	r2, r3
 80054a2:	d027      	beq.n	80054f4 <_printf_common+0x8c>
 80054a4:	0023      	movs	r3, r4
 80054a6:	3343      	adds	r3, #67	; 0x43
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	4193      	sbcs	r3, r2
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	0692      	lsls	r2, r2, #26
 80054b2:	d430      	bmi.n	8005516 <_printf_common+0xae>
 80054b4:	0022      	movs	r2, r4
 80054b6:	9901      	ldr	r1, [sp, #4]
 80054b8:	9800      	ldr	r0, [sp, #0]
 80054ba:	9e08      	ldr	r6, [sp, #32]
 80054bc:	3243      	adds	r2, #67	; 0x43
 80054be:	47b0      	blx	r6
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d025      	beq.n	8005510 <_printf_common+0xa8>
 80054c4:	2306      	movs	r3, #6
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	682a      	ldr	r2, [r5, #0]
 80054ca:	68e1      	ldr	r1, [r4, #12]
 80054cc:	2500      	movs	r5, #0
 80054ce:	4003      	ands	r3, r0
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d103      	bne.n	80054dc <_printf_common+0x74>
 80054d4:	1a8d      	subs	r5, r1, r2
 80054d6:	43eb      	mvns	r3, r5
 80054d8:	17db      	asrs	r3, r3, #31
 80054da:	401d      	ands	r5, r3
 80054dc:	68a3      	ldr	r3, [r4, #8]
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	dd01      	ble.n	80054e8 <_printf_common+0x80>
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	18ed      	adds	r5, r5, r3
 80054e8:	2700      	movs	r7, #0
 80054ea:	42bd      	cmp	r5, r7
 80054ec:	d120      	bne.n	8005530 <_printf_common+0xc8>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e010      	b.n	8005514 <_printf_common+0xac>
 80054f2:	3701      	adds	r7, #1
 80054f4:	68e3      	ldr	r3, [r4, #12]
 80054f6:	682a      	ldr	r2, [r5, #0]
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	42bb      	cmp	r3, r7
 80054fc:	ddd2      	ble.n	80054a4 <_printf_common+0x3c>
 80054fe:	0022      	movs	r2, r4
 8005500:	2301      	movs	r3, #1
 8005502:	9901      	ldr	r1, [sp, #4]
 8005504:	9800      	ldr	r0, [sp, #0]
 8005506:	9e08      	ldr	r6, [sp, #32]
 8005508:	3219      	adds	r2, #25
 800550a:	47b0      	blx	r6
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d1f0      	bne.n	80054f2 <_printf_common+0x8a>
 8005510:	2001      	movs	r0, #1
 8005512:	4240      	negs	r0, r0
 8005514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005516:	2030      	movs	r0, #48	; 0x30
 8005518:	18e1      	adds	r1, r4, r3
 800551a:	3143      	adds	r1, #67	; 0x43
 800551c:	7008      	strb	r0, [r1, #0]
 800551e:	0021      	movs	r1, r4
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	3145      	adds	r1, #69	; 0x45
 8005524:	7809      	ldrb	r1, [r1, #0]
 8005526:	18a2      	adds	r2, r4, r2
 8005528:	3243      	adds	r2, #67	; 0x43
 800552a:	3302      	adds	r3, #2
 800552c:	7011      	strb	r1, [r2, #0]
 800552e:	e7c1      	b.n	80054b4 <_printf_common+0x4c>
 8005530:	0022      	movs	r2, r4
 8005532:	2301      	movs	r3, #1
 8005534:	9901      	ldr	r1, [sp, #4]
 8005536:	9800      	ldr	r0, [sp, #0]
 8005538:	9e08      	ldr	r6, [sp, #32]
 800553a:	321a      	adds	r2, #26
 800553c:	47b0      	blx	r6
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	d0e6      	beq.n	8005510 <_printf_common+0xa8>
 8005542:	3701      	adds	r7, #1
 8005544:	e7d1      	b.n	80054ea <_printf_common+0x82>
	...

08005548 <_printf_i>:
 8005548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554a:	b08b      	sub	sp, #44	; 0x2c
 800554c:	9206      	str	r2, [sp, #24]
 800554e:	000a      	movs	r2, r1
 8005550:	3243      	adds	r2, #67	; 0x43
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	9005      	str	r0, [sp, #20]
 8005556:	9204      	str	r2, [sp, #16]
 8005558:	7e0a      	ldrb	r2, [r1, #24]
 800555a:	000c      	movs	r4, r1
 800555c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800555e:	2a78      	cmp	r2, #120	; 0x78
 8005560:	d807      	bhi.n	8005572 <_printf_i+0x2a>
 8005562:	2a62      	cmp	r2, #98	; 0x62
 8005564:	d809      	bhi.n	800557a <_printf_i+0x32>
 8005566:	2a00      	cmp	r2, #0
 8005568:	d100      	bne.n	800556c <_printf_i+0x24>
 800556a:	e0c1      	b.n	80056f0 <_printf_i+0x1a8>
 800556c:	2a58      	cmp	r2, #88	; 0x58
 800556e:	d100      	bne.n	8005572 <_printf_i+0x2a>
 8005570:	e08c      	b.n	800568c <_printf_i+0x144>
 8005572:	0026      	movs	r6, r4
 8005574:	3642      	adds	r6, #66	; 0x42
 8005576:	7032      	strb	r2, [r6, #0]
 8005578:	e022      	b.n	80055c0 <_printf_i+0x78>
 800557a:	0010      	movs	r0, r2
 800557c:	3863      	subs	r0, #99	; 0x63
 800557e:	2815      	cmp	r0, #21
 8005580:	d8f7      	bhi.n	8005572 <_printf_i+0x2a>
 8005582:	f7fb fd67 	bl	8001054 <__gnu_thumb1_case_shi>
 8005586:	0016      	.short	0x0016
 8005588:	fff6001f 	.word	0xfff6001f
 800558c:	fff6fff6 	.word	0xfff6fff6
 8005590:	001ffff6 	.word	0x001ffff6
 8005594:	fff6fff6 	.word	0xfff6fff6
 8005598:	fff6fff6 	.word	0xfff6fff6
 800559c:	003600a8 	.word	0x003600a8
 80055a0:	fff6009a 	.word	0xfff6009a
 80055a4:	00b9fff6 	.word	0x00b9fff6
 80055a8:	0036fff6 	.word	0x0036fff6
 80055ac:	fff6fff6 	.word	0xfff6fff6
 80055b0:	009e      	.short	0x009e
 80055b2:	0026      	movs	r6, r4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	3642      	adds	r6, #66	; 0x42
 80055b8:	1d11      	adds	r1, r2, #4
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	6813      	ldr	r3, [r2, #0]
 80055be:	7033      	strb	r3, [r6, #0]
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0a7      	b.n	8005714 <_printf_i+0x1cc>
 80055c4:	6808      	ldr	r0, [r1, #0]
 80055c6:	6819      	ldr	r1, [r3, #0]
 80055c8:	1d0a      	adds	r2, r1, #4
 80055ca:	0605      	lsls	r5, r0, #24
 80055cc:	d50b      	bpl.n	80055e6 <_printf_i+0x9e>
 80055ce:	680d      	ldr	r5, [r1, #0]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	da03      	bge.n	80055de <_printf_i+0x96>
 80055d6:	232d      	movs	r3, #45	; 0x2d
 80055d8:	9a04      	ldr	r2, [sp, #16]
 80055da:	426d      	negs	r5, r5
 80055dc:	7013      	strb	r3, [r2, #0]
 80055de:	4b61      	ldr	r3, [pc, #388]	; (8005764 <_printf_i+0x21c>)
 80055e0:	270a      	movs	r7, #10
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	e01b      	b.n	800561e <_printf_i+0xd6>
 80055e6:	680d      	ldr	r5, [r1, #0]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	0641      	lsls	r1, r0, #25
 80055ec:	d5f1      	bpl.n	80055d2 <_printf_i+0x8a>
 80055ee:	b22d      	sxth	r5, r5
 80055f0:	e7ef      	b.n	80055d2 <_printf_i+0x8a>
 80055f2:	680d      	ldr	r5, [r1, #0]
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	1d08      	adds	r0, r1, #4
 80055f8:	6018      	str	r0, [r3, #0]
 80055fa:	062e      	lsls	r6, r5, #24
 80055fc:	d501      	bpl.n	8005602 <_printf_i+0xba>
 80055fe:	680d      	ldr	r5, [r1, #0]
 8005600:	e003      	b.n	800560a <_printf_i+0xc2>
 8005602:	066d      	lsls	r5, r5, #25
 8005604:	d5fb      	bpl.n	80055fe <_printf_i+0xb6>
 8005606:	680d      	ldr	r5, [r1, #0]
 8005608:	b2ad      	uxth	r5, r5
 800560a:	4b56      	ldr	r3, [pc, #344]	; (8005764 <_printf_i+0x21c>)
 800560c:	2708      	movs	r7, #8
 800560e:	9303      	str	r3, [sp, #12]
 8005610:	2a6f      	cmp	r2, #111	; 0x6f
 8005612:	d000      	beq.n	8005616 <_printf_i+0xce>
 8005614:	3702      	adds	r7, #2
 8005616:	0023      	movs	r3, r4
 8005618:	2200      	movs	r2, #0
 800561a:	3343      	adds	r3, #67	; 0x43
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	6863      	ldr	r3, [r4, #4]
 8005620:	60a3      	str	r3, [r4, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	db03      	blt.n	800562e <_printf_i+0xe6>
 8005626:	2204      	movs	r2, #4
 8005628:	6821      	ldr	r1, [r4, #0]
 800562a:	4391      	bics	r1, r2
 800562c:	6021      	str	r1, [r4, #0]
 800562e:	2d00      	cmp	r5, #0
 8005630:	d102      	bne.n	8005638 <_printf_i+0xf0>
 8005632:	9e04      	ldr	r6, [sp, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00c      	beq.n	8005652 <_printf_i+0x10a>
 8005638:	9e04      	ldr	r6, [sp, #16]
 800563a:	0028      	movs	r0, r5
 800563c:	0039      	movs	r1, r7
 800563e:	f7fb fd99 	bl	8001174 <__aeabi_uidivmod>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	3e01      	subs	r6, #1
 8005646:	5c5b      	ldrb	r3, [r3, r1]
 8005648:	7033      	strb	r3, [r6, #0]
 800564a:	002b      	movs	r3, r5
 800564c:	0005      	movs	r5, r0
 800564e:	429f      	cmp	r7, r3
 8005650:	d9f3      	bls.n	800563a <_printf_i+0xf2>
 8005652:	2f08      	cmp	r7, #8
 8005654:	d109      	bne.n	800566a <_printf_i+0x122>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d506      	bpl.n	800566a <_printf_i+0x122>
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	6922      	ldr	r2, [r4, #16]
 8005660:	4293      	cmp	r3, r2
 8005662:	dc02      	bgt.n	800566a <_printf_i+0x122>
 8005664:	2330      	movs	r3, #48	; 0x30
 8005666:	3e01      	subs	r6, #1
 8005668:	7033      	strb	r3, [r6, #0]
 800566a:	9b04      	ldr	r3, [sp, #16]
 800566c:	1b9b      	subs	r3, r3, r6
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	9b07      	ldr	r3, [sp, #28]
 8005672:	0021      	movs	r1, r4
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	9805      	ldr	r0, [sp, #20]
 8005678:	9b06      	ldr	r3, [sp, #24]
 800567a:	aa09      	add	r2, sp, #36	; 0x24
 800567c:	f7ff fef4 	bl	8005468 <_printf_common>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d14c      	bne.n	800571e <_printf_i+0x1d6>
 8005684:	2001      	movs	r0, #1
 8005686:	4240      	negs	r0, r0
 8005688:	b00b      	add	sp, #44	; 0x2c
 800568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568c:	3145      	adds	r1, #69	; 0x45
 800568e:	700a      	strb	r2, [r1, #0]
 8005690:	4a34      	ldr	r2, [pc, #208]	; (8005764 <_printf_i+0x21c>)
 8005692:	9203      	str	r2, [sp, #12]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	6821      	ldr	r1, [r4, #0]
 8005698:	ca20      	ldmia	r2!, {r5}
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	0608      	lsls	r0, r1, #24
 800569e:	d516      	bpl.n	80056ce <_printf_i+0x186>
 80056a0:	07cb      	lsls	r3, r1, #31
 80056a2:	d502      	bpl.n	80056aa <_printf_i+0x162>
 80056a4:	2320      	movs	r3, #32
 80056a6:	4319      	orrs	r1, r3
 80056a8:	6021      	str	r1, [r4, #0]
 80056aa:	2710      	movs	r7, #16
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	d1b2      	bne.n	8005616 <_printf_i+0xce>
 80056b0:	2320      	movs	r3, #32
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	439a      	bics	r2, r3
 80056b6:	6022      	str	r2, [r4, #0]
 80056b8:	e7ad      	b.n	8005616 <_printf_i+0xce>
 80056ba:	2220      	movs	r2, #32
 80056bc:	6809      	ldr	r1, [r1, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	0022      	movs	r2, r4
 80056c4:	2178      	movs	r1, #120	; 0x78
 80056c6:	3245      	adds	r2, #69	; 0x45
 80056c8:	7011      	strb	r1, [r2, #0]
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <_printf_i+0x220>)
 80056cc:	e7e1      	b.n	8005692 <_printf_i+0x14a>
 80056ce:	0648      	lsls	r0, r1, #25
 80056d0:	d5e6      	bpl.n	80056a0 <_printf_i+0x158>
 80056d2:	b2ad      	uxth	r5, r5
 80056d4:	e7e4      	b.n	80056a0 <_printf_i+0x158>
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	680d      	ldr	r5, [r1, #0]
 80056da:	1d10      	adds	r0, r2, #4
 80056dc:	6949      	ldr	r1, [r1, #20]
 80056de:	6018      	str	r0, [r3, #0]
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	062e      	lsls	r6, r5, #24
 80056e4:	d501      	bpl.n	80056ea <_printf_i+0x1a2>
 80056e6:	6019      	str	r1, [r3, #0]
 80056e8:	e002      	b.n	80056f0 <_printf_i+0x1a8>
 80056ea:	066d      	lsls	r5, r5, #25
 80056ec:	d5fb      	bpl.n	80056e6 <_printf_i+0x19e>
 80056ee:	8019      	strh	r1, [r3, #0]
 80056f0:	2300      	movs	r3, #0
 80056f2:	9e04      	ldr	r6, [sp, #16]
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	e7bb      	b.n	8005670 <_printf_i+0x128>
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	1d11      	adds	r1, r2, #4
 80056fc:	6019      	str	r1, [r3, #0]
 80056fe:	6816      	ldr	r6, [r2, #0]
 8005700:	2100      	movs	r1, #0
 8005702:	0030      	movs	r0, r6
 8005704:	6862      	ldr	r2, [r4, #4]
 8005706:	f000 f8ed 	bl	80058e4 <memchr>
 800570a:	2800      	cmp	r0, #0
 800570c:	d001      	beq.n	8005712 <_printf_i+0x1ca>
 800570e:	1b80      	subs	r0, r0, r6
 8005710:	6060      	str	r0, [r4, #4]
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	2300      	movs	r3, #0
 8005718:	9a04      	ldr	r2, [sp, #16]
 800571a:	7013      	strb	r3, [r2, #0]
 800571c:	e7a8      	b.n	8005670 <_printf_i+0x128>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	0032      	movs	r2, r6
 8005722:	9906      	ldr	r1, [sp, #24]
 8005724:	9805      	ldr	r0, [sp, #20]
 8005726:	9d07      	ldr	r5, [sp, #28]
 8005728:	47a8      	blx	r5
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d0aa      	beq.n	8005684 <_printf_i+0x13c>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	079b      	lsls	r3, r3, #30
 8005732:	d415      	bmi.n	8005760 <_printf_i+0x218>
 8005734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005736:	68e0      	ldr	r0, [r4, #12]
 8005738:	4298      	cmp	r0, r3
 800573a:	daa5      	bge.n	8005688 <_printf_i+0x140>
 800573c:	0018      	movs	r0, r3
 800573e:	e7a3      	b.n	8005688 <_printf_i+0x140>
 8005740:	0022      	movs	r2, r4
 8005742:	2301      	movs	r3, #1
 8005744:	9906      	ldr	r1, [sp, #24]
 8005746:	9805      	ldr	r0, [sp, #20]
 8005748:	9e07      	ldr	r6, [sp, #28]
 800574a:	3219      	adds	r2, #25
 800574c:	47b0      	blx	r6
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	d098      	beq.n	8005684 <_printf_i+0x13c>
 8005752:	3501      	adds	r5, #1
 8005754:	68e3      	ldr	r3, [r4, #12]
 8005756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	42ab      	cmp	r3, r5
 800575c:	dcf0      	bgt.n	8005740 <_printf_i+0x1f8>
 800575e:	e7e9      	b.n	8005734 <_printf_i+0x1ec>
 8005760:	2500      	movs	r5, #0
 8005762:	e7f7      	b.n	8005754 <_printf_i+0x20c>
 8005764:	08005b2d 	.word	0x08005b2d
 8005768:	08005b3e 	.word	0x08005b3e

0800576c <_sbrk_r>:
 800576c:	2300      	movs	r3, #0
 800576e:	b570      	push	{r4, r5, r6, lr}
 8005770:	4d06      	ldr	r5, [pc, #24]	; (800578c <_sbrk_r+0x20>)
 8005772:	0004      	movs	r4, r0
 8005774:	0008      	movs	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fc f9f8 	bl	8001b6c <_sbrk>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d103      	bne.n	8005788 <_sbrk_r+0x1c>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d000      	beq.n	8005788 <_sbrk_r+0x1c>
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	bd70      	pop	{r4, r5, r6, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	2000031c 	.word	0x2000031c

08005790 <__sread>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	000c      	movs	r4, r1
 8005794:	250e      	movs	r5, #14
 8005796:	5f49      	ldrsh	r1, [r1, r5]
 8005798:	f000 f8c0 	bl	800591c <_read_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	db03      	blt.n	80057a8 <__sread+0x18>
 80057a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057a2:	181b      	adds	r3, r3, r0
 80057a4:	6563      	str	r3, [r4, #84]	; 0x54
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	4a02      	ldr	r2, [pc, #8]	; (80057b4 <__sread+0x24>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	e7f9      	b.n	80057a6 <__sread+0x16>
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	ffffefff 	.word	0xffffefff

080057b8 <__swrite>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	001f      	movs	r7, r3
 80057bc:	898b      	ldrh	r3, [r1, #12]
 80057be:	0005      	movs	r5, r0
 80057c0:	000c      	movs	r4, r1
 80057c2:	0016      	movs	r6, r2
 80057c4:	05db      	lsls	r3, r3, #23
 80057c6:	d505      	bpl.n	80057d4 <__swrite+0x1c>
 80057c8:	230e      	movs	r3, #14
 80057ca:	5ec9      	ldrsh	r1, [r1, r3]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2302      	movs	r3, #2
 80057d0:	f000 f874 	bl	80058bc <_lseek_r>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	4a05      	ldr	r2, [pc, #20]	; (80057ec <__swrite+0x34>)
 80057d8:	0028      	movs	r0, r5
 80057da:	4013      	ands	r3, r2
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	0032      	movs	r2, r6
 80057e0:	230e      	movs	r3, #14
 80057e2:	5ee1      	ldrsh	r1, [r4, r3]
 80057e4:	003b      	movs	r3, r7
 80057e6:	f000 f81f 	bl	8005828 <_write_r>
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	ffffefff 	.word	0xffffefff

080057f0 <__sseek>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	000c      	movs	r4, r1
 80057f4:	250e      	movs	r5, #14
 80057f6:	5f49      	ldrsh	r1, [r1, r5]
 80057f8:	f000 f860 	bl	80058bc <_lseek_r>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	1c42      	adds	r2, r0, #1
 8005800:	d103      	bne.n	800580a <__sseek+0x1a>
 8005802:	4a05      	ldr	r2, [pc, #20]	; (8005818 <__sseek+0x28>)
 8005804:	4013      	ands	r3, r2
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	0152      	lsls	r2, r2, #5
 800580e:	4313      	orrs	r3, r2
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	6560      	str	r0, [r4, #84]	; 0x54
 8005814:	e7f8      	b.n	8005808 <__sseek+0x18>
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	ffffefff 	.word	0xffffefff

0800581c <__sclose>:
 800581c:	b510      	push	{r4, lr}
 800581e:	230e      	movs	r3, #14
 8005820:	5ec9      	ldrsh	r1, [r1, r3]
 8005822:	f000 f815 	bl	8005850 <_close_r>
 8005826:	bd10      	pop	{r4, pc}

08005828 <_write_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	0004      	movs	r4, r0
 800582c:	0008      	movs	r0, r1
 800582e:	0011      	movs	r1, r2
 8005830:	001a      	movs	r2, r3
 8005832:	2300      	movs	r3, #0
 8005834:	4d05      	ldr	r5, [pc, #20]	; (800584c <_write_r+0x24>)
 8005836:	602b      	str	r3, [r5, #0]
 8005838:	f7fb fed6 	bl	80015e8 <_write>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d103      	bne.n	8005848 <_write_r+0x20>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d000      	beq.n	8005848 <_write_r+0x20>
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	bd70      	pop	{r4, r5, r6, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	2000031c 	.word	0x2000031c

08005850 <_close_r>:
 8005850:	2300      	movs	r3, #0
 8005852:	b570      	push	{r4, r5, r6, lr}
 8005854:	4d06      	ldr	r5, [pc, #24]	; (8005870 <_close_r+0x20>)
 8005856:	0004      	movs	r4, r0
 8005858:	0008      	movs	r0, r1
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	f7fc f95a 	bl	8001b14 <_close>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d103      	bne.n	800586c <_close_r+0x1c>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d000      	beq.n	800586c <_close_r+0x1c>
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	2000031c 	.word	0x2000031c

08005874 <_fstat_r>:
 8005874:	2300      	movs	r3, #0
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	4d06      	ldr	r5, [pc, #24]	; (8005894 <_fstat_r+0x20>)
 800587a:	0004      	movs	r4, r0
 800587c:	0008      	movs	r0, r1
 800587e:	0011      	movs	r1, r2
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	f7fc f951 	bl	8001b28 <_fstat>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d103      	bne.n	8005892 <_fstat_r+0x1e>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d000      	beq.n	8005892 <_fstat_r+0x1e>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	2000031c 	.word	0x2000031c

08005898 <_isatty_r>:
 8005898:	2300      	movs	r3, #0
 800589a:	b570      	push	{r4, r5, r6, lr}
 800589c:	4d06      	ldr	r5, [pc, #24]	; (80058b8 <_isatty_r+0x20>)
 800589e:	0004      	movs	r4, r0
 80058a0:	0008      	movs	r0, r1
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f7fc f94e 	bl	8001b44 <_isatty>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d103      	bne.n	80058b4 <_isatty_r+0x1c>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d000      	beq.n	80058b4 <_isatty_r+0x1c>
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	2000031c 	.word	0x2000031c

080058bc <_lseek_r>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	0004      	movs	r4, r0
 80058c0:	0008      	movs	r0, r1
 80058c2:	0011      	movs	r1, r2
 80058c4:	001a      	movs	r2, r3
 80058c6:	2300      	movs	r3, #0
 80058c8:	4d05      	ldr	r5, [pc, #20]	; (80058e0 <_lseek_r+0x24>)
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fc f943 	bl	8001b56 <_lseek>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d103      	bne.n	80058dc <_lseek_r+0x20>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d000      	beq.n	80058dc <_lseek_r+0x20>
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	bd70      	pop	{r4, r5, r6, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	2000031c 	.word	0x2000031c

080058e4 <memchr>:
 80058e4:	b2c9      	uxtb	r1, r1
 80058e6:	1882      	adds	r2, r0, r2
 80058e8:	4290      	cmp	r0, r2
 80058ea:	d101      	bne.n	80058f0 <memchr+0xc>
 80058ec:	2000      	movs	r0, #0
 80058ee:	4770      	bx	lr
 80058f0:	7803      	ldrb	r3, [r0, #0]
 80058f2:	428b      	cmp	r3, r1
 80058f4:	d0fb      	beq.n	80058ee <memchr+0xa>
 80058f6:	3001      	adds	r0, #1
 80058f8:	e7f6      	b.n	80058e8 <memchr+0x4>
	...

080058fc <__malloc_lock>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4802      	ldr	r0, [pc, #8]	; (8005908 <__malloc_lock+0xc>)
 8005900:	f7ff faff 	bl	8004f02 <__retarget_lock_acquire_recursive>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	20000310 	.word	0x20000310

0800590c <__malloc_unlock>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4802      	ldr	r0, [pc, #8]	; (8005918 <__malloc_unlock+0xc>)
 8005910:	f7ff faf8 	bl	8004f04 <__retarget_lock_release_recursive>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	20000310 	.word	0x20000310

0800591c <_read_r>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	0004      	movs	r4, r0
 8005920:	0008      	movs	r0, r1
 8005922:	0011      	movs	r1, r2
 8005924:	001a      	movs	r2, r3
 8005926:	2300      	movs	r3, #0
 8005928:	4d05      	ldr	r5, [pc, #20]	; (8005940 <_read_r+0x24>)
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	f7fc f8d5 	bl	8001ada <_read>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d103      	bne.n	800593c <_read_r+0x20>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d000      	beq.n	800593c <_read_r+0x20>
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	2000031c 	.word	0x2000031c

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

Disassembly of section .mysection:

0801000c <Blink>:
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8010014:	23a0      	movs	r3, #160	; 0xa0
 8010016:	05db      	lsls	r3, r3, #23
 8010018:	2120      	movs	r1, #32
 801001a:	0018      	movs	r0, r3
 801001c:	f7f2 f8eb 	bl	80021f6 <HAL_GPIO_TogglePin>
	HAL_Delay(dlyticks);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	0018      	movs	r0, r3
 8010024:	f7f1 fe8e 	bl	8001d44 <HAL_Delay>
}
 8010028:	46c0      	nop			; (mov r8, r8)
 801002a:	46bd      	mov	sp, r7
 801002c:	b002      	add	sp, #8
 801002e:	bd80      	pop	{r7, pc}

08010030 <TurnOn>:
{
 8010030:	b580      	push	{r7, lr}
 8010032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8010034:	23a0      	movs	r3, #160	; 0xa0
 8010036:	05db      	lsls	r3, r3, #23
 8010038:	2201      	movs	r2, #1
 801003a:	2120      	movs	r1, #32
 801003c:	0018      	movs	r0, r3
 801003e:	f7f2 f8bd 	bl	80021bc <HAL_GPIO_WritePin>
}
 8010042:	46c0      	nop			; (mov r8, r8)
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <TurnOff>:
{
 8010048:	b580      	push	{r7, lr}
 801004a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 801004c:	23a0      	movs	r3, #160	; 0xa0
 801004e:	05db      	lsls	r3, r3, #23
 8010050:	2200      	movs	r2, #0
 8010052:	2120      	movs	r1, #32
 8010054:	0018      	movs	r0, r3
 8010056:	f7f2 f8b1 	bl	80021bc <HAL_GPIO_WritePin>
}
 801005a:	46c0      	nop			; (mov r8, r8)
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
