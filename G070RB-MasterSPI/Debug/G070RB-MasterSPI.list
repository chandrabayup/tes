
G070RB-MasterSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c48  08002c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08002c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002c5c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c732  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be0  00000000  00000000  0002c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014935  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0c7  00000000  00000000  00043ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f2b  00000000  00000000  0004ffac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000214c  00000000  00000000  000d1f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002ba8 	.word	0x08002ba8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002ba8 	.word	0x08002ba8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fa53 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f813 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f8e5 	bl	80005c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fe:	f000 f895 	bl	800052c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000402:	f000 f855 	bl	80004b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t starAPP = 0x50;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	2250      	movs	r2, #80	; 0x50
 800040a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &starAPP, 1, HAL_MAX_DELAY);
 800040c:	2301      	movs	r3, #1
 800040e:	425b      	negs	r3, r3
 8000410:	1df9      	adds	r1, r7, #7
 8000412:	4802      	ldr	r0, [pc, #8]	; (800041c <main+0x30>)
 8000414:	2201      	movs	r2, #1
 8000416:	f001 fbef 	bl	8001bf8 <HAL_SPI_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800041a:	e7fe      	b.n	800041a <main+0x2e>
 800041c:	20000028 	.word	0x20000028

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b093      	sub	sp, #76	; 0x4c
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	2414      	movs	r4, #20
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2334      	movs	r3, #52	; 0x34
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 fbb1 	bl	8002b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	0018      	movs	r0, r3
 800043a:	2310      	movs	r3, #16
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f002 fbaa 	bl	8002b98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	0018      	movs	r0, r3
 800044a:	f000 fce3 	bl	8000e14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2202      	movs	r2, #2
 8000452:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2240      	movs	r2, #64	; 0x40
 8000466:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	193b      	adds	r3, r7, r4
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fd1b 	bl	8000eac <HAL_RCC_OscConfig>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800047a:	f000 f8f5 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2100      	movs	r1, #0
 800049a:	0018      	movs	r0, r3
 800049c:	f001 f816 	bl	80014cc <HAL_RCC_ClockConfig>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004a4:	f000 f8e0 	bl	8000668 <Error_Handler>
  }
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b013      	add	sp, #76	; 0x4c
 80004ae:	bd90      	pop	{r4, r7, pc}

080004b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_SPI1_Init+0x74>)
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <MX_SPI1_Init+0x78>)
 80004b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_SPI1_Init+0x74>)
 80004bc:	2282      	movs	r2, #130	; 0x82
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_SPI1_Init+0x74>)
 80004ca:	22e0      	movs	r2, #224	; 0xe0
 80004cc:	00d2      	lsls	r2, r2, #3
 80004ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_SPI1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_SPI1_Init+0x74>)
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	02d2      	lsls	r2, r2, #11
 80004e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_SPI1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_SPI1_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_SPI1_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_SPI1_Init+0x74>)
 80004fe:	2207      	movs	r2, #7
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_SPI1_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_SPI1_Init+0x74>)
 800050a:	2208      	movs	r2, #8
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_SPI1_Init+0x74>)
 8000510:	0018      	movs	r0, r3
 8000512:	f001 fab9 	bl	8001a88 <HAL_SPI_Init>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800051a:	f000 f8a5 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000028 	.word	0x20000028
 8000528:	40013000 	.word	0x40013000

0800052c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b23      	ldr	r3, [pc, #140]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <MX_USART2_UART_Init+0x98>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000536:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000538:	22e1      	movs	r2, #225	; 0xe1
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	0552      	lsls	r2, r2, #21
 8000544:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054c:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000554:	220c      	movs	r2, #12
 8000556:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000560:	2200      	movs	r2, #0
 8000562:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000566:	2200      	movs	r2, #0
 8000568:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fe0b 	bl	8002194 <HAL_UART_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000582:	f000 f871 	bl	8000668 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fa00 	bl	8002990 <HAL_UARTEx_SetTxFifoThreshold>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000594:	f000 f868 	bl	8000668 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f002 fa37 	bl	8002a10 <HAL_UARTEx_SetRxFifoThreshold>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80005a6:	f000 f85f 	bl	8000668 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_USART2_UART_Init+0x94>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 f9b5 	bl	800291c <HAL_UARTEx_DisableFifoMode>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80005b6:	f000 f857 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	40004400 	.word	0x40004400

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b089      	sub	sp, #36	; 0x24
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	240c      	movs	r4, #12
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2314      	movs	r3, #20
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f002 fadd 	bl	8002b98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_GPIO_Init+0x9c>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_GPIO_Init+0x9c>)
 80005e4:	2104      	movs	r1, #4
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_GPIO_Init+0x9c>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	2204      	movs	r2, #4
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_GPIO_Init+0x9c>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_GPIO_Init+0x9c>)
 80005fc:	2120      	movs	r1, #32
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_GPIO_Init+0x9c>)
 8000604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000606:	2220      	movs	r2, #32
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_GPIO_Init+0x9c>)
 8000610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_GPIO_Init+0x9c>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_GPIO_Init+0x9c>)
 800061c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000626:	23a0      	movs	r3, #160	; 0xa0
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	2200      	movs	r2, #0
 800062c:	2120      	movs	r1, #32
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fbd2 	bl	8000dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2220      	movs	r2, #32
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2201      	movs	r2, #1
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2202      	movs	r2, #2
 800064c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800064e:	187a      	adds	r2, r7, r1
 8000650:	23a0      	movs	r3, #160	; 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fa5a 	bl	8000b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b009      	add	sp, #36	; 0x24
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x44>)
 800067c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_MspInit+0x44>)
 8000680:	2101      	movs	r1, #1
 8000682:	430a      	orrs	r2, r1
 8000684:	641a      	str	r2, [r3, #64]	; 0x40
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x44>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	2201      	movs	r2, #1
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_MspInit+0x44>)
 8000694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_MspInit+0x44>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0549      	lsls	r1, r1, #21
 800069c:	430a      	orrs	r2, r1
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_MspInit+0x44>)
 80006a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	055b      	lsls	r3, r3, #21
 80006a8:	4013      	ands	r3, r2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	; 0x2c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	2414      	movs	r4, #20
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	2314      	movs	r3, #20
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f002 fa62 	bl	8002b98 <memset>
  if(hspi->Instance==SPI1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <HAL_SPI_MspInit+0x8c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d130      	bne.n	8000740 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <HAL_SPI_MspInit+0x90>)
 80006e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_SPI_MspInit+0x90>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0149      	lsls	r1, r1, #5
 80006e8:	430a      	orrs	r2, r1
 80006ea:	641a      	str	r2, [r3, #64]	; 0x40
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_SPI_MspInit+0x90>)
 80006ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	015b      	lsls	r3, r3, #5
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_SPI_MspInit+0x90>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_SPI_MspInit+0x90>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_SPI_MspInit+0x90>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	22d2      	movs	r2, #210	; 0xd2
 8000718:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	187a      	adds	r2, r7, r1
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f000 f9e8 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b00b      	add	sp, #44	; 0x2c
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40013000 	.word	0x40013000
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b091      	sub	sp, #68	; 0x44
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	232c      	movs	r3, #44	; 0x2c
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	0018      	movs	r0, r3
 800075e:	2314      	movs	r3, #20
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f002 fa18 	bl	8002b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	2410      	movs	r4, #16
 800076a:	193b      	adds	r3, r7, r4
 800076c:	0018      	movs	r0, r3
 800076e:	231c      	movs	r3, #28
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f002 fa10 	bl	8002b98 <memset>
  if(huart->Instance==USART2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <HAL_UART_MspInit+0xb8>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d13e      	bne.n	8000800 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f845 	bl	8001820 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800079a:	f7ff ff65 	bl	8000668 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <HAL_UART_MspInit+0xbc>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <HAL_UART_MspInit+0xbc>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_UART_MspInit+0xbc>)
 80007ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_UART_MspInit+0xbc>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <HAL_UART_MspInit+0xbc>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_UART_MspInit+0xbc>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d2:	212c      	movs	r1, #44	; 0x2c
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2201      	movs	r2, #1
 80007e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2201      	movs	r2, #1
 80007f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	187a      	adds	r2, r7, r1
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 f988 	bl	8000b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b011      	add	sp, #68	; 0x44
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	40004400 	.word	0x40004400
 800080c:	40021000 	.word	0x40021000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f89c 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff fff7 	bl	800083e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000876:	f002 f96b 	bl	8002b50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800087a:	f7ff fdb7 	bl	80003ec <main>

0800087e <LoopForever>:

LoopForever:
  b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   r0, =_estack
 8000880:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800088c:	08002c50 	.word	0x08002c50
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000894:	20000124 	.word	0x20000124

08000898 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_IRQHandler>
	...

0800089c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_Init+0x3c>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_Init+0x3c>)
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	0049      	lsls	r1, r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 f810 	bl	80008dc <HAL_InitTick>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d003      	beq.n	80008c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e001      	b.n	80008cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fed4 	bl	8000674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <HAL_InitTick+0x88>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d02b      	beq.n	800094c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_InitTick+0x8c>)
 80008f6:	681c      	ldr	r4, [r3, #0]
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_InitTick+0x88>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	0019      	movs	r1, r3
 80008fe:	23fa      	movs	r3, #250	; 0xfa
 8000900:	0098      	lsls	r0, r3, #2
 8000902:	f7ff fbfd 	bl	8000100 <__udivsi3>
 8000906:	0003      	movs	r3, r0
 8000908:	0019      	movs	r1, r3
 800090a:	0020      	movs	r0, r4
 800090c:	f7ff fbf8 	bl	8000100 <__udivsi3>
 8000910:	0003      	movs	r3, r0
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f8ef 	bl	8000af6 <HAL_SYSTICK_Config>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d112      	bne.n	8000942 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b03      	cmp	r3, #3
 8000920:	d80a      	bhi.n	8000938 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	2200      	movs	r2, #0
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f8ce 	bl	8000acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_InitTick+0x90>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	e00d      	b.n	8000954 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000938:	230f      	movs	r3, #15
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e008      	b.n	8000954 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000942:	230f      	movs	r3, #15
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e003      	b.n	8000954 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800094c:	230f      	movs	r3, #15
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000954:	230f      	movs	r3, #15
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b005      	add	sp, #20
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000008 	.word	0x20000008
 8000968:	20000000 	.word	0x20000000
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_IncTick+0x20>)
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000008 	.word	0x20000008
 8000990:	20000120 	.word	0x20000120

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	20000120 	.word	0x20000120

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b7f      	cmp	r3, #127	; 0x7f
 80009bc:	d828      	bhi.n	8000a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009be:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	589b      	ldr	r3, [r3, r2]
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0011      	movs	r1, r2
 80009d4:	2203      	movs	r2, #3
 80009d6:	400a      	ands	r2, r1
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	21ff      	movs	r1, #255	; 0xff
 80009dc:	4091      	lsls	r1, r2
 80009de:	000a      	movs	r2, r1
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	401a      	ands	r2, r3
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4003      	ands	r3, r0
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	33c0      	adds	r3, #192	; 0xc0
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0e:	e031      	b.n	8000a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0019      	movs	r1, r3
 8000a18:	230f      	movs	r3, #15
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3306      	adds	r3, #6
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	; 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001c      	movs	r4, r3
 8000a60:	230f      	movs	r3, #15
 8000a62:	4023      	ands	r3, r4
 8000a64:	3b08      	subs	r3, #8
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	18c3      	adds	r3, r0, r3
 8000a70:	3304      	adds	r3, #4
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b003      	add	sp, #12
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	045b      	lsls	r3, r3, #17
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d301      	bcc.n	8000a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e010      	b.n	8000abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SysTick_Config+0x44>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	3a01      	subs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff ff7c 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	1c02      	adds	r2, r0, #0
 8000adc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff5d 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff ffbf 	bl	8000a84 <SysTick_Config>
 8000b06:	0003      	movs	r3, r0
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e147      	b.n	8000db0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d100      	bne.n	8000b38 <HAL_GPIO_Init+0x28>
 8000b36:	e138      	b.n	8000daa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d005      	beq.n	8000b50 <HAL_GPIO_Init+0x40>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2203      	movs	r2, #3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d130      	bne.n	8000bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	0013      	movs	r3, r2
 8000b60:	43da      	mvns	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	409a      	lsls	r2, r3
 8000b72:	0013      	movs	r3, r2
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b86:	2201      	movs	r2, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	091b      	lsrs	r3, r3, #4
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d017      	beq.n	8000bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	409a      	lsls	r2, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d123      	bne.n	8000c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	08da      	lsrs	r2, r3, #3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3208      	adds	r2, #8
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	58d3      	ldr	r3, [r2, r3]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	220f      	movs	r2, #15
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	691a      	ldr	r2, [r3, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	2107      	movs	r1, #7
 8000c26:	400b      	ands	r3, r1
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	08da      	lsrs	r2, r3, #3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	6939      	ldr	r1, [r7, #16]
 8000c40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	401a      	ands	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	23c0      	movs	r3, #192	; 0xc0
 8000c7c:	029b      	lsls	r3, r3, #10
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d100      	bne.n	8000c84 <HAL_GPIO_Init+0x174>
 8000c82:	e092      	b.n	8000daa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c84:	4a50      	ldr	r2, [pc, #320]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	089b      	lsrs	r3, r3, #2
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	589b      	ldr	r3, [r3, r2]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	23a0      	movs	r3, #160	; 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x1ca>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a45      	ldr	r2, [pc, #276]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00d      	beq.n	8000cd6 <HAL_GPIO_Init+0x1c6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a44      	ldr	r2, [pc, #272]	; (8000dd0 <HAL_GPIO_Init+0x2c0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d007      	beq.n	8000cd2 <HAL_GPIO_Init+0x1c2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a43      	ldr	r2, [pc, #268]	; (8000dd4 <HAL_GPIO_Init+0x2c4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_GPIO_Init+0x1be>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x1cc>
 8000cce:	2305      	movs	r3, #5
 8000cd0:	e004      	b.n	8000cdc <HAL_GPIO_Init+0x1cc>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	e002      	b.n	8000cdc <HAL_GPIO_Init+0x1cc>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <HAL_GPIO_Init+0x1cc>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	2103      	movs	r1, #3
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	00d2      	lsls	r2, r2, #3
 8000ce4:	4093      	lsls	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cec:	4936      	ldr	r1, [pc, #216]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	035b      	lsls	r3, r3, #13
 8000d12:	4013      	ands	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	039b      	lsls	r3, r3, #14
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000d50:	2384      	movs	r3, #132	; 0x84
 8000d52:	58d3      	ldr	r3, [r2, r3]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	43da      	mvns	r2, r3
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d74:	4914      	ldr	r1, [pc, #80]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	2284      	movs	r2, #132	; 0x84
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	58d3      	ldr	r3, [r2, r3]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	025b      	lsls	r3, r3, #9
 8000d96:	4013      	ands	r3, r2
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000da2:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	40da      	lsrs	r2, r3
 8000db8:	1e13      	subs	r3, r2, #0
 8000dba:	d000      	beq.n	8000dbe <HAL_GPIO_Init+0x2ae>
 8000dbc:	e6b0      	b.n	8000b20 <HAL_GPIO_Init+0x10>
  }
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b006      	add	sp, #24
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	50000400 	.word	0x50000400
 8000dd0:	50000800 	.word	0x50000800
 8000dd4:	50000c00 	.word	0x50000c00

08000dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	0008      	movs	r0, r1
 8000de2:	0011      	movs	r1, r2
 8000de4:	1cbb      	adds	r3, r7, #2
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	801a      	strh	r2, [r3, #0]
 8000dea:	1c7b      	adds	r3, r7, #1
 8000dec:	1c0a      	adds	r2, r1, #0
 8000dee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df0:	1c7b      	adds	r3, r7, #1
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df8:	1cbb      	adds	r3, r7, #2
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e00:	e003      	b.n	8000e0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e02:	1cbb      	adds	r3, r7, #2
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	0019      	movs	r1, r3
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d11f      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	189b      	adds	r3, r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4912      	ldr	r1, [pc, #72]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff f95a 	bl	8000100 <__udivsi3>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e52:	e008      	b.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e001      	b.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e009      	b.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d0ed      	beq.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40007000 	.word	0x40007000
 8000e88:	fffff9ff 	.word	0xfffff9ff
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	000f4240 	.word	0x000f4240

08000e94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	23e0      	movs	r3, #224	; 0xe0
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	4013      	ands	r3, r2
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e2f3      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d100      	bne.n	8000eca <HAL_RCC_OscConfig+0x1e>
 8000ec8:	e07c      	b.n	8000fc4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eca:	4bc3      	ldr	r3, [pc, #780]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2238      	movs	r2, #56	; 0x38
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed4:	4bc0      	ldr	r3, [pc, #768]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4013      	ands	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	2b10      	cmp	r3, #16
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_OscConfig+0x3e>
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d002      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d10b      	bne.n	8000f08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef0:	4bb9      	ldr	r3, [pc, #740]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	029b      	lsls	r3, r3, #10
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d062      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x116>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d15e      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e2ce      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	025b      	lsls	r3, r3, #9
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d107      	bne.n	8000f24 <HAL_RCC_OscConfig+0x78>
 8000f14:	4bb0      	ldr	r3, [pc, #704]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4baf      	ldr	r3, [pc, #700]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e020      	b.n	8000f66 <HAL_RCC_OscConfig+0xba>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	23a0      	movs	r3, #160	; 0xa0
 8000f2a:	02db      	lsls	r3, r3, #11
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d10e      	bne.n	8000f4e <HAL_RCC_OscConfig+0xa2>
 8000f30:	4ba9      	ldr	r3, [pc, #676]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4ba8      	ldr	r3, [pc, #672]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	02c9      	lsls	r1, r1, #11
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4ba6      	ldr	r3, [pc, #664]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4ba5      	ldr	r3, [pc, #660]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	0249      	lsls	r1, r1, #9
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e00b      	b.n	8000f66 <HAL_RCC_OscConfig+0xba>
 8000f4e:	4ba2      	ldr	r3, [pc, #648]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4ba1      	ldr	r3, [pc, #644]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f54:	49a1      	ldr	r1, [pc, #644]	; (80011dc <HAL_RCC_OscConfig+0x330>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4b9f      	ldr	r3, [pc, #636]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b9e      	ldr	r3, [pc, #632]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f60:	499f      	ldr	r1, [pc, #636]	; (80011e0 <HAL_RCC_OscConfig+0x334>)
 8000f62:	400a      	ands	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d014      	beq.n	8000f98 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fd11 	bl	8000994 <HAL_GetTick>
 8000f72:	0003      	movs	r3, r0
 8000f74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fd0c 	bl	8000994 <HAL_GetTick>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e28d      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8a:	4b93      	ldr	r3, [pc, #588]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	029b      	lsls	r3, r3, #10
 8000f92:	4013      	ands	r3, r2
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0xcc>
 8000f96:	e015      	b.n	8000fc4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f98:	f7ff fcfc 	bl	8000994 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fcf7 	bl	8000994 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	; 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e278      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fb4:	4b88      	ldr	r3, [pc, #544]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0xf6>
 8000fc0:	e000      	b.n	8000fc4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d100      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x124>
 8000fce:	e099      	b.n	8001104 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd0:	4b81      	ldr	r3, [pc, #516]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2238      	movs	r2, #56	; 0x38
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fda:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b10      	cmp	r3, #16
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x144>
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d002      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d135      	bne.n	8001062 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff6:	4b78      	ldr	r3, [pc, #480]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4013      	ands	r3, r2
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x162>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e24b      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a74      	ldr	r2, [pc, #464]	; (80011e4 <HAL_RCC_OscConfig+0x338>)
 8001014:	4013      	ands	r3, r2
 8001016:	0019      	movs	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	021a      	lsls	r2, r3, #8
 800101e:	4b6e      	ldr	r3, [pc, #440]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001020:	430a      	orrs	r2, r1
 8001022:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d112      	bne.n	8001050 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800102a:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6e      	ldr	r2, [pc, #440]	; (80011e8 <HAL_RCC_OscConfig+0x33c>)
 8001030:	4013      	ands	r3, r2
 8001032:	0019      	movs	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	4b67      	ldr	r3, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800103e:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	0adb      	lsrs	r3, r3, #11
 8001044:	2207      	movs	r2, #7
 8001046:	4013      	ands	r3, r2
 8001048:	4a68      	ldr	r2, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x340>)
 800104a:	40da      	lsrs	r2, r3
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <HAL_RCC_OscConfig+0x344>)
 800104e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x348>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff fc41 	bl	80008dc <HAL_InitTick>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d051      	beq.n	8001102 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e221      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d030      	beq.n	80010cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <HAL_RCC_OscConfig+0x33c>)
 8001070:	4013      	ands	r3, r2
 8001072:	0019      	movs	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	4b57      	ldr	r3, [pc, #348]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	0049      	lsls	r1, r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fc82 	bl	8000994 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fc7d 	bl	8000994 <HAL_GetTick>
 800109a:	0002      	movs	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e1fe      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4013      	ands	r3, r2
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a4a      	ldr	r2, [pc, #296]	; (80011e4 <HAL_RCC_OscConfig+0x338>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	021a      	lsls	r2, r3, #8
 80010c4:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	e01b      	b.n	8001104 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010cc:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	4949      	ldr	r1, [pc, #292]	; (80011f8 <HAL_RCC_OscConfig+0x34c>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc5c 	bl	8000994 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e2:	f7ff fc57 	bl	8000994 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1d8      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	d1f0      	bne.n	80010e2 <HAL_RCC_OscConfig+0x236>
 8001100:	e000      	b.n	8001104 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001102:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2208      	movs	r2, #8
 800110a:	4013      	ands	r3, r2
 800110c:	d047      	beq.n	800119e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2238      	movs	r2, #56	; 0x38
 8001114:	4013      	ands	r3, r2
 8001116:	2b18      	cmp	r3, #24
 8001118:	d10a      	bne.n	8001130 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d03c      	beq.n	800119e <HAL_RCC_OscConfig+0x2f2>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d138      	bne.n	800119e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e1ba      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d019      	beq.n	800116c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800113a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800113e:	2101      	movs	r1, #1
 8001140:	430a      	orrs	r2, r1
 8001142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001144:	f7ff fc26 	bl	8000994 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fc21 	bl	8000994 <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e1a2      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	2202      	movs	r2, #2
 8001166:	4013      	ands	r3, r2
 8001168:	d0f1      	beq.n	800114e <HAL_RCC_OscConfig+0x2a2>
 800116a:	e018      	b.n	800119e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 800116e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001172:	2101      	movs	r1, #1
 8001174:	438a      	bics	r2, r1
 8001176:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fc0c 	bl	8000994 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001182:	f7ff fc07 	bl	8000994 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e188      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	2202      	movs	r2, #2
 800119a:	4013      	ands	r3, r2
 800119c:	d1f1      	bne.n	8001182 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2204      	movs	r2, #4
 80011a4:	4013      	ands	r3, r2
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x2fe>
 80011a8:	e0c6      	b.n	8001338 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	231f      	movs	r3, #31
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2238      	movs	r2, #56	; 0x38
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b20      	cmp	r3, #32
 80011bc:	d11e      	bne.n	80011fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	2202      	movs	r2, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x31e>
 80011c8:	e0b6      	b.n	8001338 <HAL_RCC_OscConfig+0x48c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d000      	beq.n	80011d4 <HAL_RCC_OscConfig+0x328>
 80011d2:	e0b1      	b.n	8001338 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e166      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
 80011d8:	40021000 	.word	0x40021000
 80011dc:	fffeffff 	.word	0xfffeffff
 80011e0:	fffbffff 	.word	0xfffbffff
 80011e4:	ffff80ff 	.word	0xffff80ff
 80011e8:	ffffc7ff 	.word	0xffffc7ff
 80011ec:	00f42400 	.word	0x00f42400
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004
 80011f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011fc:	4bac      	ldr	r3, [pc, #688]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80011fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	4013      	ands	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x360>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x362>
 800120c:	2300      	movs	r3, #0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d011      	beq.n	8001236 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4ba7      	ldr	r3, [pc, #668]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001216:	4ba6      	ldr	r3, [pc, #664]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0549      	lsls	r1, r1, #21
 800121c:	430a      	orrs	r2, r1
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001220:	4ba3      	ldr	r3, [pc, #652]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	055b      	lsls	r3, r3, #21
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800122e:	231f      	movs	r3, #31
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001236:	4b9f      	ldr	r3, [pc, #636]	; (80014b4 <HAL_RCC_OscConfig+0x608>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4013      	ands	r3, r2
 8001240:	d11a      	bne.n	8001278 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001242:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <HAL_RCC_OscConfig+0x608>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b9b      	ldr	r3, [pc, #620]	; (80014b4 <HAL_RCC_OscConfig+0x608>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0049      	lsls	r1, r1, #1
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001250:	f7ff fba0 	bl	8000994 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125a:	f7ff fb9b 	bl	8000994 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e11c      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800126c:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x608>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x3e2>
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001284:	4b8a      	ldr	r3, [pc, #552]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	65da      	str	r2, [r3, #92]	; 0x5c
 800128c:	e01c      	b.n	80012c8 <HAL_RCC_OscConfig+0x41c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x404>
 8001296:	4b86      	ldr	r3, [pc, #536]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800129a:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800129c:	2104      	movs	r1, #4
 800129e:	430a      	orrs	r2, r1
 80012a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80012a2:	4b83      	ldr	r3, [pc, #524]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012a6:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x41c>
 80012b0:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	438a      	bics	r2, r1
 80012ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80012bc:	4b7c      	ldr	r3, [pc, #496]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012c0:	4b7b      	ldr	r3, [pc, #492]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012c2:	2104      	movs	r1, #4
 80012c4:	438a      	bics	r2, r1
 80012c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d014      	beq.n	80012fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb60 	bl	8000994 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d8:	e009      	b.n	80012ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb5b 	bl	8000994 <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	4a74      	ldr	r2, [pc, #464]	; (80014b8 <HAL_RCC_OscConfig+0x60c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e0db      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80012f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f2:	2202      	movs	r2, #2
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x42e>
 80012f8:	e013      	b.n	8001322 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb4b 	bl	8000994 <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001302:	e009      	b.n	8001318 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fb46 	bl	8000994 <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	4a6a      	ldr	r2, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x60c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0c6      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001318:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001322:	231f      	movs	r3, #31
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4b60      	ldr	r3, [pc, #384]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800132e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001330:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001332:	4962      	ldr	r1, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x610>)
 8001334:	400a      	ands	r2, r1
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x496>
 8001340:	e0b0      	b.n	80014a4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2238      	movs	r2, #56	; 0x38
 8001348:	4013      	ands	r3, r2
 800134a:	2b10      	cmp	r3, #16
 800134c:	d100      	bne.n	8001350 <HAL_RCC_OscConfig+0x4a4>
 800134e:	e078      	b.n	8001442 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d153      	bne.n	8001400 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001358:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800135e:	4958      	ldr	r1, [pc, #352]	; (80014c0 <HAL_RCC_OscConfig+0x614>)
 8001360:	400a      	ands	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fb16 	bl	8000994 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb11 	bl	8000994 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e092      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	049b      	lsls	r3, r3, #18
 8001388:	4013      	ands	r3, r2
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <HAL_RCC_OscConfig+0x618>)
 8001392:	4013      	ands	r3, r2
 8001394:	0019      	movs	r1, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	431a      	orrs	r2, r3
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0449      	lsls	r1, r1, #17
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	0549      	lsls	r1, r1, #21
 80013d2:	430a      	orrs	r2, r1
 80013d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fadd 	bl	8000994 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fad8 	bl	8000994 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e059      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	049b      	lsls	r3, r3, #18
 80013fa:	4013      	ands	r3, r2
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x534>
 80013fe:	e051      	b.n	80014a4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001406:	492e      	ldr	r1, [pc, #184]	; (80014c0 <HAL_RCC_OscConfig+0x614>)
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fac2 	bl	8000994 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fabd 	bl	8000994 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e03e      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	049b      	lsls	r3, r3, #18
 8001430:	4013      	ands	r3, r2
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 800143a:	4923      	ldr	r1, [pc, #140]	; (80014c8 <HAL_RCC_OscConfig+0x61c>)
 800143c:	400a      	ands	r2, r1
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	e030      	b.n	80014a4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e02b      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_RCC_OscConfig+0x604>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2203      	movs	r2, #3
 8001458:	401a      	ands	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	429a      	cmp	r2, r3
 8001460:	d11e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2270      	movs	r2, #112	; 0x70
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d117      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	23fe      	movs	r3, #254	; 0xfe
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	23f8      	movs	r3, #248	; 0xf8
 8001486:	039b      	lsls	r3, r3, #14
 8001488:	401a      	ands	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	0f5b      	lsrs	r3, r3, #29
 8001496:	075a      	lsls	r2, r3, #29
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b008      	add	sp, #32
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40007000 	.word	0x40007000
 80014b8:	00001388 	.word	0x00001388
 80014bc:	efffffff 	.word	0xefffffff
 80014c0:	feffffff 	.word	0xfeffffff
 80014c4:	1fc1808c 	.word	0x1fc1808c
 80014c8:	effefffc 	.word	0xeffefffc

080014cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0e9      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2207      	movs	r2, #7
 80014e6:	4013      	ands	r3, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d91e      	bls.n	800152c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b73      	ldr	r3, [pc, #460]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2207      	movs	r2, #7
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	4b70      	ldr	r3, [pc, #448]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001500:	f7ff fa48 	bl	8000994 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001508:	e009      	b.n	800151e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7ff fa43 	bl	8000994 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0ca      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d015      	beq.n	8001562 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d006      	beq.n	800154e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001540:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001546:	21e0      	movs	r1, #224	; 0xe0
 8001548:	01c9      	lsls	r1, r1, #7
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154e:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4a5d      	ldr	r2, [pc, #372]	; (80016c8 <HAL_RCC_ClockConfig+0x1fc>)
 8001554:	4013      	ands	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	4013      	ands	r3, r2
 800156a:	d057      	beq.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d107      	bne.n	8001584 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	029b      	lsls	r3, r3, #10
 800157c:	4013      	ands	r3, r2
 800157e:	d12b      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e097      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d107      	bne.n	800159c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158c:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	049b      	lsls	r3, r3, #18
 8001594:	4013      	ands	r3, r2
 8001596:	d11f      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e08b      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a4:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4013      	ands	r3, r2
 80015ae:	d113      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e07f      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015bc:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d108      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e074      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e06d      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2207      	movs	r2, #7
 80015de:	4393      	bics	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015ec:	f7ff f9d2 	bl	8000994 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f4:	e009      	b.n	800160a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f6:	f7ff f9cd 	bl	8000994 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e054      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2238      	movs	r2, #56	; 0x38
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	429a      	cmp	r2, r3
 800161a:	d1ec      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2207      	movs	r2, #7
 8001622:	4013      	ands	r3, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d21e      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2207      	movs	r2, #7
 8001630:	4393      	bics	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800163c:	f7ff f9aa 	bl	8000994 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001644:	e009      	b.n	800165a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff f9a5 	bl	8000994 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e02c      	b.n	80016b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2207      	movs	r2, #7
 8001660:	4013      	ands	r3, r2
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2204      	movs	r2, #4
 800166e:	4013      	ands	r3, r2
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <HAL_RCC_ClockConfig+0x200>)
 8001678:	4013      	ands	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001686:	f000 f829 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800168a:	0001      	movs	r1, r0
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_RCC_ClockConfig+0x1f8>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	220f      	movs	r2, #15
 8001694:	401a      	ands	r2, r3
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x204>)
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	58d3      	ldr	r3, [r2, r3]
 800169c:	221f      	movs	r2, #31
 800169e:	4013      	ands	r3, r2
 80016a0:	000a      	movs	r2, r1
 80016a2:	40da      	lsrs	r2, r3
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_ClockConfig+0x208>)
 80016a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x20c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff f915 	bl	80008dc <HAL_InitTick>
 80016b2:	0003      	movs	r3, r0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000
 80016c0:	00001388 	.word	0x00001388
 80016c4:	40021000 	.word	0x40021000
 80016c8:	fffff0ff 	.word	0xfffff0ff
 80016cc:	ffff8fff 	.word	0xffff8fff
 80016d0:	08002bc0 	.word	0x08002bc0
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2238      	movs	r2, #56	; 0x38
 80016e8:	4013      	ands	r3, r2
 80016ea:	d10f      	bne.n	800170c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0adb      	lsrs	r3, r3, #11
 80016f2:	2207      	movs	r2, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	409a      	lsls	r2, r3
 80016fa:	0013      	movs	r3, r2
 80016fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	4835      	ldr	r0, [pc, #212]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001702:	f7fe fcfd 	bl	8000100 <__udivsi3>
 8001706:	0003      	movs	r3, r0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	e05d      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2238      	movs	r2, #56	; 0x38
 8001712:	4013      	ands	r3, r2
 8001714:	2b08      	cmp	r3, #8
 8001716:	d102      	bne.n	800171e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_RCC_GetSysClockFreq+0x100>)
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	e054      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2238      	movs	r2, #56	; 0x38
 8001724:	4013      	ands	r3, r2
 8001726:	2b10      	cmp	r3, #16
 8001728:	d138      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2203      	movs	r2, #3
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	2207      	movs	r2, #7
 800173c:	4013      	ands	r3, r2
 800173e:	3301      	adds	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	4824      	ldr	r0, [pc, #144]	; (80017dc <HAL_RCC_GetSysClockFreq+0x100>)
 800174c:	f7fe fcd8 	bl	8000100 <__udivsi3>
 8001750:	0003      	movs	r3, r0
 8001752:	0019      	movs	r1, r3
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	227f      	movs	r2, #127	; 0x7f
 800175c:	4013      	ands	r3, r2
 800175e:	434b      	muls	r3, r1
 8001760:	617b      	str	r3, [r7, #20]
        break;
 8001762:	e00d      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001768:	f7fe fcca 	bl	8000100 <__udivsi3>
 800176c:	0003      	movs	r3, r0
 800176e:	0019      	movs	r1, r3
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	227f      	movs	r2, #127	; 0x7f
 8001778:	4013      	ands	r3, r2
 800177a:	434b      	muls	r3, r1
 800177c:	617b      	str	r3, [r7, #20]
        break;
 800177e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0f5b      	lsrs	r3, r3, #29
 8001786:	2207      	movs	r2, #7
 8001788:	4013      	ands	r3, r2
 800178a:	3301      	adds	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	6978      	ldr	r0, [r7, #20]
 8001792:	f7fe fcb5 	bl	8000100 <__udivsi3>
 8001796:	0003      	movs	r3, r0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	e015      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2238      	movs	r2, #56	; 0x38
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d103      	bne.n	80017b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2238      	movs	r2, #56	; 0x38
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b18      	cmp	r3, #24
 80017ba:	d103      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017bc:	23fa      	movs	r3, #250	; 0xfa
 80017be:	01db      	lsls	r3, r3, #7
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e001      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017c8:	693b      	ldr	r3, [r7, #16]
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b006      	add	sp, #24
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	20000000 	.word	0x20000000

080017f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80017f8:	f7ff fff2 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 80017fc:	0004      	movs	r4, r0
 80017fe:	f7ff fb49 	bl	8000e94 <LL_RCC_GetAPB1Prescaler>
 8001802:	0003      	movs	r3, r0
 8001804:	0b1a      	lsrs	r2, r3, #12
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	58d3      	ldr	r3, [r2, r3]
 800180c:	221f      	movs	r2, #31
 800180e:	4013      	ands	r3, r2
 8001810:	40dc      	lsrs	r4, r3
 8001812:	0023      	movs	r3, r4
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bdb0      	pop	{r4, r5, r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	08002c00 	.word	0x08002c00

08001820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001828:	2313      	movs	r3, #19
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001830:	2312      	movs	r3, #18
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d100      	bne.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001844:	e0a3      	b.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2011      	movs	r0, #17
 8001848:	183b      	adds	r3, r7, r0
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	055b      	lsls	r3, r3, #21
 8001856:	4013      	ands	r3, r2
 8001858:	d110      	bne.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800185c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800185e:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0549      	lsls	r1, r1, #21
 8001864:	430a      	orrs	r2, r1
 8001866:	63da      	str	r2, [r3, #60]	; 0x3c
 8001868:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800186a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	055b      	lsls	r3, r3, #21
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	183b      	adds	r3, r7, r0
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800187c:	4b7b      	ldr	r3, [pc, #492]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b7a      	ldr	r3, [pc, #488]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	0049      	lsls	r1, r1, #1
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800188a:	f7ff f883 	bl	8000994 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001892:	e00b      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7ff f87e 	bl	8000994 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d904      	bls.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80018a2:	2313      	movs	r3, #19
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2203      	movs	r2, #3
 80018a8:	701a      	strb	r2, [r3, #0]
        break;
 80018aa:	e005      	b.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018ac:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0ed      	beq.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80018b8:	2313      	movs	r3, #19
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d154      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d019      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d014      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018de:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018e8:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0249      	lsls	r1, r1, #9
 80018f2:	430a      	orrs	r2, r1
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018f6:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018fc:	495d      	ldr	r1, [pc, #372]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80018fe:	400a      	ands	r2, r1
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2201      	movs	r2, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d016      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f840 	bl	8000994 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001918:	e00c      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff f83b 	bl	8000994 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a54      	ldr	r2, [pc, #336]	; (8001a78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d904      	bls.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800192a:	2313      	movs	r3, #19
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2203      	movs	r2, #3
 8001930:	701a      	strb	r2, [r3, #0]
            break;
 8001932:	e004      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d0ed      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800193e:	2313      	movs	r3, #19
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001958:	430a      	orrs	r2, r1
 800195a:	65da      	str	r2, [r3, #92]	; 0x5c
 800195c:	e00c      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800195e:	2312      	movs	r3, #18
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	2213      	movs	r2, #19
 8001964:	18ba      	adds	r2, r7, r2
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e005      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800196c:	2312      	movs	r3, #18
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2213      	movs	r2, #19
 8001972:	18ba      	adds	r2, r7, r2
 8001974:	7812      	ldrb	r2, [r2, #0]
 8001976:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001978:	2311      	movs	r3, #17
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001988:	493c      	ldr	r1, [pc, #240]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800198a:	400a      	ands	r2, r1
 800198c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2201      	movs	r2, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	2203      	movs	r2, #3
 800199e:	4393      	bics	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	220c      	movs	r2, #12
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2220      	movs	r2, #32
 80019d0:	4013      	ands	r3, r2
 80019d2:	d009      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	4013      	ands	r3, r2
 80019f2:	d015      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	0899      	lsrs	r1, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	05db      	lsls	r3, r3, #23
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d106      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0249      	lsls	r1, r1, #9
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d016      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	01db      	lsls	r3, r3, #7
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	0249      	lsls	r1, r1, #9
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001a5a:	2312      	movs	r3, #18
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b006      	add	sp, #24
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	fffffcff 	.word	0xfffffcff
 8001a74:	fffeffff 	.word	0xfffeffff
 8001a78:	00001388 	.word	0x00001388
 8001a7c:	efffffff 	.word	0xefffffff
 8001a80:	ffffcfff 	.word	0xffffcfff
 8001a84:	ffff3fff 	.word	0xffff3fff

08001a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0a8      	b.n	8001bec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2382      	movs	r3, #130	; 0x82
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d009      	beq.n	8001ac2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
 8001ab4:	e005      	b.n	8001ac2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	225d      	movs	r2, #93	; 0x5d
 8001acc:	5c9b      	ldrb	r3, [r3, r2]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	225c      	movs	r2, #92	; 0x5c
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7fe fdec 	bl	80006bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	225d      	movs	r2, #93	; 0x5d
 8001ae8:	2102      	movs	r1, #2
 8001aea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	438a      	bics	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	23e0      	movs	r3, #224	; 0xe0
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d902      	bls.n	8001b0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e002      	b.n	8001b14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	015b      	lsls	r3, r3, #5
 8001b12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	23f0      	movs	r3, #240	; 0xf0
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d008      	beq.n	8001b32 <HAL_SPI_Init+0xaa>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	23e0      	movs	r3, #224	; 0xe0
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d002      	beq.n	8001b32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	2382      	movs	r3, #130	; 0x82
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	2384      	movs	r3, #132	; 0x84
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	400b      	ands	r3, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	400b      	ands	r3, r1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2101      	movs	r1, #1
 8001b58:	400b      	ands	r3, r1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6999      	ldr	r1, [r3, #24]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	400b      	ands	r3, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2138      	movs	r1, #56	; 0x38
 8001b6e:	400b      	ands	r3, r1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	400b      	ands	r3, r1
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	2204      	movs	r2, #4
 8001b98:	401a      	ands	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	2108      	movs	r1, #8
 8001baa:	400b      	ands	r3, r1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68d9      	ldr	r1, [r3, #12]
 8001bb2:	23f0      	movs	r3, #240	; 0xf0
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	0011      	movs	r1, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	015b      	lsls	r3, r3, #5
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <HAL_SPI_Init+0x16c>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	225d      	movs	r2, #93	; 0x5d
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	fffff7ff 	.word	0xfffff7ff

08001bf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	1dbb      	adds	r3, r7, #6
 8001c06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c08:	231f      	movs	r3, #31
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	225c      	movs	r2, #92	; 0x5c
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_Transmit+0x26>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e140      	b.n	8001ea0 <HAL_SPI_Transmit+0x2a8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	225c      	movs	r2, #92	; 0x5c
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c26:	f7fe feb5 	bl	8000994 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001c2e:	2316      	movs	r3, #22
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1dba      	adds	r2, r7, #6
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	225d      	movs	r2, #93	; 0x5d
 8001c3c:	5c9b      	ldrb	r3, [r3, r2]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d004      	beq.n	8001c4e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001c44:	231f      	movs	r3, #31
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	2202      	movs	r2, #2
 8001c4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c4c:	e11d      	b.n	8001e8a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_SPI_Transmit+0x64>
 8001c54:	1dbb      	adds	r3, r7, #6
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c64:	e111      	b.n	8001e8a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	225d      	movs	r2, #93	; 0x5d
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1dba      	adds	r2, r7, #6
 8001c7e:	8812      	ldrh	r2, [r2, #0]
 8001c80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1dba      	adds	r2, r7, #6
 8001c86:	8812      	ldrh	r2, [r2, #0]
 8001c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2244      	movs	r2, #68	; 0x44
 8001c94:	2100      	movs	r1, #0
 8001c96:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2246      	movs	r2, #70	; 0x46
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d110      	bne.n	8001cda <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	01c9      	lsls	r1, r1, #7
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d007      	beq.n	8001cf8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	23e0      	movs	r3, #224	; 0xe0
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d94e      	bls.n	8001da2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <HAL_SPI_Transmit+0x11e>
 8001d0c:	2316      	movs	r3, #22
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d13f      	bne.n	8001d96 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	1c9a      	adds	r2, r3, #2
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d3a:	e02c      	b.n	8001d96 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d112      	bne.n	8001d70 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	881a      	ldrh	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	1c9a      	adds	r2, r3, #2
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d6e:	e012      	b.n	8001d96 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d70:	f7fe fe10 	bl	8000994 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d802      	bhi.n	8001d86 <HAL_SPI_Transmit+0x18e>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_SPI_Transmit+0x194>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001d8c:	231f      	movs	r3, #31
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2203      	movs	r2, #3
 8001d92:	701a      	strb	r2, [r3, #0]
          goto error;
 8001d94:	e079      	b.n	8001e8a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1cd      	bne.n	8001d3c <HAL_SPI_Transmit+0x144>
 8001da0:	e04f      	b.n	8001e42 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_SPI_Transmit+0x1bc>
 8001daa:	2316      	movs	r3, #22
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d141      	bne.n	8001e38 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001dda:	e02d      	b.n	8001e38 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d113      	bne.n	8001e12 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	330c      	adds	r3, #12
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e10:	e012      	b.n	8001e38 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e12:	f7fe fdbf 	bl	8000994 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d802      	bhi.n	8001e28 <HAL_SPI_Transmit+0x230>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_SPI_Transmit+0x236>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d104      	bne.n	8001e38 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001e2e:	231f      	movs	r3, #31
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	2203      	movs	r2, #3
 8001e34:	701a      	strb	r2, [r3, #0]
          goto error;
 8001e36:	e028      	b.n	8001e8a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1cc      	bne.n	8001ddc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 f95d 	bl	8002108 <SPI_EndRxTxTransaction>
 8001e4e:	1e03      	subs	r3, r0, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001e7e:	231f      	movs	r3, #31
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	e000      	b.n	8001e8a <HAL_SPI_Transmit+0x292>
  }

error:
 8001e88:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	225d      	movs	r2, #93	; 0x5d
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	225c      	movs	r2, #92	; 0x5c
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b008      	add	sp, #32
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001eb8:	f7fe fd6c 	bl	8000994 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	18d3      	adds	r3, r2, r3
 8001ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ec8:	f7fe fd64 	bl	8000994 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	0d1b      	lsrs	r3, r3, #20
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	4353      	muls	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ede:	e058      	b.n	8001f92 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	d055      	beq.n	8001f92 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ee6:	f7fe fd55 	bl	8000994 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d902      	bls.n	8001efc <SPI_WaitFlagStateUntilTimeout+0x54>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d142      	bne.n	8001f82 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	21e0      	movs	r1, #224	; 0xe0
 8001f08:	438a      	bics	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2382      	movs	r3, #130	; 0x82
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d113      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d005      	beq.n	8001f30 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	438a      	bics	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	019b      	lsls	r3, r3, #6
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d110      	bne.n	8001f6e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	491a      	ldr	r1, [pc, #104]	; (8001fc0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0189      	lsls	r1, r1, #6
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	225d      	movs	r2, #93	; 0x5d
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	225c      	movs	r2, #92	; 0x5c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e017      	b.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	425a      	negs	r2, r3
 8001fa2:	4153      	adcs	r3, r2
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d197      	bne.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	ffffdfff 	.word	0xffffdfff

08001fc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001fda:	f7fe fcdb 	bl	8000994 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001fea:	f7fe fcd3 	bl	8000994 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	0013      	movs	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	189b      	adds	r3, r3, r2
 8002004:	00da      	lsls	r2, r3, #3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	0d1b      	lsrs	r3, r3, #20
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	4353      	muls	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002010:	e068      	b.n	80020e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	429a      	cmp	r2, r3
 800201a:	d10a      	bne.n	8002032 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	2117      	movs	r1, #23
 800202a:	187b      	adds	r3, r7, r1
 800202c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800202e:	187b      	adds	r3, r7, r1
 8002030:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	d055      	beq.n	80020e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002038:	f7fe fcac 	bl	8000994 <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	429a      	cmp	r2, r3
 8002046:	d902      	bls.n	800204e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d142      	bne.n	80020d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	21e0      	movs	r1, #224	; 0xe0
 800205a:	438a      	bics	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	2382      	movs	r3, #130	; 0x82
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	429a      	cmp	r2, r3
 8002068:	d113      	bne.n	8002092 <SPI_WaitFifoStateUntilTimeout+0xce>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	429a      	cmp	r2, r3
 8002074:	d005      	beq.n	8002082 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	429a      	cmp	r2, r3
 8002080:	d107      	bne.n	8002092 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	438a      	bics	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	019b      	lsls	r3, r3, #6
 800209a:	429a      	cmp	r2, r3
 800209c:	d110      	bne.n	80020c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	0189      	lsls	r1, r1, #6
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	225d      	movs	r2, #93	; 0x5d
 80020c4:	2101      	movs	r1, #1
 80020c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	225c      	movs	r2, #92	; 0x5c
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e010      	b.n	80020f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d18e      	bne.n	8002012 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b00a      	add	sp, #40	; 0x28
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	20000000 	.word	0x20000000
 8002104:	ffffdfff 	.word	0xffffdfff

08002108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	0159      	lsls	r1, r3, #5
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	0013      	movs	r3, r2
 8002122:	2200      	movs	r2, #0
 8002124:	f7ff ff4e 	bl	8001fc4 <SPI_WaitFifoStateUntilTimeout>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d007      	beq.n	800213c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	2220      	movs	r2, #32
 8002132:	431a      	orrs	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e027      	b.n	800218c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	0013      	movs	r3, r2
 8002146:	2200      	movs	r2, #0
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	f7ff fead 	bl	8001ea8 <SPI_WaitFlagStateUntilTimeout>
 800214e:	1e03      	subs	r3, r0, #0
 8002150:	d007      	beq.n	8002162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	2220      	movs	r2, #32
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e014      	b.n	800218c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	23c0      	movs	r3, #192	; 0xc0
 8002166:	00d9      	lsls	r1, r3, #3
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	0013      	movs	r3, r2
 8002170:	2200      	movs	r2, #0
 8002172:	f7ff ff27 	bl	8001fc4 <SPI_WaitFifoStateUntilTimeout>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d007      	beq.n	800218a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	2220      	movs	r2, #32
 8002180:	431a      	orrs	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e000      	b.n	800218c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e046      	b.n	8002234 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2288      	movs	r2, #136	; 0x88
 80021aa:	589b      	ldr	r3, [r3, r2]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2284      	movs	r2, #132	; 0x84
 80021b4:	2100      	movs	r1, #0
 80021b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7fe fac8 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2288      	movs	r2, #136	; 0x88
 80021c4:	2124      	movs	r1, #36	; 0x24
 80021c6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	438a      	bics	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 f830 	bl	8002240 <UART_SetConfig>
 80021e0:	0003      	movs	r3, r0
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e024      	b.n	8002234 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f9c7 	bl	8002588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	490d      	ldr	r1, [pc, #52]	; (800223c <HAL_UART_Init+0xa8>)
 8002206:	400a      	ands	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	212a      	movs	r1, #42	; 0x2a
 8002216:	438a      	bics	r2, r1
 8002218:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fa5f 	bl	80026f0 <UART_CheckIdleState>
 8002232:	0003      	movs	r3, r0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}
 800223c:	ffffb7ff 	.word	0xffffb7ff

08002240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002248:	231a      	movs	r3, #26
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4313      	orrs	r3, r2
 8002266:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4abc      	ldr	r2, [pc, #752]	; (8002560 <UART_SetConfig+0x320>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4ab7      	ldr	r2, [pc, #732]	; (8002564 <UART_SetConfig+0x324>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4aae      	ldr	r2, [pc, #696]	; (8002568 <UART_SetConfig+0x328>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	220f      	movs	r2, #15
 80022c4:	4393      	bics	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4aa4      	ldr	r2, [pc, #656]	; (800256c <UART_SetConfig+0x32c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d127      	bne.n	800232e <UART_SetConfig+0xee>
 80022de:	4ba4      	ldr	r3, [pc, #656]	; (8002570 <UART_SetConfig+0x330>)
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	2203      	movs	r2, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d017      	beq.n	800231a <UART_SetConfig+0xda>
 80022ea:	d81b      	bhi.n	8002324 <UART_SetConfig+0xe4>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d00a      	beq.n	8002306 <UART_SetConfig+0xc6>
 80022f0:	d818      	bhi.n	8002324 <UART_SetConfig+0xe4>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <UART_SetConfig+0xbc>
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d00a      	beq.n	8002310 <UART_SetConfig+0xd0>
 80022fa:	e013      	b.n	8002324 <UART_SetConfig+0xe4>
 80022fc:	231b      	movs	r3, #27
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e058      	b.n	80023b8 <UART_SetConfig+0x178>
 8002306:	231b      	movs	r3, #27
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e053      	b.n	80023b8 <UART_SetConfig+0x178>
 8002310:	231b      	movs	r3, #27
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2204      	movs	r2, #4
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e04e      	b.n	80023b8 <UART_SetConfig+0x178>
 800231a:	231b      	movs	r3, #27
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2208      	movs	r2, #8
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e049      	b.n	80023b8 <UART_SetConfig+0x178>
 8002324:	231b      	movs	r3, #27
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2210      	movs	r2, #16
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e044      	b.n	80023b8 <UART_SetConfig+0x178>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a90      	ldr	r2, [pc, #576]	; (8002574 <UART_SetConfig+0x334>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d127      	bne.n	8002388 <UART_SetConfig+0x148>
 8002338:	4b8d      	ldr	r3, [pc, #564]	; (8002570 <UART_SetConfig+0x330>)
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	220c      	movs	r2, #12
 800233e:	4013      	ands	r3, r2
 8002340:	2b0c      	cmp	r3, #12
 8002342:	d017      	beq.n	8002374 <UART_SetConfig+0x134>
 8002344:	d81b      	bhi.n	800237e <UART_SetConfig+0x13e>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d00a      	beq.n	8002360 <UART_SetConfig+0x120>
 800234a:	d818      	bhi.n	800237e <UART_SetConfig+0x13e>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <UART_SetConfig+0x116>
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00a      	beq.n	800236a <UART_SetConfig+0x12a>
 8002354:	e013      	b.n	800237e <UART_SetConfig+0x13e>
 8002356:	231b      	movs	r3, #27
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e02b      	b.n	80023b8 <UART_SetConfig+0x178>
 8002360:	231b      	movs	r3, #27
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e026      	b.n	80023b8 <UART_SetConfig+0x178>
 800236a:	231b      	movs	r3, #27
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2204      	movs	r2, #4
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e021      	b.n	80023b8 <UART_SetConfig+0x178>
 8002374:	231b      	movs	r3, #27
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2208      	movs	r2, #8
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e01c      	b.n	80023b8 <UART_SetConfig+0x178>
 800237e:	231b      	movs	r3, #27
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2210      	movs	r2, #16
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e017      	b.n	80023b8 <UART_SetConfig+0x178>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7a      	ldr	r2, [pc, #488]	; (8002578 <UART_SetConfig+0x338>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d104      	bne.n	800239c <UART_SetConfig+0x15c>
 8002392:	231b      	movs	r3, #27
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e00d      	b.n	80023b8 <UART_SetConfig+0x178>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a76      	ldr	r2, [pc, #472]	; (800257c <UART_SetConfig+0x33c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d104      	bne.n	80023b0 <UART_SetConfig+0x170>
 80023a6:	231b      	movs	r3, #27
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e003      	b.n	80023b8 <UART_SetConfig+0x178>
 80023b0:	231b      	movs	r3, #27
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2210      	movs	r2, #16
 80023b6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d000      	beq.n	80023c6 <UART_SetConfig+0x186>
 80023c4:	e065      	b.n	8002492 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80023c6:	231b      	movs	r3, #27
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d015      	beq.n	80023fc <UART_SetConfig+0x1bc>
 80023d0:	dc18      	bgt.n	8002404 <UART_SetConfig+0x1c4>
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d00d      	beq.n	80023f2 <UART_SetConfig+0x1b2>
 80023d6:	dc15      	bgt.n	8002404 <UART_SetConfig+0x1c4>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <UART_SetConfig+0x1a2>
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d005      	beq.n	80023ec <UART_SetConfig+0x1ac>
 80023e0:	e010      	b.n	8002404 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023e2:	f7ff fa07 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 80023e6:	0003      	movs	r3, r0
 80023e8:	617b      	str	r3, [r7, #20]
        break;
 80023ea:	e012      	b.n	8002412 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023ec:	4b64      	ldr	r3, [pc, #400]	; (8002580 <UART_SetConfig+0x340>)
 80023ee:	617b      	str	r3, [r7, #20]
        break;
 80023f0:	e00f      	b.n	8002412 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023f2:	f7ff f973 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 80023f6:	0003      	movs	r3, r0
 80023f8:	617b      	str	r3, [r7, #20]
        break;
 80023fa:	e00a      	b.n	8002412 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	617b      	str	r3, [r7, #20]
        break;
 8002402:	e006      	b.n	8002412 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002408:	231a      	movs	r3, #26
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
        break;
 8002410:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d100      	bne.n	800241a <UART_SetConfig+0x1da>
 8002418:	e08d      	b.n	8002536 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <UART_SetConfig+0x344>)
 8002420:	0052      	lsls	r2, r2, #1
 8002422:	5ad3      	ldrh	r3, [r2, r3]
 8002424:	0019      	movs	r1, r3
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7fd fe6a 	bl	8000100 <__udivsi3>
 800242c:	0003      	movs	r3, r0
 800242e:	005a      	lsls	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	18d2      	adds	r2, r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7fd fe5e 	bl	8000100 <__udivsi3>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	d91c      	bls.n	8002488 <UART_SetConfig+0x248>
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	025b      	lsls	r3, r3, #9
 8002454:	429a      	cmp	r2, r3
 8002456:	d217      	bcs.n	8002488 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	b29a      	uxth	r2, r3
 800245c:	200e      	movs	r0, #14
 800245e:	183b      	adds	r3, r7, r0
 8002460:	210f      	movs	r1, #15
 8002462:	438a      	bics	r2, r1
 8002464:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	b29b      	uxth	r3, r3
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	b299      	uxth	r1, r3
 8002472:	183b      	adds	r3, r7, r0
 8002474:	183a      	adds	r2, r7, r0
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	183a      	adds	r2, r7, r0
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e056      	b.n	8002536 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002488:	231a      	movs	r3, #26
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e051      	b.n	8002536 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002492:	231b      	movs	r3, #27
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d015      	beq.n	80024c8 <UART_SetConfig+0x288>
 800249c:	dc18      	bgt.n	80024d0 <UART_SetConfig+0x290>
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d00d      	beq.n	80024be <UART_SetConfig+0x27e>
 80024a2:	dc15      	bgt.n	80024d0 <UART_SetConfig+0x290>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <UART_SetConfig+0x26e>
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d005      	beq.n	80024b8 <UART_SetConfig+0x278>
 80024ac:	e010      	b.n	80024d0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff f9a1 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 80024b2:	0003      	movs	r3, r0
 80024b4:	617b      	str	r3, [r7, #20]
        break;
 80024b6:	e012      	b.n	80024de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <UART_SetConfig+0x340>)
 80024ba:	617b      	str	r3, [r7, #20]
        break;
 80024bc:	e00f      	b.n	80024de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024be:	f7ff f90d 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	617b      	str	r3, [r7, #20]
        break;
 80024c6:	e00a      	b.n	80024de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	617b      	str	r3, [r7, #20]
        break;
 80024ce:	e006      	b.n	80024de <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80024d4:	231a      	movs	r3, #26
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
        break;
 80024dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d028      	beq.n	8002536 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <UART_SetConfig+0x344>)
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	5ad3      	ldrh	r3, [r2, r3]
 80024ee:	0019      	movs	r1, r3
 80024f0:	6978      	ldr	r0, [r7, #20]
 80024f2:	f7fd fe05 	bl	8000100 <__udivsi3>
 80024f6:	0003      	movs	r3, r0
 80024f8:	001a      	movs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	18d2      	adds	r2, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0019      	movs	r1, r3
 8002508:	0010      	movs	r0, r2
 800250a:	f7fd fdf9 	bl	8000100 <__udivsi3>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d90a      	bls.n	800252e <UART_SetConfig+0x2ee>
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	429a      	cmp	r2, r3
 8002520:	d205      	bcs.n	800252e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	e003      	b.n	8002536 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800252e:	231a      	movs	r3, #26
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	226a      	movs	r2, #106	; 0x6a
 800253a:	2101      	movs	r1, #1
 800253c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2268      	movs	r2, #104	; 0x68
 8002542:	2101      	movs	r1, #1
 8002544:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002552:	231a      	movs	r3, #26
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	781b      	ldrb	r3, [r3, #0]
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b008      	add	sp, #32
 800255e:	bd80      	pop	{r7, pc}
 8002560:	cfff69f3 	.word	0xcfff69f3
 8002564:	ffffcfff 	.word	0xffffcfff
 8002568:	11fff4ff 	.word	0x11fff4ff
 800256c:	40013800 	.word	0x40013800
 8002570:	40021000 	.word	0x40021000
 8002574:	40004400 	.word	0x40004400
 8002578:	40004800 	.word	0x40004800
 800257c:	40004c00 	.word	0x40004c00
 8002580:	00f42400 	.word	0x00f42400
 8002584:	08002c20 	.word	0x08002c20

08002588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	d00b      	beq.n	80025b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a4a      	ldr	r2, [pc, #296]	; (80026cc <UART_AdvFeatureConfig+0x144>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	d00b      	beq.n	80025d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a43      	ldr	r2, [pc, #268]	; (80026d0 <UART_AdvFeatureConfig+0x148>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	2204      	movs	r2, #4
 80025da:	4013      	ands	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <UART_AdvFeatureConfig+0x14c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	2208      	movs	r2, #8
 80025fc:	4013      	ands	r3, r2
 80025fe:	d00b      	beq.n	8002618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a34      	ldr	r2, [pc, #208]	; (80026d8 <UART_AdvFeatureConfig+0x150>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	2210      	movs	r2, #16
 800261e:	4013      	ands	r3, r2
 8002620:	d00b      	beq.n	800263a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <UART_AdvFeatureConfig+0x154>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	2220      	movs	r2, #32
 8002640:	4013      	ands	r3, r2
 8002642:	d00b      	beq.n	800265c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <UART_AdvFeatureConfig+0x158>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	4013      	ands	r3, r2
 8002664:	d01d      	beq.n	80026a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <UART_AdvFeatureConfig+0x15c>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	035b      	lsls	r3, r3, #13
 8002686:	429a      	cmp	r2, r3
 8002688:	d10b      	bne.n	80026a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <UART_AdvFeatureConfig+0x160>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	4013      	ands	r3, r2
 80026aa:	d00b      	beq.n	80026c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <UART_AdvFeatureConfig+0x164>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
  }
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	fffdffff 	.word	0xfffdffff
 80026d0:	fffeffff 	.word	0xfffeffff
 80026d4:	fffbffff 	.word	0xfffbffff
 80026d8:	ffff7fff 	.word	0xffff7fff
 80026dc:	ffffefff 	.word	0xffffefff
 80026e0:	ffffdfff 	.word	0xffffdfff
 80026e4:	ffefffff 	.word	0xffefffff
 80026e8:	ff9fffff 	.word	0xff9fffff
 80026ec:	fff7ffff 	.word	0xfff7ffff

080026f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2290      	movs	r2, #144	; 0x90
 80026fc:	2100      	movs	r1, #0
 80026fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002700:	f7fe f948 	bl	8000994 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2208      	movs	r2, #8
 8002710:	4013      	ands	r3, r2
 8002712:	2b08      	cmp	r3, #8
 8002714:	d10c      	bne.n	8002730 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0391      	lsls	r1, r2, #14
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <UART_CheckIdleState+0x98>)
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	f000 f832 	bl	800278c <UART_WaitOnFlagUntilTimeout>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d001      	beq.n	8002730 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e026      	b.n	800277e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2204      	movs	r2, #4
 8002738:	4013      	ands	r3, r2
 800273a:	2b04      	cmp	r3, #4
 800273c:	d10c      	bne.n	8002758 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	03d1      	lsls	r1, r2, #15
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <UART_CheckIdleState+0x98>)
 8002748:	9200      	str	r2, [sp, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	f000 f81e 	bl	800278c <UART_WaitOnFlagUntilTimeout>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d001      	beq.n	8002758 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e012      	b.n	800277e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2288      	movs	r2, #136	; 0x88
 800275c:	2120      	movs	r1, #32
 800275e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	228c      	movs	r2, #140	; 0x8c
 8002764:	2120      	movs	r1, #32
 8002766:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2284      	movs	r2, #132	; 0x84
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b004      	add	sp, #16
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	01ffffff 	.word	0x01ffffff

0800278c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b094      	sub	sp, #80	; 0x50
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800279c:	e0a7      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a0:	3301      	adds	r3, #1
 80027a2:	d100      	bne.n	80027a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80027a4:	e0a3      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe f8f5 	bl	8000994 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <UART_WaitOnFlagUntilTimeout+0x30>
 80027b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d13f      	bne.n	800283c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027bc:	f3ef 8310 	mrs	r3, PRIMASK
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
 80027c6:	2301      	movs	r3, #1
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	494e      	ldr	r1, [pc, #312]	; (8002918 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
 80027f8:	2301      	movs	r3, #1
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	f383 8810 	msr	PRIMASK, r3
}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2288      	movs	r2, #136	; 0x88
 8002824:	2120      	movs	r1, #32
 8002826:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	228c      	movs	r2, #140	; 0x8c
 800282c:	2120      	movs	r1, #32
 800282e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2284      	movs	r2, #132	; 0x84
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e069      	b.n	8002910 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	d052      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	401a      	ands	r2, r3
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	429a      	cmp	r2, r3
 800285a:	d148      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002866:	f3ef 8310 	mrs	r3, PRIMASK
 800286a:	613b      	str	r3, [r7, #16]
  return(result);
 800286c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002870:	2301      	movs	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f383 8810 	msr	PRIMASK, r3
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4924      	ldr	r1, [pc, #144]	; (8002918 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f383 8810 	msr	PRIMASK, r3
}
 8002896:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002898:	f3ef 8310 	mrs	r3, PRIMASK
 800289c:	61fb      	str	r3, [r7, #28]
  return(result);
 800289e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a2:	2301      	movs	r3, #1
 80028a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	f383 8810 	msr	PRIMASK, r3
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	438a      	bics	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2288      	movs	r2, #136	; 0x88
 80028ce:	2120      	movs	r1, #32
 80028d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	228c      	movs	r2, #140	; 0x8c
 80028d6:	2120      	movs	r1, #32
 80028d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2290      	movs	r2, #144	; 0x90
 80028de:	2120      	movs	r1, #32
 80028e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2284      	movs	r2, #132	; 0x84
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e010      	b.n	8002910 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	425a      	negs	r2, r3
 80028fe:	4153      	adcs	r3, r2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	001a      	movs	r2, r3
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d100      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x182>
 800290c:	e747      	b.n	800279e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b014      	add	sp, #80	; 0x50
 8002916:	bd80      	pop	{r7, pc}
 8002918:	fffffe5f 	.word	0xfffffe5f

0800291c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2284      	movs	r2, #132	; 0x84
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_UARTEx_DisableFifoMode+0x16>
 800292e:	2302      	movs	r3, #2
 8002930:	e027      	b.n	8002982 <HAL_UARTEx_DisableFifoMode+0x66>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2284      	movs	r2, #132	; 0x84
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2288      	movs	r2, #136	; 0x88
 800293e:	2124      	movs	r1, #36	; 0x24
 8002940:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	438a      	bics	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a0b      	ldr	r2, [pc, #44]	; (800298c <HAL_UARTEx_DisableFifoMode+0x70>)
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2288      	movs	r2, #136	; 0x88
 8002974:	2120      	movs	r1, #32
 8002976:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2284      	movs	r2, #132	; 0x84
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	dfffffff 	.word	0xdfffffff

08002990 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2284      	movs	r2, #132	; 0x84
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e02e      	b.n	8002a06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2284      	movs	r2, #132	; 0x84
 80029ac:	2101      	movs	r1, #1
 80029ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2288      	movs	r2, #136	; 0x88
 80029b4:	2124      	movs	r1, #36	; 0x24
 80029b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2101      	movs	r1, #1
 80029cc:	438a      	bics	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	08d9      	lsrs	r1, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f854 	bl	8002a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2288      	movs	r2, #136	; 0x88
 80029f8:	2120      	movs	r1, #32
 80029fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2284      	movs	r2, #132	; 0x84
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b004      	add	sp, #16
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2284      	movs	r2, #132	; 0x84
 8002a1e:	5c9b      	ldrb	r3, [r3, r2]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e02f      	b.n	8002a88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2284      	movs	r2, #132	; 0x84
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2288      	movs	r2, #136	; 0x88
 8002a34:	2124      	movs	r1, #36	; 0x24
 8002a36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f813 	bl	8002a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2288      	movs	r2, #136	; 0x88
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2284      	movs	r2, #132	; 0x84
 8002a82:	2100      	movs	r1, #0
 8002a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	f1ffffff 	.word	0xf1ffffff

08002a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d108      	bne.n	8002ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	226a      	movs	r2, #106	; 0x6a
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2268      	movs	r2, #104	; 0x68
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ab4:	e043      	b.n	8002b3e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ab6:	260f      	movs	r6, #15
 8002ab8:	19bb      	adds	r3, r7, r6
 8002aba:	2208      	movs	r2, #8
 8002abc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002abe:	200e      	movs	r0, #14
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	0e5b      	lsrs	r3, r3, #25
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	240d      	movs	r4, #13
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	2107      	movs	r1, #7
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	0f5b      	lsrs	r3, r3, #29
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	250c      	movs	r5, #12
 8002ae6:	197b      	adds	r3, r7, r5
 8002ae8:	2107      	movs	r1, #7
 8002aea:	400a      	ands	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002aee:	183b      	adds	r3, r7, r0
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	197a      	adds	r2, r7, r5
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	4914      	ldr	r1, [pc, #80]	; (8002b48 <UARTEx_SetNbDataToProcess+0xb4>)
 8002af8:	5c8a      	ldrb	r2, [r1, r2]
 8002afa:	435a      	muls	r2, r3
 8002afc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002afe:	197b      	adds	r3, r7, r5
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <UARTEx_SetNbDataToProcess+0xb8>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b06:	0019      	movs	r1, r3
 8002b08:	f7fd fb84 	bl	8000214 <__divsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	b299      	uxth	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	226a      	movs	r2, #106	; 0x6a
 8002b14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b16:	19bb      	adds	r3, r7, r6
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	193a      	adds	r2, r7, r4
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <UARTEx_SetNbDataToProcess+0xb4>)
 8002b20:	5c8a      	ldrb	r2, [r1, r2]
 8002b22:	435a      	muls	r2, r3
 8002b24:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <UARTEx_SetNbDataToProcess+0xb8>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b2e:	0019      	movs	r1, r3
 8002b30:	f7fd fb70 	bl	8000214 <__divsi3>
 8002b34:	0003      	movs	r3, r0
 8002b36:	b299      	uxth	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2268      	movs	r2, #104	; 0x68
 8002b3c:	5299      	strh	r1, [r3, r2]
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b005      	add	sp, #20
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	08002c38 	.word	0x08002c38
 8002b4c:	08002c40 	.word	0x08002c40

08002b50 <__libc_init_array>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	2600      	movs	r6, #0
 8002b54:	4d0c      	ldr	r5, [pc, #48]	; (8002b88 <__libc_init_array+0x38>)
 8002b56:	4c0d      	ldr	r4, [pc, #52]	; (8002b8c <__libc_init_array+0x3c>)
 8002b58:	1b64      	subs	r4, r4, r5
 8002b5a:	10a4      	asrs	r4, r4, #2
 8002b5c:	42a6      	cmp	r6, r4
 8002b5e:	d109      	bne.n	8002b74 <__libc_init_array+0x24>
 8002b60:	2600      	movs	r6, #0
 8002b62:	f000 f821 	bl	8002ba8 <_init>
 8002b66:	4d0a      	ldr	r5, [pc, #40]	; (8002b90 <__libc_init_array+0x40>)
 8002b68:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <__libc_init_array+0x44>)
 8002b6a:	1b64      	subs	r4, r4, r5
 8002b6c:	10a4      	asrs	r4, r4, #2
 8002b6e:	42a6      	cmp	r6, r4
 8002b70:	d105      	bne.n	8002b7e <__libc_init_array+0x2e>
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
 8002b74:	00b3      	lsls	r3, r6, #2
 8002b76:	58eb      	ldr	r3, [r5, r3]
 8002b78:	4798      	blx	r3
 8002b7a:	3601      	adds	r6, #1
 8002b7c:	e7ee      	b.n	8002b5c <__libc_init_array+0xc>
 8002b7e:	00b3      	lsls	r3, r6, #2
 8002b80:	58eb      	ldr	r3, [r5, r3]
 8002b82:	4798      	blx	r3
 8002b84:	3601      	adds	r6, #1
 8002b86:	e7f2      	b.n	8002b6e <__libc_init_array+0x1e>
 8002b88:	08002c48 	.word	0x08002c48
 8002b8c:	08002c48 	.word	0x08002c48
 8002b90:	08002c48 	.word	0x08002c48
 8002b94:	08002c4c 	.word	0x08002c4c

08002b98 <memset>:
 8002b98:	0003      	movs	r3, r0
 8002b9a:	1882      	adds	r2, r0, r2
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d100      	bne.n	8002ba2 <memset+0xa>
 8002ba0:	4770      	bx	lr
 8002ba2:	7019      	strb	r1, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	e7f9      	b.n	8002b9c <memset+0x4>

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
